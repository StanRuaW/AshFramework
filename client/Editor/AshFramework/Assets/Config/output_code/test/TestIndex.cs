
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Plugin.Bright.Serialization;
using System.Collections.Generic;



namespace cfg.test
{

public sealed partial class TestIndex :  Plugin.Bright.Config.BeanBase 
{
    public TestIndex(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        {int n = System.Math.Min(_buf.ReadSize(), _buf.Size);Eles = new System.Collections.Generic.List<test.DemoType1>(n);for(var i = 0 ; i < n ; i++) { test.DemoType1 _e;  _e = test.DemoType1.DeserializeDemoType1(_buf); Eles.Add(_e);}}
        foreach(var _v in Eles)
        { 
            Eles_Index.Add(_v.X1, _v);
        }
    }

    public static TestIndex DeserializeTestIndex(ByteBuf _buf)
    {
        return new test.TestIndex(_buf);
    }

    public int Id { get; private set; }
    public System.Collections.Generic.List<test.DemoType1> Eles { get; private set; }
    public readonly Dictionary<int, test.DemoType1> Eles_Index = new Dictionary<int, test.DemoType1>();

    public const int ID = 1941154020;
    public override int GetTypeId() => ID;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        foreach(var _e in Eles) { _e?.Resolve(_tables); }
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in Eles) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Eles:" + Plugin.Bright.Common.StringUtil.CollectionToString(Eles) + ","
        + "}";
    }
    }

}
