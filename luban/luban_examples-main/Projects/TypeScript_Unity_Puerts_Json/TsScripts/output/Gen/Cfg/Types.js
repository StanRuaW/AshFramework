"use strict";
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
Object.defineProperty(exports, "__esModule", { value: true });
exports.cfg = exports.Vector4 = exports.Vector3 = exports.Vector2 = void 0;
class Vector2 {
    constructor(x = 0, y = 0) {
        this.x = x;
        this.y = y;
    }
    static deserializeFromJson(json) {
        let x = json['x'];
        let y = json['y'];
        if (x == null || y == null) {
            throw new Error();
        }
        return new Vector2(x, y);
    }
}
exports.Vector2 = Vector2;
class Vector3 {
    constructor(x = 0, y = 0, z = 0) {
        this.x = x;
        this.y = y;
        this.z = z;
    }
    static deserializeFromJson(json) {
        let x = json['x'];
        let y = json['y'];
        let z = json['z'];
        if (x == null || y == null || z == null) {
            throw new Error();
        }
        return new Vector3(x, y, z);
    }
}
exports.Vector3 = Vector3;
class Vector4 {
    constructor(x = 0, y = 0, z = 0, w = 0) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
    }
    static deserializeFromJson(json) {
        let x = json['x'];
        let y = json['y'];
        let z = json['z'];
        let w = json['w'];
        if (x == null || y == null || z == null || w == null) {
            throw new Error();
        }
        return new Vector4(x, y, z, w);
    }
}
exports.Vector4 = Vector4;
var cfg;
(function (cfg) {
    let role;
    (function (role) {
        class Consts {
        }
        Consts.MAX_NAME_LENGTH = 20;
        Consts.MAX_USER_ROLE_NUM = 10;
        role.Consts = Consts;
    })(role = cfg.role || (cfg.role = {}));
    let test;
    (function (test) {
        class DemoConst {
        }
        DemoConst.x1 = 0;
        DemoConst.x2 = 3242;
        DemoConst.x3 = 444.3;
        DemoConst.x4 = 55.3;
        test.DemoConst = DemoConst;
    })(test = cfg.test || (cfg.test = {}));
    let ai;
    (function (ai) {
        let EExecutor;
        (function (EExecutor) {
            EExecutor[EExecutor["CLIENT"] = 0] = "CLIENT";
            EExecutor[EExecutor["SERVER"] = 1] = "SERVER";
        })(EExecutor = ai.EExecutor || (ai.EExecutor = {}));
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        let EKeyType;
        (function (EKeyType) {
            EKeyType[EKeyType["BOOL"] = 1] = "BOOL";
            EKeyType[EKeyType["INT"] = 2] = "INT";
            EKeyType[EKeyType["FLOAT"] = 3] = "FLOAT";
            EKeyType[EKeyType["STRING"] = 4] = "STRING";
            EKeyType[EKeyType["VECTOR"] = 5] = "VECTOR";
            EKeyType[EKeyType["ROTATOR"] = 6] = "ROTATOR";
            EKeyType[EKeyType["NAME"] = 7] = "NAME";
            EKeyType[EKeyType["CLASS"] = 8] = "CLASS";
            EKeyType[EKeyType["ENUM"] = 9] = "ENUM";
            EKeyType[EKeyType["OBJECT"] = 10] = "OBJECT";
        })(EKeyType = ai.EKeyType || (ai.EKeyType = {}));
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        let EFlowAbortMode;
        (function (EFlowAbortMode) {
            EFlowAbortMode[EFlowAbortMode["NONE"] = 0] = "NONE";
            EFlowAbortMode[EFlowAbortMode["LOWER_PRIORITY"] = 1] = "LOWER_PRIORITY";
            EFlowAbortMode[EFlowAbortMode["SELF"] = 2] = "SELF";
            EFlowAbortMode[EFlowAbortMode["BOTH"] = 3] = "BOTH";
        })(EFlowAbortMode = ai.EFlowAbortMode || (ai.EFlowAbortMode = {}));
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        let EFinishMode;
        (function (EFinishMode) {
            EFinishMode[EFinishMode["IMMEDIATE"] = 0] = "IMMEDIATE";
            EFinishMode[EFinishMode["DELAYED"] = 1] = "DELAYED";
        })(EFinishMode = ai.EFinishMode || (ai.EFinishMode = {}));
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        let ENotifyObserverMode;
        (function (ENotifyObserverMode) {
            ENotifyObserverMode[ENotifyObserverMode["ON_VALUE_CHANGE"] = 0] = "ON_VALUE_CHANGE";
            ENotifyObserverMode[ENotifyObserverMode["ON_RESULT_CHANGE"] = 1] = "ON_RESULT_CHANGE";
        })(ENotifyObserverMode = ai.ENotifyObserverMode || (ai.ENotifyObserverMode = {}));
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        let EOperator;
        (function (EOperator) {
            EOperator[EOperator["IS_EQUAL_TO"] = 0] = "IS_EQUAL_TO";
            EOperator[EOperator["IS_NOT_EQUAL_TO"] = 1] = "IS_NOT_EQUAL_TO";
            EOperator[EOperator["IS_LESS_THAN"] = 2] = "IS_LESS_THAN";
            EOperator[EOperator["IS_LESS_THAN_OR_EQUAL_TO"] = 3] = "IS_LESS_THAN_OR_EQUAL_TO";
            EOperator[EOperator["IS_GREAT_THAN"] = 4] = "IS_GREAT_THAN";
            EOperator[EOperator["IS_GREAT_THAN_OR_EQUAL_TO"] = 5] = "IS_GREAT_THAN_OR_EQUAL_TO";
            EOperator[EOperator["CONTAINS"] = 6] = "CONTAINS";
            EOperator[EOperator["NOT_CONTAINS"] = 7] = "NOT_CONTAINS";
        })(EOperator = ai.EOperator || (ai.EOperator = {}));
    })(ai = cfg.ai || (cfg.ai = {}));
    let common;
    (function (common) {
        let EBoolOperator;
        (function (EBoolOperator) {
            EBoolOperator[EBoolOperator["AND"] = 0] = "AND";
            EBoolOperator[EBoolOperator["OR"] = 1] = "OR";
        })(EBoolOperator = common.EBoolOperator || (common.EBoolOperator = {}));
    })(common = cfg.common || (cfg.common = {}));
    let error;
    (function (error) {
        let EOperation;
        (function (EOperation) {
            EOperation[EOperation["LOGOUT"] = 0] = "LOGOUT";
            EOperation[EOperation["RESTART"] = 1] = "RESTART";
        })(EOperation = error.EOperation || (error.EOperation = {}));
    })(error = cfg.error || (cfg.error = {}));
    (function (error) {
        let EErrorCode;
        (function (EErrorCode) {
            EErrorCode[EErrorCode["OK"] = 0] = "OK";
            EErrorCode[EErrorCode["SERVER_NOT_EXISTS"] = 1] = "SERVER_NOT_EXISTS";
            EErrorCode[EErrorCode["HAS_BIND_SERVER"] = 2] = "HAS_BIND_SERVER";
            EErrorCode[EErrorCode["AUTH_FAIL"] = 3] = "AUTH_FAIL";
            EErrorCode[EErrorCode["NOT_BIND_SERVER"] = 4] = "NOT_BIND_SERVER";
            EErrorCode[EErrorCode["SERVER_ACCESS_FAIL"] = 5] = "SERVER_ACCESS_FAIL";
            EErrorCode[EErrorCode["EXAMPLE_FLASH"] = 6] = "EXAMPLE_FLASH";
            EErrorCode[EErrorCode["EXAMPLE_MSGBOX"] = 7] = "EXAMPLE_MSGBOX";
            EErrorCode[EErrorCode["EXAMPLE_DLG_OK"] = 8] = "EXAMPLE_DLG_OK";
            EErrorCode[EErrorCode["EXAMPLE_DLG_OK_CANCEL"] = 9] = "EXAMPLE_DLG_OK_CANCEL";
            EErrorCode[EErrorCode["ROLE_CREATE_NAME_INVALID_CHAR"] = 100] = "ROLE_CREATE_NAME_INVALID_CHAR";
            EErrorCode[EErrorCode["ROLE_CREATE_NAME_EMPTY"] = 101] = "ROLE_CREATE_NAME_EMPTY";
            EErrorCode[EErrorCode["ROLE_CREATE_NAME_EXCEED_MAX_LENGTH"] = 102] = "ROLE_CREATE_NAME_EXCEED_MAX_LENGTH";
            EErrorCode[EErrorCode["ROLE_CREATE_ROLE_LIST_FULL"] = 103] = "ROLE_CREATE_ROLE_LIST_FULL";
            EErrorCode[EErrorCode["ROLE_CREATE_INVALID_PROFESSION"] = 104] = "ROLE_CREATE_INVALID_PROFESSION";
            EErrorCode[EErrorCode["ROLE_CREATE_INVALID_GENDER"] = 105] = "ROLE_CREATE_INVALID_GENDER";
            EErrorCode[EErrorCode["ROLE_NOT_OWNED_BY_USER"] = 106] = "ROLE_NOT_OWNED_BY_USER";
            EErrorCode[EErrorCode["ROLE_LEVEL_NOT_ARRIVE"] = 107] = "ROLE_LEVEL_NOT_ARRIVE";
            EErrorCode[EErrorCode["PARAM_ILLEGAL"] = 200] = "PARAM_ILLEGAL";
            EErrorCode[EErrorCode["TEMP_BAG_NOT_EMPTY"] = 201] = "TEMP_BAG_NOT_EMPTY";
            EErrorCode[EErrorCode["ITEM_CAN_NOT_USE"] = 202] = "ITEM_CAN_NOT_USE";
            EErrorCode[EErrorCode["CURRENCY_NOT_ENOUGH"] = 203] = "CURRENCY_NOT_ENOUGH";
            EErrorCode[EErrorCode["BAG_IS_FULL"] = 204] = "BAG_IS_FULL";
            EErrorCode[EErrorCode["ITEM_NOT_ENOUGH"] = 205] = "ITEM_NOT_ENOUGH";
            EErrorCode[EErrorCode["ITEM_IN_BAG"] = 206] = "ITEM_IN_BAG";
            EErrorCode[EErrorCode["GENDER_NOT_MATCH"] = 300] = "GENDER_NOT_MATCH";
            EErrorCode[EErrorCode["LEVEL_TOO_LOW"] = 301] = "LEVEL_TOO_LOW";
            EErrorCode[EErrorCode["LEVEL_TOO_HIGH"] = 302] = "LEVEL_TOO_HIGH";
            EErrorCode[EErrorCode["EXCEED_LIMIT"] = 303] = "EXCEED_LIMIT";
            EErrorCode[EErrorCode["OVER_TIME"] = 304] = "OVER_TIME";
            EErrorCode[EErrorCode["SERVER_ERROR"] = 305] = "SERVER_ERROR";
            EErrorCode[EErrorCode["SKILL_NOT_IN_LIST"] = 400] = "SKILL_NOT_IN_LIST";
            EErrorCode[EErrorCode["SKILL_NOT_COOLDOWN"] = 401] = "SKILL_NOT_COOLDOWN";
            EErrorCode[EErrorCode["SKILL_TARGET_NOT_EXIST"] = 402] = "SKILL_TARGET_NOT_EXIST";
            EErrorCode[EErrorCode["SKILL_ANOTHER_CASTING"] = 403] = "SKILL_ANOTHER_CASTING";
            EErrorCode[EErrorCode["SKILL_OUT_OF_DISTANCE"] = 404] = "SKILL_OUT_OF_DISTANCE";
            EErrorCode[EErrorCode["SKILL_TARGET_CAMP_NOT_MATCH"] = 405] = "SKILL_TARGET_CAMP_NOT_MATCH";
            EErrorCode[EErrorCode["SKILL_INVALID_DIRECTION"] = 406] = "SKILL_INVALID_DIRECTION";
            EErrorCode[EErrorCode["SKILL_NOT_IN_SELECT_SHAPE"] = 407] = "SKILL_NOT_IN_SELECT_SHAPE";
            EErrorCode[EErrorCode["SKILL_ENERGY_NOT_ENOUGH"] = 408] = "SKILL_ENERGY_NOT_ENOUGH";
            EErrorCode[EErrorCode["DIALOG_NODE_NOT_CHOOSEN"] = 500] = "DIALOG_NODE_NOT_CHOOSEN";
            EErrorCode[EErrorCode["DIALOG_NOT_FINISH"] = 501] = "DIALOG_NOT_FINISH";
            EErrorCode[EErrorCode["DIALOG_HAS_FINISH"] = 502] = "DIALOG_HAS_FINISH";
            EErrorCode[EErrorCode["QUEST_STAGE_NOT_FINISHED"] = 503] = "QUEST_STAGE_NOT_FINISHED";
            EErrorCode[EErrorCode["QUEST_NOT_DOING"] = 504] = "QUEST_NOT_DOING";
            EErrorCode[EErrorCode["QUEST_STAGE_NOT_DOING"] = 505] = "QUEST_STAGE_NOT_DOING";
            EErrorCode[EErrorCode["QUEST_HAS_ACCEPTED"] = 506] = "QUEST_HAS_ACCEPTED";
            EErrorCode[EErrorCode["MAP_OBJECT_NOT_EXIST"] = 600] = "MAP_OBJECT_NOT_EXIST";
            EErrorCode[EErrorCode["INTERACTION_OBJECT_NOT_SUPPORT_OPERATION"] = 601] = "INTERACTION_OBJECT_NOT_SUPPORT_OPERATION";
            EErrorCode[EErrorCode["HAS_NOT_EQUIP"] = 602] = "HAS_NOT_EQUIP";
            EErrorCode[EErrorCode["HANDHELD_EQUIP_ID_NOT_MATCH"] = 603] = "HANDHELD_EQUIP_ID_NOT_MATCH";
            EErrorCode[EErrorCode["NOT_AVAILABLE_SUIT_ID"] = 604] = "NOT_AVAILABLE_SUIT_ID";
            EErrorCode[EErrorCode["NO_INTERACTION_COMPONENT"] = 605] = "NO_INTERACTION_COMPONENT";
            EErrorCode[EErrorCode["HAS_INTERACTED"] = 606] = "HAS_INTERACTED";
            EErrorCode[EErrorCode["VIALITY_NOT_ENOUGH"] = 607] = "VIALITY_NOT_ENOUGH";
            EErrorCode[EErrorCode["PLAYER_SESSION_NOT_EXIST"] = 608] = "PLAYER_SESSION_NOT_EXIST";
            EErrorCode[EErrorCode["PLAYER_SESSION_WORLD_PLAYER_NOT_INIT"] = 609] = "PLAYER_SESSION_WORLD_PLAYER_NOT_INIT";
            EErrorCode[EErrorCode["MAP_NOT_EXIST"] = 610] = "MAP_NOT_EXIST";
            EErrorCode[EErrorCode["MAIL_TYPE_ERROR"] = 700] = "MAIL_TYPE_ERROR";
            EErrorCode[EErrorCode["MAIL_NOT_EXITST"] = 701] = "MAIL_NOT_EXITST";
            EErrorCode[EErrorCode["MAIL_HAVE_DELETED"] = 702] = "MAIL_HAVE_DELETED";
            EErrorCode[EErrorCode["MAIL_AWARD_HAVE_RECEIVED"] = 703] = "MAIL_AWARD_HAVE_RECEIVED";
            EErrorCode[EErrorCode["MAIL_OPERATE_TYPE_ERROR"] = 704] = "MAIL_OPERATE_TYPE_ERROR";
            EErrorCode[EErrorCode["MAIL_CONDITION_NOT_MEET"] = 705] = "MAIL_CONDITION_NOT_MEET";
            EErrorCode[EErrorCode["MAIL_STATE_ERROR"] = 706] = "MAIL_STATE_ERROR";
            EErrorCode[EErrorCode["MAIL_NO_AWARD"] = 707] = "MAIL_NO_AWARD";
            EErrorCode[EErrorCode["MAIL_BOX_IS_FULL"] = 708] = "MAIL_BOX_IS_FULL";
            EErrorCode[EErrorCode["PROP_SCORE_NOT_BIGGER_THAN"] = 800] = "PROP_SCORE_NOT_BIGGER_THAN";
            EErrorCode[EErrorCode["NOT_WEAR_CLOTHES"] = 801] = "NOT_WEAR_CLOTHES";
            EErrorCode[EErrorCode["NOT_WEAR_SUIT"] = 802] = "NOT_WEAR_SUIT";
            EErrorCode[EErrorCode["SUIT_NOT_UNLOCK"] = 900] = "SUIT_NOT_UNLOCK";
            EErrorCode[EErrorCode["SUIT_COMPONENT_NOT_UNLOCK"] = 901] = "SUIT_COMPONENT_NOT_UNLOCK";
            EErrorCode[EErrorCode["SUIT_STATE_ERROR"] = 902] = "SUIT_STATE_ERROR";
            EErrorCode[EErrorCode["SUIT_COMPONENT_STATE_ERROR"] = 903] = "SUIT_COMPONENT_STATE_ERROR";
            EErrorCode[EErrorCode["SUIT_COMPONENT_NO_NEED_LEARN"] = 904] = "SUIT_COMPONENT_NO_NEED_LEARN";
            EErrorCode[EErrorCode["STORE_NOT_ENABLED"] = 1000] = "STORE_NOT_ENABLED";
            EErrorCode[EErrorCode["SHELF_NOT_ENABLED"] = 1001] = "SHELF_NOT_ENABLED";
            EErrorCode[EErrorCode["GOODS_NOT_ENABLED"] = 1002] = "GOODS_NOT_ENABLED";
            EErrorCode[EErrorCode["GOODS_NOT_IN_CUR_REFRESH"] = 1003] = "GOODS_NOT_IN_CUR_REFRESH";
            EErrorCode[EErrorCode["RETRY"] = 1100] = "RETRY";
            EErrorCode[EErrorCode["NOT_COOLDOWN"] = 1101] = "NOT_COOLDOWN";
            EErrorCode[EErrorCode["SELFIE_UNLOCK"] = 1200] = "SELFIE_UNLOCK";
            EErrorCode[EErrorCode["SELFIE_ALREADY_UNLOCK"] = 1201] = "SELFIE_ALREADY_UNLOCK";
            EErrorCode[EErrorCode["SELFIE_LACK_STARTS"] = 1202] = "SELFIE_LACK_STARTS";
            EErrorCode[EErrorCode["SELFIE_HAD_REWARD"] = 1203] = "SELFIE_HAD_REWARD";
        })(EErrorCode = error.EErrorCode || (error.EErrorCode = {}));
    })(error = cfg.error || (cfg.error = {}));
    let item;
    (function (item) {
        let EItemQuality;
        (function (EItemQuality) {
            EItemQuality[EItemQuality["WHITE"] = 0] = "WHITE";
            EItemQuality[EItemQuality["GREEN"] = 1] = "GREEN";
            EItemQuality[EItemQuality["BLUE"] = 2] = "BLUE";
            EItemQuality[EItemQuality["PURPLE"] = 3] = "PURPLE";
            EItemQuality[EItemQuality["GOLDEN"] = 4] = "GOLDEN";
        })(EItemQuality = item.EItemQuality || (item.EItemQuality = {}));
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        let ECurrencyType;
        (function (ECurrencyType) {
            ECurrencyType[ECurrencyType["DIAMOND"] = 1] = "DIAMOND";
            ECurrencyType[ECurrencyType["GOLD"] = 2] = "GOLD";
            ECurrencyType[ECurrencyType["SILVER"] = 3] = "SILVER";
            ECurrencyType[ECurrencyType["EXP"] = 4] = "EXP";
            ECurrencyType[ECurrencyType["POWER_POINT"] = 5] = "POWER_POINT";
        })(ECurrencyType = item.ECurrencyType || (item.ECurrencyType = {}));
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        let EMajorType;
        (function (EMajorType) {
            EMajorType[EMajorType["CURRENCY"] = 1] = "CURRENCY";
            EMajorType[EMajorType["CLOTH"] = 2] = "CLOTH";
            EMajorType[EMajorType["QUEST"] = 3] = "QUEST";
            EMajorType[EMajorType["CONSUMABLES"] = 4] = "CONSUMABLES";
            EMajorType[EMajorType["TREASURE_BOX"] = 5] = "TREASURE_BOX";
            EMajorType[EMajorType["ACHIEVEMENT_AND_TITLE"] = 6] = "ACHIEVEMENT_AND_TITLE";
            EMajorType[EMajorType["HEAD_FRAME"] = 7] = "HEAD_FRAME";
            EMajorType[EMajorType["VOICE"] = 8] = "VOICE";
            EMajorType[EMajorType["ACTION"] = 9] = "ACTION";
            EMajorType[EMajorType["EXPANSION"] = 10] = "EXPANSION";
            EMajorType[EMajorType["MATERIAL"] = 11] = "MATERIAL";
        })(EMajorType = item.EMajorType || (item.EMajorType = {}));
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        let EMinorType;
        (function (EMinorType) {
            EMinorType[EMinorType["DIAMOND"] = 101] = "DIAMOND";
            EMinorType[EMinorType["GOLD"] = 102] = "GOLD";
            EMinorType[EMinorType["SILVER"] = 103] = "SILVER";
            EMinorType[EMinorType["EXP"] = 104] = "EXP";
            EMinorType[EMinorType["POWER_POINT"] = 105] = "POWER_POINT";
            EMinorType[EMinorType["HAIR_STYLE"] = 210] = "HAIR_STYLE";
            EMinorType[EMinorType["COAT"] = 220] = "COAT";
            EMinorType[EMinorType["UPPER_JACKET"] = 230] = "UPPER_JACKET";
            EMinorType[EMinorType["TROUSERS"] = 241] = "TROUSERS";
            EMinorType[EMinorType["SKIRT"] = 242] = "SKIRT";
            EMinorType[EMinorType["SOCKS"] = 250] = "SOCKS";
            EMinorType[EMinorType["SHOES"] = 260] = "SHOES";
            EMinorType[EMinorType["HAIR_ACCESSORY"] = 271] = "HAIR_ACCESSORY";
            EMinorType[EMinorType["HAT"] = 272] = "HAT";
            EMinorType[EMinorType["EARRING"] = 273] = "EARRING";
            EMinorType[EMinorType["NECKLACE"] = 274] = "NECKLACE";
            EMinorType[EMinorType["BRACELET"] = 275] = "BRACELET";
            EMinorType[EMinorType["HAIR_CLASP"] = 276] = "HAIR_CLASP";
            EMinorType[EMinorType["GLOVE"] = 277] = "GLOVE";
            EMinorType[EMinorType["HANDHELD_OBJECT"] = 278] = "HANDHELD_OBJECT";
            EMinorType[EMinorType["SPECIAL"] = 279] = "SPECIAL";
            EMinorType[EMinorType["BASE_COSMETIC"] = 281] = "BASE_COSMETIC";
            EMinorType[EMinorType["EYEBROW_COSMETIC"] = 282] = "EYEBROW_COSMETIC";
            EMinorType[EMinorType["EYELASH"] = 283] = "EYELASH";
            EMinorType[EMinorType["COSMETIC_CONTACT_LENSES"] = 284] = "COSMETIC_CONTACT_LENSES";
            EMinorType[EMinorType["LIP_COSMETIC"] = 285] = "LIP_COSMETIC";
            EMinorType[EMinorType["SKIN_COLOR"] = 286] = "SKIN_COLOR";
            EMinorType[EMinorType["ONE_PIECE_DRESS"] = 290] = "ONE_PIECE_DRESS";
            EMinorType[EMinorType["SWITCH_CLOTHES_SCENE"] = 291] = "SWITCH_CLOTHES_SCENE";
            EMinorType[EMinorType["QUEST"] = 301] = "QUEST";
            EMinorType[EMinorType["CAST"] = 401] = "CAST";
            EMinorType[EMinorType["SWORD"] = 421] = "SWORD";
            EMinorType[EMinorType["BOW_ARROW"] = 422] = "BOW_ARROW";
            EMinorType[EMinorType["WANDS"] = 423] = "WANDS";
            EMinorType[EMinorType["SPECIAL_TOOL"] = 424] = "SPECIAL_TOOL";
            EMinorType[EMinorType["FOOD"] = 403] = "FOOD";
            EMinorType[EMinorType["TREASURE_BOX"] = 501] = "TREASURE_BOX";
            EMinorType[EMinorType["KEY"] = 502] = "KEY";
            EMinorType[EMinorType["MULTI_CHOOSE_TREASURE_BOX"] = 503] = "MULTI_CHOOSE_TREASURE_BOX";
            EMinorType[EMinorType["ACHIEVEMENT"] = 601] = "ACHIEVEMENT";
            EMinorType[EMinorType["TITLE"] = 602] = "TITLE";
            EMinorType[EMinorType["AVATAR_FRAME"] = 701] = "AVATAR_FRAME";
            EMinorType[EMinorType["VOICE"] = 801] = "VOICE";
            EMinorType[EMinorType["IDLE_POSE"] = 901] = "IDLE_POSE";
            EMinorType[EMinorType["PHOTO_POSE"] = 902] = "PHOTO_POSE";
            EMinorType[EMinorType["BAG"] = 1001] = "BAG";
            EMinorType[EMinorType["FRIEND_CAPACITY"] = 1002] = "FRIEND_CAPACITY";
            EMinorType[EMinorType["CONSTRUCTION_MATERIAL"] = 1101] = "CONSTRUCTION_MATERIAL";
            EMinorType[EMinorType["DESIGN_DRAWING"] = 1102] = "DESIGN_DRAWING";
        })(EMinorType = item.EMinorType || (item.EMinorType = {}));
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        let EClothersStarQualityType;
        (function (EClothersStarQualityType) {
            EClothersStarQualityType[EClothersStarQualityType["ONE"] = 1] = "ONE";
            EClothersStarQualityType[EClothersStarQualityType["TWO"] = 2] = "TWO";
            EClothersStarQualityType[EClothersStarQualityType["THREE"] = 3] = "THREE";
            EClothersStarQualityType[EClothersStarQualityType["FOUR"] = 4] = "FOUR";
            EClothersStarQualityType[EClothersStarQualityType["FIVE"] = 5] = "FIVE";
            EClothersStarQualityType[EClothersStarQualityType["SIX"] = 6] = "SIX";
            EClothersStarQualityType[EClothersStarQualityType["SEVEN"] = 7] = "SEVEN";
            EClothersStarQualityType[EClothersStarQualityType["EIGHT"] = 8] = "EIGHT";
            EClothersStarQualityType[EClothersStarQualityType["NINE"] = 9] = "NINE";
            EClothersStarQualityType[EClothersStarQualityType["TEN"] = 10] = "TEN";
        })(EClothersStarQualityType = item.EClothersStarQualityType || (item.EClothersStarQualityType = {}));
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        let EClothersTag;
        (function (EClothersTag) {
            EClothersTag[EClothersTag["FANG_SHAI"] = 1] = "FANG_SHAI";
            EClothersTag[EClothersTag["WU_ZHE"] = 2] = "WU_ZHE";
        })(EClothersTag = item.EClothersTag || (item.EClothersTag = {}));
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        let EUseType;
        (function (EUseType) {
            EUseType[EUseType["MANUAL"] = 0] = "MANUAL";
            EUseType[EUseType["AUTO"] = 1] = "AUTO";
        })(EUseType = item.EUseType || (item.EUseType = {}));
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        let EClothesHidePartType;
        (function (EClothesHidePartType) {
            EClothesHidePartType[EClothesHidePartType["CHEST"] = 0] = "CHEST";
            EClothesHidePartType[EClothesHidePartType["HEAD"] = 1] = "HEAD";
            EClothesHidePartType[EClothesHidePartType["SPINE_UPPER"] = 2] = "SPINE_UPPER";
            EClothesHidePartType[EClothesHidePartType["SPINE_LOWER"] = 3] = "SPINE_LOWER";
            EClothesHidePartType[EClothesHidePartType["HIP"] = 4] = "HIP";
            EClothesHidePartType[EClothesHidePartType["LEG_UPPER"] = 5] = "LEG_UPPER";
            EClothesHidePartType[EClothesHidePartType["LEG_MIDDLE"] = 6] = "LEG_MIDDLE";
            EClothesHidePartType[EClothesHidePartType["LEG_LOWER"] = 7] = "LEG_LOWER";
        })(EClothesHidePartType = item.EClothesHidePartType || (item.EClothesHidePartType = {}));
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        let EClothesPropertyType;
        (function (EClothesPropertyType) {
            EClothesPropertyType[EClothesPropertyType["JIAN_YUE"] = 1] = "JIAN_YUE";
            EClothesPropertyType[EClothesPropertyType["HUA_LI"] = 2] = "HUA_LI";
            EClothesPropertyType[EClothesPropertyType["KE_AI"] = 3] = "KE_AI";
            EClothesPropertyType[EClothesPropertyType["CHENG_SHU"] = 4] = "CHENG_SHU";
            EClothesPropertyType[EClothesPropertyType["HUO_PO"] = 5] = "HUO_PO";
            EClothesPropertyType[EClothesPropertyType["YOU_YA"] = 6] = "YOU_YA";
            EClothesPropertyType[EClothesPropertyType["QING_CHUN"] = 7] = "QING_CHUN";
            EClothesPropertyType[EClothesPropertyType["XING_GAN"] = 8] = "XING_GAN";
            EClothesPropertyType[EClothesPropertyType["QING_LIANG"] = 9] = "QING_LIANG";
            EClothesPropertyType[EClothesPropertyType["BAO_NUAN"] = 10] = "BAO_NUAN";
        })(EClothesPropertyType = item.EClothesPropertyType || (item.EClothesPropertyType = {}));
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        let EItemFunctionType;
        (function (EItemFunctionType) {
            EItemFunctionType[EItemFunctionType["REPLACE_HANDHELD"] = 0] = "REPLACE_HANDHELD";
            EItemFunctionType[EItemFunctionType["USE_DESIGN_DRAWING"] = 1] = "USE_DESIGN_DRAWING";
        })(EItemFunctionType = item.EItemFunctionType || (item.EItemFunctionType = {}));
    })(item = cfg.item || (cfg.item = {}));
    let limit;
    (function (limit) {
        let ENamespace;
        (function (ENamespace) {
            ENamespace[ENamespace["ITEM_DAILY_OBTAIN"] = 1] = "ITEM_DAILY_OBTAIN";
            ENamespace[ENamespace["TREASURE_DAILY_USE"] = 2] = "TREASURE_DAILY_USE";
            ENamespace[ENamespace["STORE_GOODS_LIMIT_BUY"] = 3] = "STORE_GOODS_LIMIT_BUY";
        })(ENamespace = limit.ENamespace || (limit.ENamespace = {}));
    })(limit = cfg.limit || (cfg.limit = {}));
    let mail;
    (function (mail) {
        let EMailType;
        (function (EMailType) {
            EMailType[EMailType["GLOBAL"] = 0] = "GLOBAL";
            EMailType[EMailType["SYSTEM"] = 1] = "SYSTEM";
        })(EMailType = mail.EMailType || (mail.EMailType = {}));
    })(mail = cfg.mail || (cfg.mail = {}));
    (function (role) {
        let EGenderType;
        (function (EGenderType) {
            EGenderType[EGenderType["MALE"] = 1] = "MALE";
            EGenderType[EGenderType["FEMALE"] = 2] = "FEMALE";
        })(EGenderType = role.EGenderType || (role.EGenderType = {}));
    })(role = cfg.role || (cfg.role = {}));
    (function (role) {
        let EProfession;
        (function (EProfession) {
            EProfession[EProfession["TEST_PROFESSION"] = 1] = "TEST_PROFESSION";
        })(EProfession = role.EProfession || (role.EProfession = {}));
    })(role = cfg.role || (cfg.role = {}));
    (function (test) {
        let DemoEnum;
        (function (DemoEnum) {
            DemoEnum[DemoEnum["A"] = 1] = "A";
            DemoEnum[DemoEnum["B"] = 2] = "B";
            DemoEnum[DemoEnum["C"] = 4] = "C";
            DemoEnum[DemoEnum["D"] = 5] = "D";
        })(DemoEnum = test.DemoEnum || (test.DemoEnum = {}));
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        let ETestUeType;
        (function (ETestUeType) {
            ETestUeType[ETestUeType["WHITE"] = 0] = "WHITE";
            ETestUeType[ETestUeType["BLACK"] = 1] = "BLACK";
        })(ETestUeType = test.ETestUeType || (test.ETestUeType = {}));
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        let ETestEmptyEnum;
        (function (ETestEmptyEnum) {
        })(ETestEmptyEnum = test.ETestEmptyEnum || (test.ETestEmptyEnum = {}));
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        let ETestEmptyEnum2;
        (function (ETestEmptyEnum2) {
            ETestEmptyEnum2[ETestEmptyEnum2["SMALL_THAN_256"] = 255] = "SMALL_THAN_256";
            ETestEmptyEnum2[ETestEmptyEnum2["X_256"] = 256] = "X_256";
            ETestEmptyEnum2[ETestEmptyEnum2["X_257"] = 257] = "X_257";
        })(ETestEmptyEnum2 = test.ETestEmptyEnum2 || (test.ETestEmptyEnum2 = {}));
    })(test = cfg.test || (cfg.test = {}));
    (function (ai) {
        class TbBlackboard {
            constructor(_json_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (var _json2_ of _json_) {
                    let _v;
                    _v = new ai.Blackboard(_json2_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.name, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        ai.TbBlackboard = TbBlackboard;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class Blackboard {
            constructor(_json_) {
                if (_json_.name == null) {
                    throw new Error();
                }
                this.name = _json_.name;
                if (_json_.desc == null) {
                    throw new Error();
                }
                this.desc = _json_.desc;
                if (_json_.parent_name == null) {
                    throw new Error();
                }
                this.parentName = _json_.parent_name;
                if (_json_.keys == null) {
                    throw new Error();
                }
                {
                    this.keys = [];
                    for (let _ele of _json_.keys) {
                        let _e;
                        _e = new ai.BlackboardKey(_ele);
                        this.keys.push(_e);
                    }
                }
            }
            resolve(_tables) {
                this.parentName_Ref = _tables.get('ai.TbBlackboard').get(this.parentName);
                for (let _e of this.keys) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        ai.Blackboard = Blackboard;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class BlackboardKey {
            constructor(_json_) {
                if (_json_.name == null) {
                    throw new Error();
                }
                this.name = _json_.name;
                if (_json_.desc == null) {
                    throw new Error();
                }
                this.desc = _json_.desc;
                if (_json_.is_static == null) {
                    throw new Error();
                }
                this.isStatic = _json_.is_static;
                if (_json_.type == null) {
                    throw new Error();
                }
                this.type = _json_.type;
                if (_json_.type_class_name == null) {
                    throw new Error();
                }
                this.typeClassName = _json_.type_class_name;
            }
            resolve(_tables) {
            }
        }
        ai.BlackboardKey = BlackboardKey;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class TbBehaviorTree {
            constructor(_json_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (var _json2_ of _json_) {
                    let _v;
                    _v = new ai.BehaviorTree(_json2_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        ai.TbBehaviorTree = TbBehaviorTree;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class BehaviorTree {
            constructor(_json_) {
                if (_json_.id == null) {
                    throw new Error();
                }
                this.id = _json_.id;
                if (_json_.name == null) {
                    throw new Error();
                }
                this.name = _json_.name;
                if (_json_.desc == null) {
                    throw new Error();
                }
                this.desc = _json_.desc;
                if (_json_.blackboard_id == null) {
                    throw new Error();
                }
                this.blackboardId = _json_.blackboard_id;
                if (_json_.root == null) {
                    throw new Error();
                }
                this.root = ai.ComposeNode.constructorFrom(_json_.root);
            }
            resolve(_tables) {
                this.blackboardId_Ref = _tables.get('ai.TbBlackboard').get(this.blackboardId);
                if (this.root != null) {
                    this.root.resolve(_tables);
                }
            }
        }
        ai.BehaviorTree = BehaviorTree;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class Node {
            constructor(_json_) {
                if (_json_.id == null) {
                    throw new Error();
                }
                this.id = _json_.id;
                if (_json_.node_name == null) {
                    throw new Error();
                }
                this.nodeName = _json_.node_name;
            }
            static constructorFrom(_json_) {
                switch (_json_.__type__) {
                    case 'UeSetDefaultFocus': return new ai.UeSetDefaultFocus(_json_);
                    case 'ExecuteTimeStatistic': return new ai.ExecuteTimeStatistic(_json_);
                    case 'ChooseTarget': return new ai.ChooseTarget(_json_);
                    case 'KeepFaceTarget': return new ai.KeepFaceTarget(_json_);
                    case 'GetOwnerPlayer': return new ai.GetOwnerPlayer(_json_);
                    case 'UpdateDailyBehaviorProps': return new ai.UpdateDailyBehaviorProps(_json_);
                    case 'UeLoop': return new ai.UeLoop(_json_);
                    case 'UeCooldown': return new ai.UeCooldown(_json_);
                    case 'UeTimeLimit': return new ai.UeTimeLimit(_json_);
                    case 'UeBlackboard': return new ai.UeBlackboard(_json_);
                    case 'UeForceSuccess': return new ai.UeForceSuccess(_json_);
                    case 'IsAtLocation': return new ai.IsAtLocation(_json_);
                    case 'DistanceLessThan': return new ai.DistanceLessThan(_json_);
                    case 'Sequence': return new ai.Sequence(_json_);
                    case 'Selector': return new ai.Selector(_json_);
                    case 'SimpleParallel': return new ai.SimpleParallel(_json_);
                    case 'UeWait': return new ai.UeWait(_json_);
                    case 'UeWaitBlackboardTime': return new ai.UeWaitBlackboardTime(_json_);
                    case 'MoveToTarget': return new ai.MoveToTarget(_json_);
                    case 'ChooseSkill': return new ai.ChooseSkill(_json_);
                    case 'MoveToRandomLocation': return new ai.MoveToRandomLocation(_json_);
                    case 'MoveToLocation': return new ai.MoveToLocation(_json_);
                    case 'DebugPrint': return new ai.DebugPrint(_json_);
                    default: throw new Error();
                }
            }
            resolve(_tables) {
            }
        }
        ai.Node = Node;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class Service extends ai.Node {
            static constructorFrom(_json_) {
                switch (_json_.__type__) {
                    case 'UeSetDefaultFocus': return new ai.UeSetDefaultFocus(_json_);
                    case 'ExecuteTimeStatistic': return new ai.ExecuteTimeStatistic(_json_);
                    case 'ChooseTarget': return new ai.ChooseTarget(_json_);
                    case 'KeepFaceTarget': return new ai.KeepFaceTarget(_json_);
                    case 'GetOwnerPlayer': return new ai.GetOwnerPlayer(_json_);
                    case 'UpdateDailyBehaviorProps': return new ai.UpdateDailyBehaviorProps(_json_);
                    default: throw new Error();
                }
            }
            constructor(_json_) {
                super(_json_);
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.Service = Service;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class UeSetDefaultFocus extends ai.Service {
            constructor(_json_) {
                super(_json_);
                if (_json_.keyboard_key == null) {
                    throw new Error();
                }
                this.keyboardKey = _json_.keyboard_key;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.UeSetDefaultFocus = UeSetDefaultFocus;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class ExecuteTimeStatistic extends ai.Service {
            constructor(_json_) {
                super(_json_);
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.ExecuteTimeStatistic = ExecuteTimeStatistic;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class ChooseTarget extends ai.Service {
            constructor(_json_) {
                super(_json_);
                if (_json_.result_target_key == null) {
                    throw new Error();
                }
                this.resultTargetKey = _json_.result_target_key;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.ChooseTarget = ChooseTarget;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class KeepFaceTarget extends ai.Service {
            constructor(_json_) {
                super(_json_);
                if (_json_.target_actor_key == null) {
                    throw new Error();
                }
                this.targetActorKey = _json_.target_actor_key;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.KeepFaceTarget = KeepFaceTarget;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class GetOwnerPlayer extends ai.Service {
            constructor(_json_) {
                super(_json_);
                if (_json_.player_actor_key == null) {
                    throw new Error();
                }
                this.playerActorKey = _json_.player_actor_key;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.GetOwnerPlayer = GetOwnerPlayer;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class UpdateDailyBehaviorProps extends ai.Service {
            constructor(_json_) {
                super(_json_);
                if (_json_.satiety_key == null) {
                    throw new Error();
                }
                this.satietyKey = _json_.satiety_key;
                if (_json_.energy_key == null) {
                    throw new Error();
                }
                this.energyKey = _json_.energy_key;
                if (_json_.mood_key == null) {
                    throw new Error();
                }
                this.moodKey = _json_.mood_key;
                if (_json_.satiety_lower_threshold_key == null) {
                    throw new Error();
                }
                this.satietyLowerThresholdKey = _json_.satiety_lower_threshold_key;
                if (_json_.satiety_upper_threshold_key == null) {
                    throw new Error();
                }
                this.satietyUpperThresholdKey = _json_.satiety_upper_threshold_key;
                if (_json_.energy_lower_threshold_key == null) {
                    throw new Error();
                }
                this.energyLowerThresholdKey = _json_.energy_lower_threshold_key;
                if (_json_.energy_upper_threshold_key == null) {
                    throw new Error();
                }
                this.energyUpperThresholdKey = _json_.energy_upper_threshold_key;
                if (_json_.mood_lower_threshold_key == null) {
                    throw new Error();
                }
                this.moodLowerThresholdKey = _json_.mood_lower_threshold_key;
                if (_json_.mood_upper_threshold_key == null) {
                    throw new Error();
                }
                this.moodUpperThresholdKey = _json_.mood_upper_threshold_key;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.UpdateDailyBehaviorProps = UpdateDailyBehaviorProps;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class Decorator extends ai.Node {
            constructor(_json_) {
                super(_json_);
                if (_json_.flow_abort_mode == null) {
                    throw new Error();
                }
                this.flowAbortMode = _json_.flow_abort_mode;
            }
            static constructorFrom(_json_) {
                switch (_json_.__type__) {
                    case 'UeLoop': return new ai.UeLoop(_json_);
                    case 'UeCooldown': return new ai.UeCooldown(_json_);
                    case 'UeTimeLimit': return new ai.UeTimeLimit(_json_);
                    case 'UeBlackboard': return new ai.UeBlackboard(_json_);
                    case 'UeForceSuccess': return new ai.UeForceSuccess(_json_);
                    case 'IsAtLocation': return new ai.IsAtLocation(_json_);
                    case 'DistanceLessThan': return new ai.DistanceLessThan(_json_);
                    default: throw new Error();
                }
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.Decorator = Decorator;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class UeLoop extends ai.Decorator {
            constructor(_json_) {
                super(_json_);
                if (_json_.num_loops == null) {
                    throw new Error();
                }
                this.numLoops = _json_.num_loops;
                if (_json_.infinite_loop == null) {
                    throw new Error();
                }
                this.infiniteLoop = _json_.infinite_loop;
                if (_json_.infinite_loop_timeout_time == null) {
                    throw new Error();
                }
                this.infiniteLoopTimeoutTime = _json_.infinite_loop_timeout_time;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.UeLoop = UeLoop;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class UeCooldown extends ai.Decorator {
            constructor(_json_) {
                super(_json_);
                if (_json_.cooldown_time == null) {
                    throw new Error();
                }
                this.cooldownTime = _json_.cooldown_time;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.UeCooldown = UeCooldown;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class UeTimeLimit extends ai.Decorator {
            constructor(_json_) {
                super(_json_);
                if (_json_.limit_time == null) {
                    throw new Error();
                }
                this.limitTime = _json_.limit_time;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.UeTimeLimit = UeTimeLimit;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class UeBlackboard extends ai.Decorator {
            constructor(_json_) {
                super(_json_);
                if (_json_.notify_observer == null) {
                    throw new Error();
                }
                this.notifyObserver = _json_.notify_observer;
                if (_json_.blackboard_key == null) {
                    throw new Error();
                }
                this.blackboardKey = _json_.blackboard_key;
                if (_json_.key_query == null) {
                    throw new Error();
                }
                this.keyQuery = ai.KeyQueryOperator.constructorFrom(_json_.key_query);
            }
            resolve(_tables) {
                super.resolve(_tables);
                if (this.keyQuery != null) {
                    this.keyQuery.resolve(_tables);
                }
            }
        }
        ai.UeBlackboard = UeBlackboard;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class KeyQueryOperator {
            static constructorFrom(_json_) {
                switch (_json_.__type__) {
                    case 'IsSet': return new ai.IsSet(_json_);
                    case 'IsNotSet': return new ai.IsNotSet(_json_);
                    case 'BinaryOperator': return new ai.BinaryOperator(_json_);
                    default: throw new Error();
                }
            }
            constructor(_json_) {
            }
            resolve(_tables) {
            }
        }
        ai.KeyQueryOperator = KeyQueryOperator;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class IsSet extends ai.KeyQueryOperator {
            constructor(_json_) {
                super(_json_);
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.IsSet = IsSet;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class IsNotSet extends ai.KeyQueryOperator {
            constructor(_json_) {
                super(_json_);
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.IsNotSet = IsNotSet;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class BinaryOperator extends ai.KeyQueryOperator {
            constructor(_json_) {
                super(_json_);
                if (_json_.oper == null) {
                    throw new Error();
                }
                this.oper = _json_.oper;
                if (_json_.data == null) {
                    throw new Error();
                }
                this.data = ai.KeyData.constructorFrom(_json_.data);
            }
            resolve(_tables) {
                super.resolve(_tables);
                if (this.data != null) {
                    this.data.resolve(_tables);
                }
            }
        }
        ai.BinaryOperator = BinaryOperator;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class KeyData {
            static constructorFrom(_json_) {
                switch (_json_.__type__) {
                    case 'FloatKeyData': return new ai.FloatKeyData(_json_);
                    case 'IntKeyData': return new ai.IntKeyData(_json_);
                    case 'StringKeyData': return new ai.StringKeyData(_json_);
                    case 'BlackboardKeyData': return new ai.BlackboardKeyData(_json_);
                    default: throw new Error();
                }
            }
            constructor(_json_) {
            }
            resolve(_tables) {
            }
        }
        ai.KeyData = KeyData;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class FloatKeyData extends ai.KeyData {
            constructor(_json_) {
                super(_json_);
                if (_json_.value == null) {
                    throw new Error();
                }
                this.value = _json_.value;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.FloatKeyData = FloatKeyData;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class IntKeyData extends ai.KeyData {
            constructor(_json_) {
                super(_json_);
                if (_json_.value == null) {
                    throw new Error();
                }
                this.value = _json_.value;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.IntKeyData = IntKeyData;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class StringKeyData extends ai.KeyData {
            constructor(_json_) {
                super(_json_);
                if (_json_.value == null) {
                    throw new Error();
                }
                this.value = _json_.value;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.StringKeyData = StringKeyData;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class BlackboardKeyData extends ai.KeyData {
            constructor(_json_) {
                super(_json_);
                if (_json_.value == null) {
                    throw new Error();
                }
                this.value = _json_.value;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.BlackboardKeyData = BlackboardKeyData;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class UeForceSuccess extends ai.Decorator {
            constructor(_json_) {
                super(_json_);
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.UeForceSuccess = UeForceSuccess;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class IsAtLocation extends ai.Decorator {
            constructor(_json_) {
                super(_json_);
                if (_json_.acceptable_radius == null) {
                    throw new Error();
                }
                this.acceptableRadius = _json_.acceptable_radius;
                if (_json_.keyboard_key == null) {
                    throw new Error();
                }
                this.keyboardKey = _json_.keyboard_key;
                if (_json_.inverse_condition == null) {
                    throw new Error();
                }
                this.inverseCondition = _json_.inverse_condition;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.IsAtLocation = IsAtLocation;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class DistanceLessThan extends ai.Decorator {
            constructor(_json_) {
                super(_json_);
                if (_json_.actor1_key == null) {
                    throw new Error();
                }
                this.actor1Key = _json_.actor1_key;
                if (_json_.actor2_key == null) {
                    throw new Error();
                }
                this.actor2Key = _json_.actor2_key;
                if (_json_.distance == null) {
                    throw new Error();
                }
                this.distance = _json_.distance;
                if (_json_.reverse_result == null) {
                    throw new Error();
                }
                this.reverseResult = _json_.reverse_result;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.DistanceLessThan = DistanceLessThan;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class FlowNode extends ai.Node {
            constructor(_json_) {
                super(_json_);
                if (_json_.decorators == null) {
                    throw new Error();
                }
                {
                    this.decorators = [];
                    for (let _ele of _json_.decorators) {
                        let _e;
                        _e = ai.Decorator.constructorFrom(_ele);
                        this.decorators.push(_e);
                    }
                }
                if (_json_.services == null) {
                    throw new Error();
                }
                {
                    this.services = [];
                    for (let _ele of _json_.services) {
                        let _e;
                        _e = ai.Service.constructorFrom(_ele);
                        this.services.push(_e);
                    }
                }
            }
            static constructorFrom(_json_) {
                switch (_json_.__type__) {
                    case 'Sequence': return new ai.Sequence(_json_);
                    case 'Selector': return new ai.Selector(_json_);
                    case 'SimpleParallel': return new ai.SimpleParallel(_json_);
                    case 'UeWait': return new ai.UeWait(_json_);
                    case 'UeWaitBlackboardTime': return new ai.UeWaitBlackboardTime(_json_);
                    case 'MoveToTarget': return new ai.MoveToTarget(_json_);
                    case 'ChooseSkill': return new ai.ChooseSkill(_json_);
                    case 'MoveToRandomLocation': return new ai.MoveToRandomLocation(_json_);
                    case 'MoveToLocation': return new ai.MoveToLocation(_json_);
                    case 'DebugPrint': return new ai.DebugPrint(_json_);
                    default: throw new Error();
                }
            }
            resolve(_tables) {
                super.resolve(_tables);
                for (let _e of this.decorators) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
                for (let _e of this.services) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        ai.FlowNode = FlowNode;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class ComposeNode extends ai.FlowNode {
            static constructorFrom(_json_) {
                switch (_json_.__type__) {
                    case 'Sequence': return new ai.Sequence(_json_);
                    case 'Selector': return new ai.Selector(_json_);
                    case 'SimpleParallel': return new ai.SimpleParallel(_json_);
                    default: throw new Error();
                }
            }
            constructor(_json_) {
                super(_json_);
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.ComposeNode = ComposeNode;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class Sequence extends ai.ComposeNode {
            constructor(_json_) {
                super(_json_);
                if (_json_.children == null) {
                    throw new Error();
                }
                {
                    this.children = [];
                    for (let _ele of _json_.children) {
                        let _e;
                        _e = ai.FlowNode.constructorFrom(_ele);
                        this.children.push(_e);
                    }
                }
            }
            resolve(_tables) {
                super.resolve(_tables);
                for (let _e of this.children) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        ai.Sequence = Sequence;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class Selector extends ai.ComposeNode {
            constructor(_json_) {
                super(_json_);
                if (_json_.children == null) {
                    throw new Error();
                }
                {
                    this.children = [];
                    for (let _ele of _json_.children) {
                        let _e;
                        _e = ai.FlowNode.constructorFrom(_ele);
                        this.children.push(_e);
                    }
                }
            }
            resolve(_tables) {
                super.resolve(_tables);
                for (let _e of this.children) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        ai.Selector = Selector;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class SimpleParallel extends ai.ComposeNode {
            constructor(_json_) {
                super(_json_);
                if (_json_.finish_mode == null) {
                    throw new Error();
                }
                this.finishMode = _json_.finish_mode;
                if (_json_.main_task == null) {
                    throw new Error();
                }
                this.mainTask = ai.Task.constructorFrom(_json_.main_task);
                if (_json_.background_node == null) {
                    throw new Error();
                }
                this.backgroundNode = ai.FlowNode.constructorFrom(_json_.background_node);
            }
            resolve(_tables) {
                super.resolve(_tables);
                if (this.mainTask != null) {
                    this.mainTask.resolve(_tables);
                }
                if (this.backgroundNode != null) {
                    this.backgroundNode.resolve(_tables);
                }
            }
        }
        ai.SimpleParallel = SimpleParallel;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class Task extends ai.FlowNode {
            constructor(_json_) {
                super(_json_);
                if (_json_.ignore_restart_self == null) {
                    throw new Error();
                }
                this.ignoreRestartSelf = _json_.ignore_restart_self;
            }
            static constructorFrom(_json_) {
                switch (_json_.__type__) {
                    case 'UeWait': return new ai.UeWait(_json_);
                    case 'UeWaitBlackboardTime': return new ai.UeWaitBlackboardTime(_json_);
                    case 'MoveToTarget': return new ai.MoveToTarget(_json_);
                    case 'ChooseSkill': return new ai.ChooseSkill(_json_);
                    case 'MoveToRandomLocation': return new ai.MoveToRandomLocation(_json_);
                    case 'MoveToLocation': return new ai.MoveToLocation(_json_);
                    case 'DebugPrint': return new ai.DebugPrint(_json_);
                    default: throw new Error();
                }
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.Task = Task;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class UeWait extends ai.Task {
            constructor(_json_) {
                super(_json_);
                if (_json_.wait_time == null) {
                    throw new Error();
                }
                this.waitTime = _json_.wait_time;
                if (_json_.random_deviation == null) {
                    throw new Error();
                }
                this.randomDeviation = _json_.random_deviation;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.UeWait = UeWait;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class UeWaitBlackboardTime extends ai.Task {
            constructor(_json_) {
                super(_json_);
                if (_json_.blackboard_key == null) {
                    throw new Error();
                }
                this.blackboardKey = _json_.blackboard_key;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.UeWaitBlackboardTime = UeWaitBlackboardTime;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class MoveToTarget extends ai.Task {
            constructor(_json_) {
                super(_json_);
                if (_json_.target_actor_key == null) {
                    throw new Error();
                }
                this.targetActorKey = _json_.target_actor_key;
                if (_json_.acceptable_radius == null) {
                    throw new Error();
                }
                this.acceptableRadius = _json_.acceptable_radius;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.MoveToTarget = MoveToTarget;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class ChooseSkill extends ai.Task {
            constructor(_json_) {
                super(_json_);
                if (_json_.target_actor_key == null) {
                    throw new Error();
                }
                this.targetActorKey = _json_.target_actor_key;
                if (_json_.result_skill_id_key == null) {
                    throw new Error();
                }
                this.resultSkillIdKey = _json_.result_skill_id_key;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.ChooseSkill = ChooseSkill;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class MoveToRandomLocation extends ai.Task {
            constructor(_json_) {
                super(_json_);
                if (_json_.origin_position_key == null) {
                    throw new Error();
                }
                this.originPositionKey = _json_.origin_position_key;
                if (_json_.radius == null) {
                    throw new Error();
                }
                this.radius = _json_.radius;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.MoveToRandomLocation = MoveToRandomLocation;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class MoveToLocation extends ai.Task {
            constructor(_json_) {
                super(_json_);
                if (_json_.location == null) {
                    throw new Error();
                }
                this.location = Vector3.deserializeFromJson(_json_.location);
                if (_json_.acceptable_radius == null) {
                    throw new Error();
                }
                this.acceptableRadius = _json_.acceptable_radius;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.MoveToLocation = MoveToLocation;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class DebugPrint extends ai.Task {
            constructor(_json_) {
                super(_json_);
                if (_json_.text == null) {
                    throw new Error();
                }
                this.text = _json_.text;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.DebugPrint = DebugPrint;
    })(ai = cfg.ai || (cfg.ai = {}));
    let blueprint;
    (function (blueprint) {
        class TbClazz {
            constructor(_json_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (var _json2_ of _json_) {
                    let _v;
                    _v = blueprint.Clazz.constructorFrom(_json2_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.name, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        blueprint.TbClazz = TbClazz;
    })(blueprint = cfg.blueprint || (cfg.blueprint = {}));
    (function (blueprint) {
        class Clazz {
            constructor(_json_) {
                if (_json_.name == null) {
                    throw new Error();
                }
                this.name = _json_.name;
                if (_json_.desc == null) {
                    throw new Error();
                }
                this.desc = _json_.desc;
                if (_json_.parents == null) {
                    throw new Error();
                }
                {
                    this.parents = [];
                    for (let _ele of _json_.parents) {
                        let _e;
                        _e = blueprint.Clazz.constructorFrom(_ele);
                        this.parents.push(_e);
                    }
                }
                if (_json_.methods == null) {
                    throw new Error();
                }
                {
                    this.methods = [];
                    for (let _ele of _json_.methods) {
                        let _e;
                        _e = blueprint.Method.constructorFrom(_ele);
                        this.methods.push(_e);
                    }
                }
            }
            static constructorFrom(_json_) {
                switch (_json_.__type__) {
                    case 'Interface': return new blueprint.Interface(_json_);
                    case 'NormalClazz': return new blueprint.NormalClazz(_json_);
                    case 'EnumClazz': return new blueprint.EnumClazz(_json_);
                    default: throw new Error();
                }
            }
            resolve(_tables) {
                for (let _e of this.parents) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
                for (let _e of this.methods) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        blueprint.Clazz = Clazz;
    })(blueprint = cfg.blueprint || (cfg.blueprint = {}));
    (function (blueprint) {
        class Method {
            constructor(_json_) {
                if (_json_.name == null) {
                    throw new Error();
                }
                this.name = _json_.name;
                if (_json_.desc == null) {
                    throw new Error();
                }
                this.desc = _json_.desc;
                if (_json_.is_static == null) {
                    throw new Error();
                }
                this.isStatic = _json_.is_static;
                if (_json_.return_type == null) {
                    throw new Error();
                }
                this.returnType = _json_.return_type;
                if (_json_.parameters == null) {
                    throw new Error();
                }
                {
                    this.parameters = [];
                    for (let _ele of _json_.parameters) {
                        let _e;
                        _e = new blueprint.ParamInfo(_ele);
                        this.parameters.push(_e);
                    }
                }
            }
            static constructorFrom(_json_) {
                switch (_json_.__type__) {
                    case 'AbstraceMethod': return new blueprint.AbstraceMethod(_json_);
                    case 'ExternalMethod': return new blueprint.ExternalMethod(_json_);
                    case 'BlueprintMethod': return new blueprint.BlueprintMethod(_json_);
                    default: throw new Error();
                }
            }
            resolve(_tables) {
                for (let _e of this.parameters) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        blueprint.Method = Method;
    })(blueprint = cfg.blueprint || (cfg.blueprint = {}));
    (function (blueprint) {
        class ParamInfo {
            constructor(_json_) {
                if (_json_.name == null) {
                    throw new Error();
                }
                this.name = _json_.name;
                if (_json_.type == null) {
                    throw new Error();
                }
                this.type = _json_.type;
                if (_json_.is_ref == null) {
                    throw new Error();
                }
                this.isRef = _json_.is_ref;
            }
            resolve(_tables) {
            }
        }
        blueprint.ParamInfo = ParamInfo;
    })(blueprint = cfg.blueprint || (cfg.blueprint = {}));
    (function (blueprint) {
        class AbstraceMethod extends blueprint.Method {
            constructor(_json_) {
                super(_json_);
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        blueprint.AbstraceMethod = AbstraceMethod;
    })(blueprint = cfg.blueprint || (cfg.blueprint = {}));
    (function (blueprint) {
        class ExternalMethod extends blueprint.Method {
            constructor(_json_) {
                super(_json_);
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        blueprint.ExternalMethod = ExternalMethod;
    })(blueprint = cfg.blueprint || (cfg.blueprint = {}));
    (function (blueprint) {
        class BlueprintMethod extends blueprint.Method {
            constructor(_json_) {
                super(_json_);
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        blueprint.BlueprintMethod = BlueprintMethod;
    })(blueprint = cfg.blueprint || (cfg.blueprint = {}));
    (function (blueprint) {
        class Interface extends blueprint.Clazz {
            constructor(_json_) {
                super(_json_);
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        blueprint.Interface = Interface;
    })(blueprint = cfg.blueprint || (cfg.blueprint = {}));
    (function (blueprint) {
        class NormalClazz extends blueprint.Clazz {
            constructor(_json_) {
                super(_json_);
                if (_json_.is_abstract == null) {
                    throw new Error();
                }
                this.isAbstract = _json_.is_abstract;
                if (_json_.fields == null) {
                    throw new Error();
                }
                {
                    this.fields = [];
                    for (let _ele of _json_.fields) {
                        let _e;
                        _e = new blueprint.Field(_ele);
                        this.fields.push(_e);
                    }
                }
            }
            resolve(_tables) {
                super.resolve(_tables);
                for (let _e of this.fields) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        blueprint.NormalClazz = NormalClazz;
    })(blueprint = cfg.blueprint || (cfg.blueprint = {}));
    (function (blueprint) {
        class Field {
            constructor(_json_) {
                if (_json_.name == null) {
                    throw new Error();
                }
                this.name = _json_.name;
                if (_json_.type == null) {
                    throw new Error();
                }
                this.type = _json_.type;
                if (_json_.desc == null) {
                    throw new Error();
                }
                this.desc = _json_.desc;
            }
            resolve(_tables) {
            }
        }
        blueprint.Field = Field;
    })(blueprint = cfg.blueprint || (cfg.blueprint = {}));
    (function (blueprint) {
        class EnumClazz extends blueprint.Clazz {
            constructor(_json_) {
                super(_json_);
                if (_json_.enums == null) {
                    throw new Error();
                }
                {
                    this.enums = [];
                    for (let _ele of _json_.enums) {
                        let _e;
                        _e = new blueprint.EnumField(_ele);
                        this.enums.push(_e);
                    }
                }
            }
            resolve(_tables) {
                super.resolve(_tables);
                for (let _e of this.enums) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        blueprint.EnumClazz = EnumClazz;
    })(blueprint = cfg.blueprint || (cfg.blueprint = {}));
    (function (blueprint) {
        class EnumField {
            constructor(_json_) {
                if (_json_.name == null) {
                    throw new Error();
                }
                this.name = _json_.name;
                if (_json_.value == null) {
                    throw new Error();
                }
                this.value = _json_.value;
            }
            resolve(_tables) {
            }
        }
        blueprint.EnumField = EnumField;
    })(blueprint = cfg.blueprint || (cfg.blueprint = {}));
    let bonus;
    (function (bonus) {
        class TbDrop {
            constructor(_json_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (var _json2_ of _json_) {
                    let _v;
                    _v = new bonus.DropInfo(_json2_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        bonus.TbDrop = TbDrop;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class DropInfo {
            constructor(_json_) {
                if (_json_.id == null) {
                    throw new Error();
                }
                this.id = _json_.id;
                if (_json_.desc == null) {
                    throw new Error();
                }
                this.desc = _json_.desc;
                if (_json_.client_show_items == null) {
                    throw new Error();
                }
                {
                    this.clientShowItems = [];
                    for (let _ele of _json_.client_show_items) {
                        let _e;
                        _e = new bonus.ShowItemInfo(_ele);
                        this.clientShowItems.push(_e);
                    }
                }
                if (_json_.bonus == null) {
                    throw new Error();
                }
                this.bonus = bonus.Bonus.constructorFrom(_json_.bonus);
            }
            resolve(_tables) {
                for (let _e of this.clientShowItems) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
                if (this.bonus != null) {
                    this.bonus.resolve(_tables);
                }
            }
        }
        bonus.DropInfo = DropInfo;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class ShowItemInfo {
            constructor(_json_) {
                if (_json_.item_id == null) {
                    throw new Error();
                }
                this.itemId = _json_.item_id;
                if (_json_.item_num == null) {
                    throw new Error();
                }
                this.itemNum = _json_.item_num;
            }
            resolve(_tables) {
                this.itemId_Ref = _tables.get('item.TbItem').get(this.itemId);
            }
        }
        bonus.ShowItemInfo = ShowItemInfo;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class Bonus {
            static constructorFrom(_json_) {
                switch (_json_.__type__) {
                    case 'OneItem': return new bonus.OneItem(_json_);
                    case 'OneItems': return new bonus.OneItems(_json_);
                    case 'Item': return new bonus.Item(_json_);
                    case 'Items': return new bonus.Items(_json_);
                    case 'CoefficientItem': return new bonus.CoefficientItem(_json_);
                    case 'WeightItems': return new bonus.WeightItems(_json_);
                    case 'ProbabilityItems': return new bonus.ProbabilityItems(_json_);
                    case 'MultiBonus': return new bonus.MultiBonus(_json_);
                    case 'ProbabilityBonus': return new bonus.ProbabilityBonus(_json_);
                    case 'WeightBonus': return new bonus.WeightBonus(_json_);
                    case 'DropBonus': return new bonus.DropBonus(_json_);
                    default: throw new Error();
                }
            }
            constructor(_json_) {
            }
            resolve(_tables) {
            }
        }
        bonus.Bonus = Bonus;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class OneItem extends bonus.Bonus {
            constructor(_json_) {
                super(_json_);
                if (_json_.item_id == null) {
                    throw new Error();
                }
                this.itemId = _json_.item_id;
            }
            resolve(_tables) {
                super.resolve(_tables);
                this.itemId_Ref = _tables.get('item.TbItem').get(this.itemId);
            }
        }
        bonus.OneItem = OneItem;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class OneItems extends bonus.Bonus {
            constructor(_json_) {
                super(_json_);
                if (_json_.items == null) {
                    throw new Error();
                }
                this.items = _json_.items;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        bonus.OneItems = OneItems;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class Item extends bonus.Bonus {
            constructor(_json_) {
                super(_json_);
                if (_json_.item_id == null) {
                    throw new Error();
                }
                this.itemId = _json_.item_id;
                if (_json_.amount == null) {
                    throw new Error();
                }
                this.amount = _json_.amount;
            }
            resolve(_tables) {
                super.resolve(_tables);
                this.itemId_Ref = _tables.get('item.TbItem').get(this.itemId);
            }
        }
        bonus.Item = Item;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class Items extends bonus.Bonus {
            constructor(_json_) {
                super(_json_);
                if (_json_.item_list == null) {
                    throw new Error();
                }
                {
                    this.itemList = [];
                    for (let _ele of _json_.item_list) {
                        let _e;
                        _e = new bonus.Item(_ele);
                        this.itemList.push(_e);
                    }
                }
            }
            resolve(_tables) {
                super.resolve(_tables);
                for (let _e of this.itemList) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        bonus.Items = Items;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class CoefficientItem extends bonus.Bonus {
            constructor(_json_) {
                super(_json_);
                if (_json_.bonus_id == null) {
                    throw new Error();
                }
                this.bonusId = _json_.bonus_id;
                if (_json_.bonus_list == null) {
                    throw new Error();
                }
                this.bonusList = new bonus.Items(_json_.bonus_list);
            }
            resolve(_tables) {
                super.resolve(_tables);
                if (this.bonusList != null) {
                    this.bonusList.resolve(_tables);
                }
            }
        }
        bonus.CoefficientItem = CoefficientItem;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class WeightItems extends bonus.Bonus {
            constructor(_json_) {
                super(_json_);
                if (_json_.item_list == null) {
                    throw new Error();
                }
                {
                    this.itemList = [];
                    for (let _ele of _json_.item_list) {
                        let _e;
                        _e = new bonus.WeightItemInfo(_ele);
                        this.itemList.push(_e);
                    }
                }
            }
            resolve(_tables) {
                super.resolve(_tables);
                for (let _e of this.itemList) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        bonus.WeightItems = WeightItems;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class WeightItemInfo {
            constructor(_json_) {
                if (_json_.item_id == null) {
                    throw new Error();
                }
                this.itemId = _json_.item_id;
                if (_json_.num == null) {
                    throw new Error();
                }
                this.num = _json_.num;
                if (_json_.weight == null) {
                    throw new Error();
                }
                this.weight = _json_.weight;
            }
            resolve(_tables) {
                this.itemId_Ref = _tables.get('item.TbItem').get(this.itemId);
            }
        }
        bonus.WeightItemInfo = WeightItemInfo;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class ProbabilityItems extends bonus.Bonus {
            constructor(_json_) {
                super(_json_);
                if (_json_.item_list == null) {
                    throw new Error();
                }
                {
                    this.itemList = [];
                    for (let _ele of _json_.item_list) {
                        let _e;
                        _e = new bonus.ProbabilityItemInfo(_ele);
                        this.itemList.push(_e);
                    }
                }
            }
            resolve(_tables) {
                super.resolve(_tables);
                for (let _e of this.itemList) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        bonus.ProbabilityItems = ProbabilityItems;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class ProbabilityItemInfo {
            constructor(_json_) {
                if (_json_.item_id == null) {
                    throw new Error();
                }
                this.itemId = _json_.item_id;
                if (_json_.num == null) {
                    throw new Error();
                }
                this.num = _json_.num;
                if (_json_.probability == null) {
                    throw new Error();
                }
                this.probability = _json_.probability;
            }
            resolve(_tables) {
                this.itemId_Ref = _tables.get('item.TbItem').get(this.itemId);
            }
        }
        bonus.ProbabilityItemInfo = ProbabilityItemInfo;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class MultiBonus extends bonus.Bonus {
            constructor(_json_) {
                super(_json_);
                if (_json_.bonuses == null) {
                    throw new Error();
                }
                {
                    this.bonuses = [];
                    for (let _ele of _json_.bonuses) {
                        let _e;
                        _e = bonus.Bonus.constructorFrom(_ele);
                        this.bonuses.push(_e);
                    }
                }
            }
            resolve(_tables) {
                super.resolve(_tables);
                for (let _e of this.bonuses) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        bonus.MultiBonus = MultiBonus;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class ProbabilityBonus extends bonus.Bonus {
            constructor(_json_) {
                super(_json_);
                if (_json_.bonuses == null) {
                    throw new Error();
                }
                {
                    this.bonuses = [];
                    for (let _ele of _json_.bonuses) {
                        let _e;
                        _e = new bonus.ProbabilityBonusInfo(_ele);
                        this.bonuses.push(_e);
                    }
                }
            }
            resolve(_tables) {
                super.resolve(_tables);
                for (let _e of this.bonuses) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        bonus.ProbabilityBonus = ProbabilityBonus;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class ProbabilityBonusInfo {
            constructor(_json_) {
                if (_json_.bonus == null) {
                    throw new Error();
                }
                this.bonus = bonus.Bonus.constructorFrom(_json_.bonus);
                if (_json_.probability == null) {
                    throw new Error();
                }
                this.probability = _json_.probability;
            }
            resolve(_tables) {
                if (this.bonus != null) {
                    this.bonus.resolve(_tables);
                }
            }
        }
        bonus.ProbabilityBonusInfo = ProbabilityBonusInfo;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class WeightBonus extends bonus.Bonus {
            constructor(_json_) {
                super(_json_);
                if (_json_.bonuses == null) {
                    throw new Error();
                }
                {
                    this.bonuses = [];
                    for (let _ele of _json_.bonuses) {
                        let _e;
                        _e = new bonus.WeightBonusInfo(_ele);
                        this.bonuses.push(_e);
                    }
                }
            }
            resolve(_tables) {
                super.resolve(_tables);
                for (let _e of this.bonuses) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        bonus.WeightBonus = WeightBonus;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class WeightBonusInfo {
            constructor(_json_) {
                if (_json_.bonus == null) {
                    throw new Error();
                }
                this.bonus = bonus.Bonus.constructorFrom(_json_.bonus);
                if (_json_.weight == null) {
                    throw new Error();
                }
                this.weight = _json_.weight;
            }
            resolve(_tables) {
                if (this.bonus != null) {
                    this.bonus.resolve(_tables);
                }
            }
        }
        bonus.WeightBonusInfo = WeightBonusInfo;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class DropBonus extends bonus.Bonus {
            constructor(_json_) {
                super(_json_);
                if (_json_.id == null) {
                    throw new Error();
                }
                this.id = _json_.id;
            }
            resolve(_tables) {
                super.resolve(_tables);
                this.id_Ref = _tables.get('bonus.TbDrop').get(this.id);
            }
        }
        bonus.DropBonus = DropBonus;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (common) {
        class TbGlobalConfig {
            constructor(_json_) {
                if (_json_.length != 1)
                    throw new Error('table mode=one, but size != 1');
                this._data = new common.GlobalConfig(_json_[0]);
            }
            getData() { return this._data; }
            get bagCapacity() { return this._data.bagCapacity; }
            get bagCapacitySpecial() { return this._data.bagCapacitySpecial; }
            get bagTempExpendableCapacity() { return this._data.bagTempExpendableCapacity; }
            get bagTempToolCapacity() { return this._data.bagTempToolCapacity; }
            get bagInitCapacity() { return this._data.bagInitCapacity; }
            get quickBagCapacity() { return this._data.quickBagCapacity; }
            get clothBagCapacity() { return this._data.clothBagCapacity; }
            get clothBagInitCapacity() { return this._data.clothBagInitCapacity; }
            get clothBagCapacitySpecial() { return this._data.clothBagCapacitySpecial; }
            get bagInitItemsDropId() { return this._data.bagInitItemsDropId; }
            get mailBoxCapacity() { return this._data.mailBoxCapacity; }
            get damageParamC() { return this._data.damageParamC; }
            get damageParamE() { return this._data.damageParamE; }
            get damageParamF() { return this._data.damageParamF; }
            get damageParamD() { return this._data.damageParamD; }
            get roleSpeed() { return this._data.roleSpeed; }
            get monsterSpeed() { return this._data.monsterSpeed; }
            get initEnergy() { return this._data.initEnergy; }
            get initViality() { return this._data.initViality; }
            get maxViality() { return this._data.maxViality; }
            get perVialityRecoveryTime() { return this._data.perVialityRecoveryTime; }
            resolve(_tables) {
                this._data.resolve(_tables);
            }
        }
        common.TbGlobalConfig = TbGlobalConfig;
    })(common = cfg.common || (cfg.common = {}));
    (function (common) {
        class GlobalConfig {
            constructor(_json_) {
                if (_json_.bag_capacity == null) {
                    throw new Error();
                }
                this.bagCapacity = _json_.bag_capacity;
                if (_json_.bag_capacity_special == null) {
                    throw new Error();
                }
                this.bagCapacitySpecial = _json_.bag_capacity_special;
                if (_json_.bag_temp_expendable_capacity == null) {
                    throw new Error();
                }
                this.bagTempExpendableCapacity = _json_.bag_temp_expendable_capacity;
                if (_json_.bag_temp_tool_capacity == null) {
                    throw new Error();
                }
                this.bagTempToolCapacity = _json_.bag_temp_tool_capacity;
                if (_json_.bag_init_capacity == null) {
                    throw new Error();
                }
                this.bagInitCapacity = _json_.bag_init_capacity;
                if (_json_.quick_bag_capacity == null) {
                    throw new Error();
                }
                this.quickBagCapacity = _json_.quick_bag_capacity;
                if (_json_.cloth_bag_capacity == null) {
                    throw new Error();
                }
                this.clothBagCapacity = _json_.cloth_bag_capacity;
                if (_json_.cloth_bag_init_capacity == null) {
                    throw new Error();
                }
                this.clothBagInitCapacity = _json_.cloth_bag_init_capacity;
                if (_json_.cloth_bag_capacity_special == null) {
                    throw new Error();
                }
                this.clothBagCapacitySpecial = _json_.cloth_bag_capacity_special;
                if (_json_.bag_init_items_drop_id != null) {
                    this.bagInitItemsDropId = _json_.bag_init_items_drop_id;
                }
                else {
                    this.bagInitItemsDropId = null;
                }
                if (_json_.mail_box_capacity == null) {
                    throw new Error();
                }
                this.mailBoxCapacity = _json_.mail_box_capacity;
                if (_json_.damage_param_c == null) {
                    throw new Error();
                }
                this.damageParamC = _json_.damage_param_c;
                if (_json_.damage_param_e == null) {
                    throw new Error();
                }
                this.damageParamE = _json_.damage_param_e;
                if (_json_.damage_param_f == null) {
                    throw new Error();
                }
                this.damageParamF = _json_.damage_param_f;
                if (_json_.damage_param_d == null) {
                    throw new Error();
                }
                this.damageParamD = _json_.damage_param_d;
                if (_json_.role_speed == null) {
                    throw new Error();
                }
                this.roleSpeed = _json_.role_speed;
                if (_json_.monster_speed == null) {
                    throw new Error();
                }
                this.monsterSpeed = _json_.monster_speed;
                if (_json_.init_energy == null) {
                    throw new Error();
                }
                this.initEnergy = _json_.init_energy;
                if (_json_.init_viality == null) {
                    throw new Error();
                }
                this.initViality = _json_.init_viality;
                if (_json_.max_viality == null) {
                    throw new Error();
                }
                this.maxViality = _json_.max_viality;
                if (_json_.per_viality_recovery_time == null) {
                    throw new Error();
                }
                this.perVialityRecoveryTime = _json_.per_viality_recovery_time;
            }
            resolve(_tables) {
                this.bagInitItemsDropId_Ref = this.bagInitItemsDropId != null ? _tables.get('bonus.TbDrop').get(this.bagInitItemsDropId) : null;
            }
        }
        common.GlobalConfig = GlobalConfig;
    })(common = cfg.common || (cfg.common = {}));
    (function (common) {
        class TbDummy {
            constructor(_json_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (var _json2_ of _json_) {
                    let _v;
                    _v = new common.Dummy(_json2_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        common.TbDummy = TbDummy;
    })(common = cfg.common || (cfg.common = {}));
    (function (common) {
        class Dummy {
            constructor(_json_) {
                if (_json_.id == null) {
                    throw new Error();
                }
                this.id = _json_.id;
                if (_json_.limit == null) {
                    throw new Error();
                }
                this.limit = limit.LimitBase.constructorFrom(_json_.limit);
            }
            resolve(_tables) {
                if (this.limit != null) {
                    this.limit.resolve(_tables);
                }
            }
        }
        common.Dummy = Dummy;
    })(common = cfg.common || (cfg.common = {}));
    (function (limit) {
        class LimitBase {
            static constructorFrom(_json_) {
                switch (_json_.__type__) {
                    case 'DailyLimit': return new limit.DailyLimit(_json_);
                    case 'MultiDayLimit': return new limit.MultiDayLimit(_json_);
                    case 'WeeklyLimit': return new limit.WeeklyLimit(_json_);
                    case 'MonthlyLimit': return new limit.MonthlyLimit(_json_);
                    case 'CoolDown': return new limit.CoolDown(_json_);
                    case 'GroupCoolDown': return new limit.GroupCoolDown(_json_);
                    default: throw new Error();
                }
            }
            constructor(_json_) {
            }
            resolve(_tables) {
            }
        }
        limit.LimitBase = LimitBase;
    })(limit = cfg.limit || (cfg.limit = {}));
    (function (limit) {
        class DailyLimitBase extends limit.LimitBase {
            static constructorFrom(_json_) {
                switch (_json_.__type__) {
                    case 'DailyLimit': return new limit.DailyLimit(_json_);
                    default: throw new Error();
                }
            }
            constructor(_json_) {
                super(_json_);
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        limit.DailyLimitBase = DailyLimitBase;
    })(limit = cfg.limit || (cfg.limit = {}));
    (function (limit) {
        class DailyLimit extends limit.DailyLimitBase {
            constructor(_json_) {
                super(_json_);
                if (_json_.num == null) {
                    throw new Error();
                }
                this.num = _json_.num;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        limit.DailyLimit = DailyLimit;
    })(limit = cfg.limit || (cfg.limit = {}));
    (function (limit) {
        class MultiDayLimit extends limit.LimitBase {
            constructor(_json_) {
                super(_json_);
                if (_json_.day == null) {
                    throw new Error();
                }
                this.day = _json_.day;
                if (_json_.num == null) {
                    throw new Error();
                }
                this.num = _json_.num;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        limit.MultiDayLimit = MultiDayLimit;
    })(limit = cfg.limit || (cfg.limit = {}));
    (function (limit) {
        class WeeklyLimit extends limit.LimitBase {
            constructor(_json_) {
                super(_json_);
                if (_json_.num == null) {
                    throw new Error();
                }
                this.num = _json_.num;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        limit.WeeklyLimit = WeeklyLimit;
    })(limit = cfg.limit || (cfg.limit = {}));
    (function (limit) {
        class MonthlyLimit extends limit.LimitBase {
            constructor(_json_) {
                super(_json_);
                if (_json_.num == null) {
                    throw new Error();
                }
                this.num = _json_.num;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        limit.MonthlyLimit = MonthlyLimit;
    })(limit = cfg.limit || (cfg.limit = {}));
    (function (limit) {
        class CoolDown extends limit.LimitBase {
            constructor(_json_) {
                super(_json_);
                if (_json_.duration == null) {
                    throw new Error();
                }
                this.duration = _json_.duration;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        limit.CoolDown = CoolDown;
    })(limit = cfg.limit || (cfg.limit = {}));
    (function (limit) {
        class GroupCoolDown extends limit.LimitBase {
            constructor(_json_) {
                super(_json_);
                if (_json_.group_id == null) {
                    throw new Error();
                }
                this.groupId = _json_.group_id;
                if (_json_.duration == null) {
                    throw new Error();
                }
                this.duration = _json_.duration;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        limit.GroupCoolDown = GroupCoolDown;
    })(limit = cfg.limit || (cfg.limit = {}));
    (function (error) {
        class TbErrorInfo {
            constructor(_json_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (var _json2_ of _json_) {
                    let _v;
                    _v = new error.ErrorInfo(_json2_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.code, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        error.TbErrorInfo = TbErrorInfo;
    })(error = cfg.error || (cfg.error = {}));
    (function (error) {
        class ErrorInfo {
            constructor(_json_) {
                if (_json_.code == null) {
                    throw new Error();
                }
                this.code = _json_.code;
                if (_json_.desc == null) {
                    throw new Error();
                }
                this.desc = _json_.desc;
                if (_json_.style == null) {
                    throw new Error();
                }
                this.style = error.ErrorStyle.constructorFrom(_json_.style);
            }
            resolve(_tables) {
                if (this.style != null) {
                    this.style.resolve(_tables);
                }
            }
        }
        error.ErrorInfo = ErrorInfo;
    })(error = cfg.error || (cfg.error = {}));
    (function (error) {
        class ErrorStyle {
            static constructorFrom(_json_) {
                switch (_json_.__type__) {
                    case 'ErrorStyleTip': return new error.ErrorStyleTip(_json_);
                    case 'ErrorStyleMsgbox': return new error.ErrorStyleMsgbox(_json_);
                    case 'ErrorStyleDlgOk': return new error.ErrorStyleDlgOk(_json_);
                    case 'ErrorStyleDlgOkCancel': return new error.ErrorStyleDlgOkCancel(_json_);
                    default: throw new Error();
                }
            }
            constructor(_json_) {
            }
            resolve(_tables) {
            }
        }
        error.ErrorStyle = ErrorStyle;
    })(error = cfg.error || (cfg.error = {}));
    (function (error) {
        class ErrorStyleTip extends error.ErrorStyle {
            constructor(_json_) {
                super(_json_);
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        error.ErrorStyleTip = ErrorStyleTip;
    })(error = cfg.error || (cfg.error = {}));
    (function (error) {
        class ErrorStyleMsgbox extends error.ErrorStyle {
            constructor(_json_) {
                super(_json_);
                if (_json_.btn_name == null) {
                    throw new Error();
                }
                this.btnName = _json_.btn_name;
                if (_json_.operation == null) {
                    throw new Error();
                }
                this.operation = _json_.operation;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        error.ErrorStyleMsgbox = ErrorStyleMsgbox;
    })(error = cfg.error || (cfg.error = {}));
    (function (error) {
        class ErrorStyleDlgOk extends error.ErrorStyle {
            constructor(_json_) {
                super(_json_);
                if (_json_.btn_name == null) {
                    throw new Error();
                }
                this.btnName = _json_.btn_name;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        error.ErrorStyleDlgOk = ErrorStyleDlgOk;
    })(error = cfg.error || (cfg.error = {}));
    (function (error) {
        class ErrorStyleDlgOkCancel extends error.ErrorStyle {
            constructor(_json_) {
                super(_json_);
                if (_json_.btn1_name == null) {
                    throw new Error();
                }
                this.btn1Name = _json_.btn1_name;
                if (_json_.btn2_name == null) {
                    throw new Error();
                }
                this.btn2Name = _json_.btn2_name;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        error.ErrorStyleDlgOkCancel = ErrorStyleDlgOkCancel;
    })(error = cfg.error || (cfg.error = {}));
    (function (error) {
        class TbCodeInfo {
            constructor(_json_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (var _json2_ of _json_) {
                    let _v;
                    _v = new error.CodeInfo(_json2_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.code, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        error.TbCodeInfo = TbCodeInfo;
    })(error = cfg.error || (cfg.error = {}));
    (function (error) {
        class CodeInfo {
            constructor(_json_) {
                if (_json_.code == null) {
                    throw new Error();
                }
                this.code = _json_.code;
                if (_json_.key == null) {
                    throw new Error();
                }
                this.key = _json_.key;
            }
            resolve(_tables) {
            }
        }
        error.CodeInfo = CodeInfo;
    })(error = cfg.error || (cfg.error = {}));
    (function (item) {
        class TbItem {
            constructor(_json_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (var _json2_ of _json_) {
                    let _v;
                    _v = new item.Item(_json2_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        item.TbItem = TbItem;
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        class Item {
            constructor(_json_) {
                if (_json_.id == null) {
                    throw new Error();
                }
                this.id = _json_.id;
                if (_json_.name == null) {
                    throw new Error();
                }
                this.name = _json_.name;
                if (_json_.major_type == null) {
                    throw new Error();
                }
                this.majorType = _json_.major_type;
                if (_json_.minor_type == null) {
                    throw new Error();
                }
                this.minorType = _json_.minor_type;
                if (_json_.quality == null) {
                    throw new Error();
                }
                this.quality = _json_.quality;
                if (_json_.icon == null) {
                    throw new Error();
                }
                this.icon = _json_.icon;
                if (_json_.icon_backgroud == null) {
                    throw new Error();
                }
                this.iconBackgroud = _json_.icon_backgroud;
                if (_json_.icon_mask == null) {
                    throw new Error();
                }
                this.iconMask = _json_.icon_mask;
                if (_json_.desc == null) {
                    throw new Error();
                }
                this.desc = _json_.desc;
                if (_json_.show_order == null) {
                    throw new Error();
                }
                this.showOrder = _json_.show_order;
                if (_json_.quantifier == null) {
                    throw new Error();
                }
                this.quantifier = _json_.quantifier;
                if (_json_.show_in_bag == null) {
                    throw new Error();
                }
                this.showInBag = _json_.show_in_bag;
                if (_json_.min_show_level == null) {
                    throw new Error();
                }
                this.minShowLevel = _json_.min_show_level;
                if (_json_.batch_usable == null) {
                    throw new Error();
                }
                this.batchUsable = _json_.batch_usable;
                if (_json_.progress_time_when_use == null) {
                    throw new Error();
                }
                this.progressTimeWhenUse = _json_.progress_time_when_use;
                if (_json_.show_hint_when_use == null) {
                    throw new Error();
                }
                this.showHintWhenUse = _json_.show_hint_when_use;
                if (_json_.droppable == null) {
                    throw new Error();
                }
                this.droppable = _json_.droppable;
                if (_json_.price != null) {
                    this.price = _json_.price;
                }
                else {
                    this.price = null;
                }
                if (_json_.use_type == null) {
                    throw new Error();
                }
                this.useType = _json_.use_type;
                if (_json_.level_up_id != null) {
                    this.levelUpId = _json_.level_up_id;
                }
                else {
                    this.levelUpId = null;
                }
            }
            resolve(_tables) {
            }
        }
        item.Item = Item;
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        class TbItemFunc {
            constructor(_json_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (var _json2_ of _json_) {
                    let _v;
                    _v = new item.ItemFunction(_json2_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.minorType, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        item.TbItemFunc = TbItemFunc;
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        class ItemFunction {
            constructor(_json_) {
                if (_json_.minor_type == null) {
                    throw new Error();
                }
                this.minorType = _json_.minor_type;
                if (_json_.func_type == null) {
                    throw new Error();
                }
                this.funcType = _json_.func_type;
                if (_json_.method == null) {
                    throw new Error();
                }
                this.method = _json_.method;
                if (_json_.close_bag_ui == null) {
                    throw new Error();
                }
                this.closeBagUi = _json_.close_bag_ui;
            }
            resolve(_tables) {
            }
        }
        item.ItemFunction = ItemFunction;
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        class TbItemExtra {
            constructor(_json_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (var _json2_ of _json_) {
                    let _v;
                    _v = item.ItemExtra.constructorFrom(_json2_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        item.TbItemExtra = TbItemExtra;
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        class ItemExtra {
            constructor(_json_) {
                if (_json_.id == null) {
                    throw new Error();
                }
                this.id = _json_.id;
            }
            static constructorFrom(_json_) {
                switch (_json_.__type__) {
                    case 'TreasureBox': return new item.TreasureBox(_json_);
                    case 'InteractionItem': return new item.InteractionItem(_json_);
                    case 'Clothes': return new item.Clothes(_json_);
                    case 'DesignDrawing': return new item.DesignDrawing(_json_);
                    case 'Dymmy': return new item.Dymmy(_json_);
                    default: throw new Error();
                }
            }
            resolve(_tables) {
            }
        }
        item.ItemExtra = ItemExtra;
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        class TreasureBox extends item.ItemExtra {
            constructor(_json_) {
                super(_json_);
                if (_json_.key_item_id != null) {
                    this.keyItemId = _json_.key_item_id;
                }
                else {
                    this.keyItemId = null;
                }
                if (_json_.open_level == null) {
                    throw new Error();
                }
                this.openLevel = new condition.MinLevel(_json_.open_level);
                if (_json_.use_on_obtain == null) {
                    throw new Error();
                }
                this.useOnObtain = _json_.use_on_obtain;
                if (_json_.drop_ids == null) {
                    throw new Error();
                }
                this.dropIds = _json_.drop_ids;
                if (_json_.choose_list == null) {
                    throw new Error();
                }
                {
                    this.chooseList = [];
                    for (let _ele of _json_.choose_list) {
                        let _e;
                        _e = new item.ChooseOneBonus(_ele);
                        this.chooseList.push(_e);
                    }
                }
            }
            resolve(_tables) {
                super.resolve(_tables);
                if (this.openLevel != null) {
                    this.openLevel.resolve(_tables);
                }
                for (let _e of this.chooseList) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        item.TreasureBox = TreasureBox;
    })(item = cfg.item || (cfg.item = {}));
    let condition;
    (function (condition) {
        class Condition {
            static constructorFrom(_json_) {
                switch (_json_.__type__) {
                    case 'TimeRange': return new condition.TimeRange(_json_);
                    case 'MultiRoleCondition': return new condition.MultiRoleCondition(_json_);
                    case 'GenderLimit': return new condition.GenderLimit(_json_);
                    case 'MinLevel': return new condition.MinLevel(_json_);
                    case 'MaxLevel': return new condition.MaxLevel(_json_);
                    case 'MinMaxLevel': return new condition.MinMaxLevel(_json_);
                    case 'ClothesPropertyScoreGreaterThan': return new condition.ClothesPropertyScoreGreaterThan(_json_);
                    case 'ContainsItem': return new condition.ContainsItem(_json_);
                    default: throw new Error();
                }
            }
            constructor(_json_) {
            }
            resolve(_tables) {
            }
        }
        condition.Condition = Condition;
    })(condition = cfg.condition || (cfg.condition = {}));
    (function (condition) {
        class TimeRange extends condition.Condition {
            constructor(_json_) {
                super(_json_);
                if (_json_.date_time_range == null) {
                    throw new Error();
                }
                this.dateTimeRange = new common.DateTimeRange(_json_.date_time_range);
            }
            resolve(_tables) {
                super.resolve(_tables);
                if (this.dateTimeRange != null) {
                    this.dateTimeRange.resolve(_tables);
                }
            }
        }
        condition.TimeRange = TimeRange;
    })(condition = cfg.condition || (cfg.condition = {}));
    (function (common) {
        class DateTimeRange {
            constructor(_json_) {
                if (_json_.start_time != null) {
                    this.startTime = _json_.start_time;
                }
                else {
                    this.startTime = null;
                }
                if (_json_.end_time != null) {
                    this.endTime = _json_.end_time;
                }
                else {
                    this.endTime = null;
                }
            }
            resolve(_tables) {
            }
        }
        common.DateTimeRange = DateTimeRange;
    })(common = cfg.common || (cfg.common = {}));
    (function (condition) {
        class RoleCondition extends condition.Condition {
            static constructorFrom(_json_) {
                switch (_json_.__type__) {
                    case 'MultiRoleCondition': return new condition.MultiRoleCondition(_json_);
                    case 'GenderLimit': return new condition.GenderLimit(_json_);
                    case 'MinLevel': return new condition.MinLevel(_json_);
                    case 'MaxLevel': return new condition.MaxLevel(_json_);
                    case 'MinMaxLevel': return new condition.MinMaxLevel(_json_);
                    case 'ClothesPropertyScoreGreaterThan': return new condition.ClothesPropertyScoreGreaterThan(_json_);
                    case 'ContainsItem': return new condition.ContainsItem(_json_);
                    default: throw new Error();
                }
            }
            constructor(_json_) {
                super(_json_);
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        condition.RoleCondition = RoleCondition;
    })(condition = cfg.condition || (cfg.condition = {}));
    (function (condition) {
        class MultiRoleCondition extends condition.RoleCondition {
            constructor(_json_) {
                super(_json_);
                if (_json_.conditions == null) {
                    throw new Error();
                }
                {
                    this.conditions = [];
                    for (let _ele of _json_.conditions) {
                        let _e;
                        _e = condition.RoleCondition.constructorFrom(_ele);
                        this.conditions.push(_e);
                    }
                }
            }
            resolve(_tables) {
                super.resolve(_tables);
                for (let _e of this.conditions) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        condition.MultiRoleCondition = MultiRoleCondition;
    })(condition = cfg.condition || (cfg.condition = {}));
    (function (condition) {
        class BoolRoleCondition extends condition.RoleCondition {
            static constructorFrom(_json_) {
                switch (_json_.__type__) {
                    case 'GenderLimit': return new condition.GenderLimit(_json_);
                    case 'MinLevel': return new condition.MinLevel(_json_);
                    case 'MaxLevel': return new condition.MaxLevel(_json_);
                    case 'MinMaxLevel': return new condition.MinMaxLevel(_json_);
                    case 'ClothesPropertyScoreGreaterThan': return new condition.ClothesPropertyScoreGreaterThan(_json_);
                    default: throw new Error();
                }
            }
            constructor(_json_) {
                super(_json_);
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        condition.BoolRoleCondition = BoolRoleCondition;
    })(condition = cfg.condition || (cfg.condition = {}));
    (function (condition) {
        class GenderLimit extends condition.BoolRoleCondition {
            constructor(_json_) {
                super(_json_);
                if (_json_.gender == null) {
                    throw new Error();
                }
                this.gender = _json_.gender;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        condition.GenderLimit = GenderLimit;
    })(condition = cfg.condition || (cfg.condition = {}));
    (function (condition) {
        class MinLevel extends condition.BoolRoleCondition {
            constructor(_json_) {
                super(_json_);
                if (_json_.level == null) {
                    throw new Error();
                }
                this.level = _json_.level;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        condition.MinLevel = MinLevel;
    })(condition = cfg.condition || (cfg.condition = {}));
    (function (condition) {
        class MaxLevel extends condition.BoolRoleCondition {
            constructor(_json_) {
                super(_json_);
                if (_json_.level == null) {
                    throw new Error();
                }
                this.level = _json_.level;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        condition.MaxLevel = MaxLevel;
    })(condition = cfg.condition || (cfg.condition = {}));
    (function (condition) {
        class MinMaxLevel extends condition.BoolRoleCondition {
            constructor(_json_) {
                super(_json_);
                if (_json_.min == null) {
                    throw new Error();
                }
                this.min = _json_.min;
                if (_json_.max == null) {
                    throw new Error();
                }
                this.max = _json_.max;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        condition.MinMaxLevel = MinMaxLevel;
    })(condition = cfg.condition || (cfg.condition = {}));
    (function (condition) {
        class ClothesPropertyScoreGreaterThan extends condition.BoolRoleCondition {
            constructor(_json_) {
                super(_json_);
                if (_json_.prop == null) {
                    throw new Error();
                }
                this.prop = _json_.prop;
                if (_json_.value == null) {
                    throw new Error();
                }
                this.value = _json_.value;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        condition.ClothesPropertyScoreGreaterThan = ClothesPropertyScoreGreaterThan;
    })(condition = cfg.condition || (cfg.condition = {}));
    (function (condition) {
        class ContainsItem extends condition.RoleCondition {
            constructor(_json_) {
                super(_json_);
                if (_json_.item_id == null) {
                    throw new Error();
                }
                this.itemId = _json_.item_id;
                if (_json_.num == null) {
                    throw new Error();
                }
                this.num = _json_.num;
                if (_json_.reverse == null) {
                    throw new Error();
                }
                this.reverse = _json_.reverse;
            }
            resolve(_tables) {
                super.resolve(_tables);
                this.itemId_Ref = _tables.get('item.TbItem').get(this.itemId);
            }
        }
        condition.ContainsItem = ContainsItem;
    })(condition = cfg.condition || (cfg.condition = {}));
    (function (item) {
        class ChooseOneBonus {
            constructor(_json_) {
                if (_json_.drop_id == null) {
                    throw new Error();
                }
                this.dropId = _json_.drop_id;
                if (_json_.is_unique == null) {
                    throw new Error();
                }
                this.isUnique = _json_.is_unique;
            }
            resolve(_tables) {
                this.dropId_Ref = _tables.get('bonus.TbDrop').get(this.dropId);
            }
        }
        item.ChooseOneBonus = ChooseOneBonus;
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        class InteractionItem extends item.ItemExtra {
            constructor(_json_) {
                super(_json_);
                if (_json_.attack_num != null) {
                    this.attackNum = _json_.attack_num;
                }
                else {
                    this.attackNum = null;
                }
                if (_json_.holding_static_mesh == null) {
                    throw new Error();
                }
                this.holdingStaticMesh = _json_.holding_static_mesh;
                if (_json_.holding_static_mesh_mat == null) {
                    throw new Error();
                }
                this.holdingStaticMeshMat = _json_.holding_static_mesh_mat;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        item.InteractionItem = InteractionItem;
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        class Clothes extends item.ItemExtra {
            constructor(_json_) {
                super(_json_);
                if (_json_.attack == null) {
                    throw new Error();
                }
                this.attack = _json_.attack;
                if (_json_.hp == null) {
                    throw new Error();
                }
                this.hp = _json_.hp;
                if (_json_.energy_limit == null) {
                    throw new Error();
                }
                this.energyLimit = _json_.energy_limit;
                if (_json_.energy_resume == null) {
                    throw new Error();
                }
                this.energyResume = _json_.energy_resume;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        item.Clothes = Clothes;
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        class DesignDrawing extends item.ItemExtra {
            constructor(_json_) {
                super(_json_);
                if (_json_.learn_component_id == null) {
                    throw new Error();
                }
                this.learnComponentId = _json_.learn_component_id;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        item.DesignDrawing = DesignDrawing;
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        class Dymmy extends item.ItemExtra {
            constructor(_json_) {
                super(_json_);
                if (_json_.cost == null) {
                    throw new Error();
                }
                this.cost = cost.Cost.constructorFrom(_json_.cost);
            }
            resolve(_tables) {
                super.resolve(_tables);
                if (this.cost != null) {
                    this.cost.resolve(_tables);
                }
            }
        }
        item.Dymmy = Dymmy;
    })(item = cfg.item || (cfg.item = {}));
    let cost;
    (function (cost) {
        class Cost {
            static constructorFrom(_json_) {
                switch (_json_.__type__) {
                    case 'CostCurrency': return new cost.CostCurrency(_json_);
                    case 'CostCurrencies': return new cost.CostCurrencies(_json_);
                    case 'CostOneItem': return new cost.CostOneItem(_json_);
                    case 'CostItem': return new cost.CostItem(_json_);
                    case 'CostItems': return new cost.CostItems(_json_);
                    default: throw new Error();
                }
            }
            constructor(_json_) {
            }
            resolve(_tables) {
            }
        }
        cost.Cost = Cost;
    })(cost = cfg.cost || (cfg.cost = {}));
    (function (cost) {
        class CostCurrency extends cost.Cost {
            constructor(_json_) {
                super(_json_);
                if (_json_.type == null) {
                    throw new Error();
                }
                this.type = _json_.type;
                if (_json_.num == null) {
                    throw new Error();
                }
                this.num = _json_.num;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        cost.CostCurrency = CostCurrency;
    })(cost = cfg.cost || (cfg.cost = {}));
    (function (cost) {
        class CostCurrencies extends cost.Cost {
            constructor(_json_) {
                super(_json_);
                if (_json_.currencies == null) {
                    throw new Error();
                }
                {
                    this.currencies = [];
                    for (let _ele of _json_.currencies) {
                        let _e;
                        _e = new cost.CostCurrency(_ele);
                        this.currencies.push(_e);
                    }
                }
            }
            resolve(_tables) {
                super.resolve(_tables);
                for (let _e of this.currencies) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        cost.CostCurrencies = CostCurrencies;
    })(cost = cfg.cost || (cfg.cost = {}));
    (function (cost) {
        class CostOneItem extends cost.Cost {
            constructor(_json_) {
                super(_json_);
                if (_json_.item_id == null) {
                    throw new Error();
                }
                this.itemId = _json_.item_id;
            }
            resolve(_tables) {
                super.resolve(_tables);
                this.itemId_Ref = _tables.get('item.TbItem').get(this.itemId);
            }
        }
        cost.CostOneItem = CostOneItem;
    })(cost = cfg.cost || (cfg.cost = {}));
    (function (cost) {
        class CostItem extends cost.Cost {
            constructor(_json_) {
                super(_json_);
                if (_json_.item_id == null) {
                    throw new Error();
                }
                this.itemId = _json_.item_id;
                if (_json_.amount == null) {
                    throw new Error();
                }
                this.amount = _json_.amount;
            }
            resolve(_tables) {
                super.resolve(_tables);
                this.itemId_Ref = _tables.get('item.TbItem').get(this.itemId);
            }
        }
        cost.CostItem = CostItem;
    })(cost = cfg.cost || (cfg.cost = {}));
    (function (cost) {
        class CostItems extends cost.Cost {
            constructor(_json_) {
                super(_json_);
                if (_json_.item_list == null) {
                    throw new Error();
                }
                {
                    this.itemList = [];
                    for (let _ele of _json_.item_list) {
                        let _e;
                        _e = new cost.CostItem(_ele);
                        this.itemList.push(_e);
                    }
                }
            }
            resolve(_tables) {
                super.resolve(_tables);
                for (let _e of this.itemList) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        cost.CostItems = CostItems;
    })(cost = cfg.cost || (cfg.cost = {}));
    let l10n;
    (function (l10n) {
        class TbL10NDemo {
            constructor(_json_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (var _json2_ of _json_) {
                    let _v;
                    _v = new l10n.L10NDemo(_json2_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        l10n.TbL10NDemo = TbL10NDemo;
    })(l10n = cfg.l10n || (cfg.l10n = {}));
    (function (l10n) {
        class L10NDemo {
            constructor(_json_) {
                if (_json_.id == null) {
                    throw new Error();
                }
                this.id = _json_.id;
                if (_json_.text == null) {
                    throw new Error();
                }
                this.text = _json_.text;
            }
            resolve(_tables) {
            }
        }
        l10n.L10NDemo = L10NDemo;
    })(l10n = cfg.l10n || (cfg.l10n = {}));
    (function (l10n) {
        class TbPatchDemo {
            constructor(_json_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (var _json2_ of _json_) {
                    let _v;
                    _v = new l10n.PatchDemo(_json2_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        l10n.TbPatchDemo = TbPatchDemo;
    })(l10n = cfg.l10n || (cfg.l10n = {}));
    (function (l10n) {
        class PatchDemo {
            constructor(_json_) {
                if (_json_.id == null) {
                    throw new Error();
                }
                this.id = _json_.id;
                if (_json_.value == null) {
                    throw new Error();
                }
                this.value = _json_.value;
            }
            resolve(_tables) {
            }
        }
        l10n.PatchDemo = PatchDemo;
    })(l10n = cfg.l10n || (cfg.l10n = {}));
    (function (mail) {
        class TbSystemMail {
            constructor(_json_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (var _json2_ of _json_) {
                    let _v;
                    _v = new mail.SystemMail(_json2_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        mail.TbSystemMail = TbSystemMail;
    })(mail = cfg.mail || (cfg.mail = {}));
    (function (mail) {
        class SystemMail {
            constructor(_json_) {
                if (_json_.id == null) {
                    throw new Error();
                }
                this.id = _json_.id;
                if (_json_.title == null) {
                    throw new Error();
                }
                this.title = _json_.title;
                if (_json_.sender == null) {
                    throw new Error();
                }
                this.sender = _json_.sender;
                if (_json_.content == null) {
                    throw new Error();
                }
                this.content = _json_.content;
                if (_json_.award == null) {
                    throw new Error();
                }
                this.award = _json_.award;
            }
            resolve(_tables) {
            }
        }
        mail.SystemMail = SystemMail;
    })(mail = cfg.mail || (cfg.mail = {}));
    (function (mail) {
        class TbGlobalMail {
            constructor(_json_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (var _json2_ of _json_) {
                    let _v;
                    _v = new mail.GlobalMail(_json2_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        mail.TbGlobalMail = TbGlobalMail;
    })(mail = cfg.mail || (cfg.mail = {}));
    (function (mail) {
        class GlobalMail {
            constructor(_json_) {
                if (_json_.id == null) {
                    throw new Error();
                }
                this.id = _json_.id;
                if (_json_.title == null) {
                    throw new Error();
                }
                this.title = _json_.title;
                if (_json_.sender == null) {
                    throw new Error();
                }
                this.sender = _json_.sender;
                if (_json_.content == null) {
                    throw new Error();
                }
                this.content = _json_.content;
                if (_json_.award == null) {
                    throw new Error();
                }
                this.award = _json_.award;
                if (_json_.all_server == null) {
                    throw new Error();
                }
                this.allServer = _json_.all_server;
                if (_json_.server_list == null) {
                    throw new Error();
                }
                this.serverList = _json_.server_list;
                if (_json_.platform == null) {
                    throw new Error();
                }
                this.platform = _json_.platform;
                if (_json_.channel == null) {
                    throw new Error();
                }
                this.channel = _json_.channel;
                if (_json_.min_max_level == null) {
                    throw new Error();
                }
                this.minMaxLevel = new condition.MinMaxLevel(_json_.min_max_level);
                if (_json_.register_time == null) {
                    throw new Error();
                }
                this.registerTime = new condition.TimeRange(_json_.register_time);
                if (_json_.mail_time == null) {
                    throw new Error();
                }
                this.mailTime = new condition.TimeRange(_json_.mail_time);
            }
            resolve(_tables) {
                if (this.minMaxLevel != null) {
                    this.minMaxLevel.resolve(_tables);
                }
                if (this.registerTime != null) {
                    this.registerTime.resolve(_tables);
                }
                if (this.mailTime != null) {
                    this.mailTime.resolve(_tables);
                }
            }
        }
        mail.GlobalMail = GlobalMail;
    })(mail = cfg.mail || (cfg.mail = {}));
    (function (role) {
        class TbRoleLevelExpAttr {
            constructor(_json_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (var _json2_ of _json_) {
                    let _v;
                    _v = new role.LevelExpAttr(_json2_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.level, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        role.TbRoleLevelExpAttr = TbRoleLevelExpAttr;
    })(role = cfg.role || (cfg.role = {}));
    (function (role) {
        class LevelExpAttr {
            constructor(_json_) {
                if (_json_.level == null) {
                    throw new Error();
                }
                this.level = _json_.level;
                if (_json_.need_exp == null) {
                    throw new Error();
                }
                this.needExp = _json_.need_exp;
                if (_json_.clothes_attrs == null) {
                    throw new Error();
                }
                this.clothesAttrs = _json_.clothes_attrs;
            }
            resolve(_tables) {
            }
        }
        role.LevelExpAttr = LevelExpAttr;
    })(role = cfg.role || (cfg.role = {}));
    (function (role) {
        class TbRoleLevelBonusCoefficient {
            constructor(_json_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (var _json2_ of _json_) {
                    let _v;
                    _v = new role.LevelBonus(_json2_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        role.TbRoleLevelBonusCoefficient = TbRoleLevelBonusCoefficient;
    })(role = cfg.role || (cfg.role = {}));
    (function (role) {
        class LevelBonus {
            constructor(_json_) {
                if (_json_.id == null) {
                    throw new Error();
                }
                this.id = _json_.id;
                if (_json_.distinct_bonus_infos == null) {
                    throw new Error();
                }
                {
                    this.distinctBonusInfos = [];
                    for (let _ele of _json_.distinct_bonus_infos) {
                        let _e;
                        _e = new role.DistinctBonusInfos(_ele);
                        this.distinctBonusInfos.push(_e);
                    }
                }
            }
            resolve(_tables) {
                for (let _e of this.distinctBonusInfos) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        role.LevelBonus = LevelBonus;
    })(role = cfg.role || (cfg.role = {}));
    (function (role) {
        class DistinctBonusInfos {
            constructor(_json_) {
                if (_json_.effective_level == null) {
                    throw new Error();
                }
                this.effectiveLevel = _json_.effective_level;
                if (_json_.bonus_info == null) {
                    throw new Error();
                }
                {
                    this.bonusInfo = [];
                    for (let _ele of _json_.bonus_info) {
                        let _e;
                        _e = new role.BonusInfo(_ele);
                        this.bonusInfo.push(_e);
                    }
                }
            }
            resolve(_tables) {
                for (let _e of this.bonusInfo) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        role.DistinctBonusInfos = DistinctBonusInfos;
    })(role = cfg.role || (cfg.role = {}));
    (function (role) {
        class BonusInfo {
            constructor(_json_) {
                if (_json_.type == null) {
                    throw new Error();
                }
                this.type = _json_.type;
                if (_json_.coefficient == null) {
                    throw new Error();
                }
                this.coefficient = _json_.coefficient;
            }
            resolve(_tables) {
            }
        }
        role.BonusInfo = BonusInfo;
    })(role = cfg.role || (cfg.role = {}));
    let tag;
    (function (tag) {
        class TbTestTag {
            constructor(_json_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (var _json2_ of _json_) {
                    let _v;
                    _v = new tag.TestTag(_json2_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        tag.TbTestTag = TbTestTag;
    })(tag = cfg.tag || (cfg.tag = {}));
    (function (tag) {
        class TestTag {
            constructor(_json_) {
                if (_json_.id == null) {
                    throw new Error();
                }
                this.id = _json_.id;
                if (_json_.value == null) {
                    throw new Error();
                }
                this.value = _json_.value;
            }
            resolve(_tables) {
            }
        }
        tag.TestTag = TestTag;
    })(tag = cfg.tag || (cfg.tag = {}));
    (function (test) {
        class TbFullTypes {
            constructor(_json_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (var _json2_ of _json_) {
                    let _v;
                    _v = new test.DemoType2(_json2_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.x3, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        test.TbFullTypes = TbFullTypes;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class DemoType2 {
            constructor(_json_) {
                if (_json_.x4 == null) {
                    throw new Error();
                }
                this.x4 = _json_.x4;
                if (_json_.x1 == null) {
                    throw new Error();
                }
                this.x1 = _json_.x1;
                if (_json_.x2 == null) {
                    throw new Error();
                }
                this.x2 = _json_.x2;
                if (_json_.x3 == null) {
                    throw new Error();
                }
                this.x3 = _json_.x3;
                if (_json_.x5 == null) {
                    throw new Error();
                }
                this.x5 = _json_.x5;
                if (_json_.x6 == null) {
                    throw new Error();
                }
                this.x6 = _json_.x6;
                if (_json_.x7 == null) {
                    throw new Error();
                }
                this.x7 = _json_.x7;
                if (_json_.x8_0 == null) {
                    throw new Error();
                }
                this.x80 = _json_.x8_0;
                if (_json_.x8 == null) {
                    throw new Error();
                }
                this.x8 = _json_.x8;
                if (_json_.x9 == null) {
                    throw new Error();
                }
                this.x9 = _json_.x9;
                if (_json_.x10 == null) {
                    throw new Error();
                }
                this.x10 = _json_.x10;
                if (_json_.x12 == null) {
                    throw new Error();
                }
                this.x12 = new test.DemoType1(_json_.x12);
                if (_json_.x13 == null) {
                    throw new Error();
                }
                this.x13 = _json_.x13;
                if (_json_.x14 == null) {
                    throw new Error();
                }
                this.x14 = test.DemoDynamic.constructorFrom(_json_.x14);
                if (_json_.s1 == null) {
                    throw new Error();
                }
                this.s1 = _json_.s1;
                if (_json_.v2 == null) {
                    throw new Error();
                }
                this.v2 = Vector2.deserializeFromJson(_json_.v2);
                if (_json_.v3 == null) {
                    throw new Error();
                }
                this.v3 = Vector3.deserializeFromJson(_json_.v3);
                if (_json_.v4 == null) {
                    throw new Error();
                }
                this.v4 = Vector4.deserializeFromJson(_json_.v4);
                if (_json_.t1 == null) {
                    throw new Error();
                }
                this.t1 = _json_.t1;
                if (_json_.k1 == null) {
                    throw new Error();
                }
                this.k1 = _json_.k1;
                if (_json_.k2 == null) {
                    throw new Error();
                }
                this.k2 = _json_.k2;
                if (_json_.k3 == null) {
                    throw new Error();
                }
                this.k3 = _json_.k3;
                if (_json_.k4 == null) {
                    throw new Error();
                }
                this.k4 = _json_.k4;
                if (_json_.k5 == null) {
                    throw new Error();
                }
                this.k5 = _json_.k5;
                if (_json_.k6 == null) {
                    throw new Error();
                }
                this.k6 = _json_.k6;
                if (_json_.k7 == null) {
                    throw new Error();
                }
                this.k7 = _json_.k7;
                if (_json_.k8 == null) {
                    throw new Error();
                }
                this.k8 = new Map();
                for (var _entry_ of _json_.k8) {
                    let _k;
                    _k = _entry_[0];
                    let _v;
                    _v = _entry_[1];
                    this.k8.set(_k, _v);
                }
                if (_json_.k9 == null) {
                    throw new Error();
                }
                {
                    this.k9 = [];
                    for (let _ele of _json_.k9) {
                        let _e;
                        _e = new test.DemoE2(_ele);
                        this.k9.push(_e);
                    }
                }
                if (_json_.k15 == null) {
                    throw new Error();
                }
                {
                    this.k15 = [];
                    for (let _ele of _json_.k15) {
                        let _e;
                        _e = test.DemoDynamic.constructorFrom(_ele);
                        this.k15.push(_e);
                    }
                }
            }
            resolve(_tables) {
                this.x3_Ref = _tables.get('test.TbFullTypes').get(this.x3);
                if (this.x12 != null) {
                    this.x12.resolve(_tables);
                }
                if (this.x14 != null) {
                    this.x14.resolve(_tables);
                }
                for (let _e of this.k9) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
                for (let _e of this.k15) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        test.DemoType2 = DemoType2;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class DemoType1 {
            constructor(_json_) {
                if (_json_.x1 == null) {
                    throw new Error();
                }
                this.x1 = _json_.x1;
            }
            resolve(_tables) {
            }
        }
        test.DemoType1 = DemoType1;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class DemoDynamic {
            constructor(_json_) {
                if (_json_.x1 == null) {
                    throw new Error();
                }
                this.x1 = _json_.x1;
            }
            static constructorFrom(_json_) {
                switch (_json_.__type__) {
                    case 'DemoD2': return new test.DemoD2(_json_);
                    case 'DemoE1': return new test.DemoE1(_json_);
                    case 'DemoD5': return new test.DemoD5(_json_);
                    default: throw new Error();
                }
            }
            resolve(_tables) {
            }
        }
        test.DemoDynamic = DemoDynamic;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class DemoD2 extends test.DemoDynamic {
            constructor(_json_) {
                super(_json_);
                if (_json_.x2 == null) {
                    throw new Error();
                }
                this.x2 = _json_.x2;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        test.DemoD2 = DemoD2;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class DemoD3 extends test.DemoDynamic {
            constructor(_json_) {
                super(_json_);
                if (_json_.x3 == null) {
                    throw new Error();
                }
                this.x3 = _json_.x3;
            }
            static constructorFrom(_json_) {
                switch (_json_.__type__) {
                    case 'DemoE1': return new test.DemoE1(_json_);
                    default: throw new Error();
                }
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        test.DemoD3 = DemoD3;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class DemoE1 extends test.DemoD3 {
            constructor(_json_) {
                super(_json_);
                if (_json_.x4 == null) {
                    throw new Error();
                }
                this.x4 = _json_.x4;
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        test.DemoE1 = DemoE1;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class DemoD5 extends test.DemoDynamic {
            constructor(_json_) {
                super(_json_);
                if (_json_.time == null) {
                    throw new Error();
                }
                this.time = new test.DateTimeRange(_json_.time);
            }
            resolve(_tables) {
                super.resolve(_tables);
                if (this.time != null) {
                    this.time.resolve(_tables);
                }
            }
        }
        test.DemoD5 = DemoD5;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class DateTimeRange {
            constructor(_json_) {
                if (_json_.start_time == null) {
                    throw new Error();
                }
                this.startTime = _json_.start_time;
                if (_json_.end_time == null) {
                    throw new Error();
                }
                this.endTime = _json_.end_time;
            }
            resolve(_tables) {
            }
        }
        test.DateTimeRange = DateTimeRange;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class DemoE2 {
            constructor(_json_) {
                if (_json_.y1 != null) {
                    this.y1 = _json_.y1;
                }
                else {
                    this.y1 = null;
                }
                if (_json_.y2 == null) {
                    throw new Error();
                }
                this.y2 = _json_.y2;
            }
            resolve(_tables) {
            }
        }
        test.DemoE2 = DemoE2;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbSingleton {
            constructor(_json_) {
                if (_json_.length != 1)
                    throw new Error('table mode=one, but size != 1');
                this._data = new test.DemoSingletonType(_json_[0]);
            }
            getData() { return this._data; }
            get id() { return this._data.id; }
            get name() { return this._data.name; }
            get date() { return this._data.date; }
            resolve(_tables) {
                this._data.resolve(_tables);
            }
        }
        test.TbSingleton = TbSingleton;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class DemoSingletonType {
            constructor(_json_) {
                if (_json_.id == null) {
                    throw new Error();
                }
                this.id = _json_.id;
                if (_json_.name == null) {
                    throw new Error();
                }
                this.name = _json_.name;
                if (_json_.date == null) {
                    throw new Error();
                }
                this.date = test.DemoDynamic.constructorFrom(_json_.date);
            }
            resolve(_tables) {
                if (this.date != null) {
                    this.date.resolve(_tables);
                }
            }
        }
        test.DemoSingletonType = DemoSingletonType;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbDataFromJson {
            constructor(_json_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (var _json2_ of _json_) {
                    let _v;
                    _v = new test.DemoType2(_json2_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.x4, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        test.TbDataFromJson = TbDataFromJson;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbDataFromXml {
            constructor(_json_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (var _json2_ of _json_) {
                    let _v;
                    _v = new test.DemoType2(_json2_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.x4, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        test.TbDataFromXml = TbDataFromXml;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbDataFromLua {
            constructor(_json_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (var _json2_ of _json_) {
                    let _v;
                    _v = new test.DemoType2(_json2_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.x4, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        test.TbDataFromLua = TbDataFromLua;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbMultiRowRecord {
            constructor(_json_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (var _json2_ of _json_) {
                    let _v;
                    _v = new test.MultiRowRecord(_json2_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        test.TbMultiRowRecord = TbMultiRowRecord;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class MultiRowRecord {
            constructor(_json_) {
                if (_json_.id == null) {
                    throw new Error();
                }
                this.id = _json_.id;
                if (_json_.name == null) {
                    throw new Error();
                }
                this.name = _json_.name;
                if (_json_.one_rows == null) {
                    throw new Error();
                }
                {
                    this.oneRows = [];
                    for (let _ele of _json_.one_rows) {
                        let _e;
                        _e = new test.MultiRowType1(_ele);
                        this.oneRows.push(_e);
                    }
                }
                if (_json_.multi_rows1 == null) {
                    throw new Error();
                }
                {
                    this.multiRows1 = [];
                    for (let _ele of _json_.multi_rows1) {
                        let _e;
                        _e = new test.MultiRowType1(_ele);
                        this.multiRows1.push(_e);
                    }
                }
                if (_json_.multi_rows2 == null) {
                    throw new Error();
                }
                {
                    this.multiRows2 = [];
                    for (let _ele of _json_.multi_rows2) {
                        let _e;
                        _e = new test.MultiRowType1(_ele);
                        this.multiRows2.push(_e);
                    }
                }
                if (_json_.multi_rows3 == null) {
                    throw new Error();
                }
                {
                    this.multiRows3 = new Set();
                    for (var _ele of _json_.multi_rows3) {
                        let _e;
                        _e = new test.MultiRowType2(_ele);
                        this.multiRows3.add(_e);
                    }
                }
                if (_json_.multi_rows4 == null) {
                    throw new Error();
                }
                this.multiRows4 = new Map();
                for (var _entry_ of _json_.multi_rows4) {
                    let _k;
                    _k = _entry_[0];
                    let _v;
                    _v = new test.MultiRowType2(_entry_[1]);
                    this.multiRows4.set(_k, _v);
                }
            }
            resolve(_tables) {
                for (let _e of this.oneRows) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
                for (let _e of this.multiRows1) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
                for (let _e of this.multiRows2) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
                for (let _e of this.multiRows4.values()) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        test.MultiRowRecord = MultiRowRecord;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class MultiRowType1 {
            constructor(_json_) {
                if (_json_.id == null) {
                    throw new Error();
                }
                this.id = _json_.id;
                if (_json_.x == null) {
                    throw new Error();
                }
                this.x = _json_.x;
            }
            resolve(_tables) {
            }
        }
        test.MultiRowType1 = MultiRowType1;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class MultiRowType2 {
            constructor(_json_) {
                if (_json_.id == null) {
                    throw new Error();
                }
                this.id = _json_.id;
                if (_json_.x == null) {
                    throw new Error();
                }
                this.x = _json_.x;
                if (_json_.y == null) {
                    throw new Error();
                }
                this.y = _json_.y;
            }
            resolve(_tables) {
            }
        }
        test.MultiRowType2 = MultiRowType2;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbMultiRowTitle {
            constructor(_json_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (var _json2_ of _json_) {
                    let _v;
                    _v = new test.MultiRowTitle(_json2_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        test.TbMultiRowTitle = TbMultiRowTitle;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class MultiRowTitle {
            constructor(_json_) {
                if (_json_.id == null) {
                    throw new Error();
                }
                this.id = _json_.id;
                if (_json_.name == null) {
                    throw new Error();
                }
                this.name = _json_.name;
                if (_json_.x1 == null) {
                    throw new Error();
                }
                this.x1 = new test.H1(_json_.x1);
                if (_json_.x2 == null) {
                    throw new Error();
                }
                {
                    this.x2 = [];
                    for (let _ele of _json_.x2) {
                        let _e;
                        _e = new test.H2(_ele);
                        this.x2.push(_e);
                    }
                }
                if (_json_.x3 == null) {
                    throw new Error();
                }
                {
                    this.x3 = [];
                    for (let _ele of _json_.x3) {
                        let _e;
                        _e = new test.H2(_ele);
                        this.x3.push(_e);
                    }
                }
            }
            resolve(_tables) {
                if (this.x1 != null) {
                    this.x1.resolve(_tables);
                }
                for (let _e of this.x2) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
                for (let _e of this.x3) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        test.MultiRowTitle = MultiRowTitle;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class H1 {
            constructor(_json_) {
                if (_json_.y2 == null) {
                    throw new Error();
                }
                this.y2 = new test.H2(_json_.y2);
                if (_json_.y3 == null) {
                    throw new Error();
                }
                this.y3 = _json_.y3;
            }
            resolve(_tables) {
                if (this.y2 != null) {
                    this.y2.resolve(_tables);
                }
            }
        }
        test.H1 = H1;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class H2 {
            constructor(_json_) {
                if (_json_.z2 == null) {
                    throw new Error();
                }
                this.z2 = _json_.z2;
                if (_json_.z3 == null) {
                    throw new Error();
                }
                this.z3 = _json_.z3;
            }
            resolve(_tables) {
            }
        }
        test.H2 = H2;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbTestNull {
            constructor(_json_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (var _json2_ of _json_) {
                    let _v;
                    _v = new test.TestNull(_json2_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        test.TbTestNull = TbTestNull;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TestNull {
            constructor(_json_) {
                if (_json_.id == null) {
                    throw new Error();
                }
                this.id = _json_.id;
                if (_json_.x1 != null) {
                    this.x1 = _json_.x1;
                }
                else {
                    this.x1 = null;
                }
                if (_json_.x2 != null) {
                    this.x2 = _json_.x2;
                }
                else {
                    this.x2 = null;
                }
                if (_json_.x3 != null) {
                    this.x3 = new test.DemoType1(_json_.x3);
                }
                else {
                    this.x3 = null;
                }
                if (_json_.x4 != null) {
                    this.x4 = test.DemoDynamic.constructorFrom(_json_.x4);
                }
                else {
                    this.x4 = null;
                }
                if (_json_.s1 != null) {
                    this.s1 = _json_.s1;
                }
                else {
                    this.s1 = null;
                }
                if (_json_.s2 != null) {
                    this.s2 = _json_.s2;
                }
                else {
                    this.s2 = null;
                }
            }
            resolve(_tables) {
                if (this.x3 != null) {
                    this.x3.resolve(_tables);
                }
                if (this.x4 != null) {
                    this.x4.resolve(_tables);
                }
            }
        }
        test.TestNull = TestNull;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbDemoPrimitive {
            constructor(_json_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (var _json2_ of _json_) {
                    let _v;
                    _v = new test.DemoPrimitiveTypesTable(_json2_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.x4, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        test.TbDemoPrimitive = TbDemoPrimitive;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class DemoPrimitiveTypesTable {
            constructor(_json_) {
                if (_json_.x1 == null) {
                    throw new Error();
                }
                this.x1 = _json_.x1;
                if (_json_.x2 == null) {
                    throw new Error();
                }
                this.x2 = _json_.x2;
                if (_json_.x3 == null) {
                    throw new Error();
                }
                this.x3 = _json_.x3;
                if (_json_.x4 == null) {
                    throw new Error();
                }
                this.x4 = _json_.x4;
                if (_json_.x5 == null) {
                    throw new Error();
                }
                this.x5 = _json_.x5;
                if (_json_.x6 == null) {
                    throw new Error();
                }
                this.x6 = _json_.x6;
                if (_json_.x7 == null) {
                    throw new Error();
                }
                this.x7 = _json_.x7;
                if (_json_.s1 == null) {
                    throw new Error();
                }
                this.s1 = _json_.s1;
                if (_json_.s2 == null) {
                    throw new Error();
                }
                this.s2 = _json_.s2;
                if (_json_.v2 == null) {
                    throw new Error();
                }
                this.v2 = Vector2.deserializeFromJson(_json_.v2);
                if (_json_.v3 == null) {
                    throw new Error();
                }
                this.v3 = Vector3.deserializeFromJson(_json_.v3);
                if (_json_.v4 == null) {
                    throw new Error();
                }
                this.v4 = Vector4.deserializeFromJson(_json_.v4);
                if (_json_.t1 == null) {
                    throw new Error();
                }
                this.t1 = _json_.t1;
            }
            resolve(_tables) {
            }
        }
        test.DemoPrimitiveTypesTable = DemoPrimitiveTypesTable;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbTestString {
            constructor(_json_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (var _json2_ of _json_) {
                    let _v;
                    _v = new test.TestString(_json2_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        test.TbTestString = TbTestString;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TestString {
            constructor(_json_) {
                if (_json_.id == null) {
                    throw new Error();
                }
                this.id = _json_.id;
                if (_json_.s1 == null) {
                    throw new Error();
                }
                this.s1 = _json_.s1;
                if (_json_.cs1 == null) {
                    throw new Error();
                }
                this.cs1 = new test.CompactString(_json_.cs1);
                if (_json_.cs2 == null) {
                    throw new Error();
                }
                this.cs2 = new test.CompactString(_json_.cs2);
            }
            resolve(_tables) {
                if (this.cs1 != null) {
                    this.cs1.resolve(_tables);
                }
                if (this.cs2 != null) {
                    this.cs2.resolve(_tables);
                }
            }
        }
        test.TestString = TestString;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class CompactString {
            constructor(_json_) {
                if (_json_.id == null) {
                    throw new Error();
                }
                this.id = _json_.id;
                if (_json_.s2 == null) {
                    throw new Error();
                }
                this.s2 = _json_.s2;
                if (_json_.s3 == null) {
                    throw new Error();
                }
                this.s3 = _json_.s3;
            }
            resolve(_tables) {
            }
        }
        test.CompactString = CompactString;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbDemoGroup {
            constructor(_json_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (var _json2_ of _json_) {
                    let _v;
                    _v = new test.DemoGroup(_json2_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        test.TbDemoGroup = TbDemoGroup;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class DemoGroup {
            constructor(_json_) {
                if (_json_.id == null) {
                    throw new Error();
                }
                this.id = _json_.id;
                if (_json_.x1 == null) {
                    throw new Error();
                }
                this.x1 = _json_.x1;
                if (_json_.x2 == null) {
                    throw new Error();
                }
                this.x2 = _json_.x2;
                if (_json_.x4 == null) {
                    throw new Error();
                }
                this.x4 = _json_.x4;
                if (_json_.x5 == null) {
                    throw new Error();
                }
                this.x5 = new test.InnerGroup(_json_.x5);
            }
            resolve(_tables) {
                if (this.x5 != null) {
                    this.x5.resolve(_tables);
                }
            }
        }
        test.DemoGroup = DemoGroup;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class InnerGroup {
            constructor(_json_) {
                if (_json_.y1 == null) {
                    throw new Error();
                }
                this.y1 = _json_.y1;
                if (_json_.y2 == null) {
                    throw new Error();
                }
                this.y2 = _json_.y2;
                if (_json_.y4 == null) {
                    throw new Error();
                }
                this.y4 = _json_.y4;
            }
            resolve(_tables) {
            }
        }
        test.InnerGroup = InnerGroup;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbDemoGroup_C {
            constructor(_json_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (var _json2_ of _json_) {
                    let _v;
                    _v = new test.DemoGroup(_json2_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        test.TbDemoGroup_C = TbDemoGroup_C;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbTestGlobal {
            constructor(_json_) {
                if (_json_.length != 1)
                    throw new Error('table mode=one, but size != 1');
                this._data = new test.TestGlobal(_json_[0]);
            }
            getData() { return this._data; }
            get unlockEquip() { return this._data.unlockEquip; }
            get unlockHero() { return this._data.unlockHero; }
            resolve(_tables) {
                this._data.resolve(_tables);
            }
        }
        test.TbTestGlobal = TbTestGlobal;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TestGlobal {
            constructor(_json_) {
                if (_json_.unlock_equip == null) {
                    throw new Error();
                }
                this.unlockEquip = _json_.unlock_equip;
                if (_json_.unlock_hero == null) {
                    throw new Error();
                }
                this.unlockHero = _json_.unlock_hero;
            }
            resolve(_tables) {
            }
        }
        test.TestGlobal = TestGlobal;
    })(test = cfg.test || (cfg.test = {}));
    class Tables {
        constructor(loader) {
            let tables = new Map();
            this._TbBlackboard = new ai.TbBlackboard(loader('ai.TbBlackboard'));
            tables.set('ai.TbBlackboard', this._TbBlackboard);
            this._TbBehaviorTree = new ai.TbBehaviorTree(loader('ai.TbBehaviorTree'));
            tables.set('ai.TbBehaviorTree', this._TbBehaviorTree);
            this._TbClazz = new blueprint.TbClazz(loader('blueprint.TbClazz'));
            tables.set('blueprint.TbClazz', this._TbClazz);
            this._TbDrop = new bonus.TbDrop(loader('bonus.TbDrop'));
            tables.set('bonus.TbDrop', this._TbDrop);
            this._TbGlobalConfig = new common.TbGlobalConfig(loader('common.TbGlobalConfig'));
            tables.set('common.TbGlobalConfig', this._TbGlobalConfig);
            this._TbDummy = new common.TbDummy(loader('common.TbDummy'));
            tables.set('common.TbDummy', this._TbDummy);
            this._TbErrorInfo = new error.TbErrorInfo(loader('error.TbErrorInfo'));
            tables.set('error.TbErrorInfo', this._TbErrorInfo);
            this._TbCodeInfo = new error.TbCodeInfo(loader('error.TbCodeInfo'));
            tables.set('error.TbCodeInfo', this._TbCodeInfo);
            this._TbItem = new item.TbItem(loader('item.TbItem'));
            tables.set('item.TbItem', this._TbItem);
            this._TbItemFunc = new item.TbItemFunc(loader('item.TbItemFunc'));
            tables.set('item.TbItemFunc', this._TbItemFunc);
            this._TbItemExtra = new item.TbItemExtra(loader('item.TbItemExtra'));
            tables.set('item.TbItemExtra', this._TbItemExtra);
            this._TbL10NDemo = new l10n.TbL10NDemo(loader('l10n.TbL10NDemo'));
            tables.set('l10n.TbL10NDemo', this._TbL10NDemo);
            this._TbPatchDemo = new l10n.TbPatchDemo(loader('l10n.TbPatchDemo'));
            tables.set('l10n.TbPatchDemo', this._TbPatchDemo);
            this._TbSystemMail = new mail.TbSystemMail(loader('mail.TbSystemMail'));
            tables.set('mail.TbSystemMail', this._TbSystemMail);
            this._TbGlobalMail = new mail.TbGlobalMail(loader('mail.TbGlobalMail'));
            tables.set('mail.TbGlobalMail', this._TbGlobalMail);
            this._TbRoleLevelExpAttr = new role.TbRoleLevelExpAttr(loader('role.TbRoleLevelExpAttr'));
            tables.set('role.TbRoleLevelExpAttr', this._TbRoleLevelExpAttr);
            this._TbRoleLevelBonusCoefficient = new role.TbRoleLevelBonusCoefficient(loader('role.TbRoleLevelBonusCoefficient'));
            tables.set('role.TbRoleLevelBonusCoefficient', this._TbRoleLevelBonusCoefficient);
            this._TbTestTag = new tag.TbTestTag(loader('tag.TbTestTag'));
            tables.set('tag.TbTestTag', this._TbTestTag);
            this._TbFullTypes = new test.TbFullTypes(loader('test.TbFullTypes'));
            tables.set('test.TbFullTypes', this._TbFullTypes);
            this._TbSingleton = new test.TbSingleton(loader('test.TbSingleton'));
            tables.set('test.TbSingleton', this._TbSingleton);
            this._TbDataFromJson = new test.TbDataFromJson(loader('test.TbDataFromJson'));
            tables.set('test.TbDataFromJson', this._TbDataFromJson);
            this._TbDataFromXml = new test.TbDataFromXml(loader('test.TbDataFromXml'));
            tables.set('test.TbDataFromXml', this._TbDataFromXml);
            this._TbDataFromLua = new test.TbDataFromLua(loader('test.TbDataFromLua'));
            tables.set('test.TbDataFromLua', this._TbDataFromLua);
            this._TbMultiRowRecord = new test.TbMultiRowRecord(loader('test.TbMultiRowRecord'));
            tables.set('test.TbMultiRowRecord', this._TbMultiRowRecord);
            this._TbMultiRowTitle = new test.TbMultiRowTitle(loader('test.TbMultiRowTitle'));
            tables.set('test.TbMultiRowTitle', this._TbMultiRowTitle);
            this._TbTestNull = new test.TbTestNull(loader('test.TbTestNull'));
            tables.set('test.TbTestNull', this._TbTestNull);
            this._TbDemoPrimitive = new test.TbDemoPrimitive(loader('test.TbDemoPrimitive'));
            tables.set('test.TbDemoPrimitive', this._TbDemoPrimitive);
            this._TbTestString = new test.TbTestString(loader('test.TbTestString'));
            tables.set('test.TbTestString', this._TbTestString);
            this._TbDemoGroup = new test.TbDemoGroup(loader('test.TbDemoGroup'));
            tables.set('test.TbDemoGroup', this._TbDemoGroup);
            this._TbDemoGroup_C = new test.TbDemoGroup_C(loader('test.TbDemoGroup_C'));
            tables.set('test.TbDemoGroup_C', this._TbDemoGroup_C);
            this._TbTestGlobal = new test.TbTestGlobal(loader('test.TbTestGlobal'));
            tables.set('test.TbTestGlobal', this._TbTestGlobal);
            this._TbBlackboard.resolve(tables);
            this._TbBehaviorTree.resolve(tables);
            this._TbClazz.resolve(tables);
            this._TbDrop.resolve(tables);
            this._TbGlobalConfig.resolve(tables);
            this._TbDummy.resolve(tables);
            this._TbErrorInfo.resolve(tables);
            this._TbCodeInfo.resolve(tables);
            this._TbItem.resolve(tables);
            this._TbItemFunc.resolve(tables);
            this._TbItemExtra.resolve(tables);
            this._TbL10NDemo.resolve(tables);
            this._TbPatchDemo.resolve(tables);
            this._TbSystemMail.resolve(tables);
            this._TbGlobalMail.resolve(tables);
            this._TbRoleLevelExpAttr.resolve(tables);
            this._TbRoleLevelBonusCoefficient.resolve(tables);
            this._TbTestTag.resolve(tables);
            this._TbFullTypes.resolve(tables);
            this._TbSingleton.resolve(tables);
            this._TbDataFromJson.resolve(tables);
            this._TbDataFromXml.resolve(tables);
            this._TbDataFromLua.resolve(tables);
            this._TbMultiRowRecord.resolve(tables);
            this._TbMultiRowTitle.resolve(tables);
            this._TbTestNull.resolve(tables);
            this._TbDemoPrimitive.resolve(tables);
            this._TbTestString.resolve(tables);
            this._TbDemoGroup.resolve(tables);
            this._TbDemoGroup_C.resolve(tables);
            this._TbTestGlobal.resolve(tables);
        }
        get TbBlackboard() { return this._TbBlackboard; }
        get TbBehaviorTree() { return this._TbBehaviorTree; }
        get TbClazz() { return this._TbClazz; }
        get TbDrop() { return this._TbDrop; }
        get TbGlobalConfig() { return this._TbGlobalConfig; }
        get TbDummy() { return this._TbDummy; }
        get TbErrorInfo() { return this._TbErrorInfo; }
        get TbCodeInfo() { return this._TbCodeInfo; }
        get TbItem() { return this._TbItem; }
        get TbItemFunc() { return this._TbItemFunc; }
        get TbItemExtra() { return this._TbItemExtra; }
        get TbL10NDemo() { return this._TbL10NDemo; }
        get TbPatchDemo() { return this._TbPatchDemo; }
        get TbSystemMail() { return this._TbSystemMail; }
        get TbGlobalMail() { return this._TbGlobalMail; }
        get TbRoleLevelExpAttr() { return this._TbRoleLevelExpAttr; }
        get TbRoleLevelBonusCoefficient() { return this._TbRoleLevelBonusCoefficient; }
        get TbTestTag() { return this._TbTestTag; }
        get TbFullTypes() { return this._TbFullTypes; }
        get TbSingleton() { return this._TbSingleton; }
        get TbDataFromJson() { return this._TbDataFromJson; }
        get TbDataFromXml() { return this._TbDataFromXml; }
        get TbDataFromLua() { return this._TbDataFromLua; }
        get TbMultiRowRecord() { return this._TbMultiRowRecord; }
        get TbMultiRowTitle() { return this._TbMultiRowTitle; }
        get TbTestNull() { return this._TbTestNull; }
        get TbDemoPrimitive() { return this._TbDemoPrimitive; }
        get TbTestString() { return this._TbTestString; }
        get TbDemoGroup() { return this._TbDemoGroup; }
        get TbDemoGroup_C() { return this._TbDemoGroup_C; }
        get TbTestGlobal() { return this._TbTestGlobal; }
    }
    cfg.Tables = Tables;
})(cfg = exports.cfg || (exports.cfg = {}));
