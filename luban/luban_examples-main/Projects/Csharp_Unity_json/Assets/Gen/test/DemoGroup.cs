
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.test
{

public sealed partial class DemoGroup :  Bright.Config.BeanBase 
{
    public DemoGroup(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["x1"].IsNumber) { throw new SerializationException(); }  X1 = _json["x1"]; }
        { if(!_json["x2"].IsNumber) { throw new SerializationException(); }  X2 = _json["x2"]; }
        { if(!_json["x3"].IsNumber) { throw new SerializationException(); }  X3 = _json["x3"]; }
        { if(!_json["x4"].IsNumber) { throw new SerializationException(); }  X4 = _json["x4"]; }
        { if(!_json["x5"].IsObject) { throw new SerializationException(); }  X5 = test.InnerGroup.DeserializeInnerGroup(_json["x5"]); }
    }

    public DemoGroup(int id, int x1, int x2, int x3, int x4, test.InnerGroup x5 ) 
    {
        this.Id = id;
        this.X1 = x1;
        this.X2 = x2;
        this.X3 = x3;
        this.X4 = x4;
        this.X5 = x5;
    }

    public static DemoGroup DeserializeDemoGroup(JSONNode _json)
    {
        return new test.DemoGroup(_json);
    }

    public readonly int Id;
    public readonly int X1;
    public readonly int X2;
    public readonly int X3;
    public readonly int X4;
    public readonly test.InnerGroup X5;

    public const int ID = -379263008;
    public override int GetTypeId() => ID;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        X5?.Resolve(_tables);
        OnResolveFinish(_tables);
    }

    partial void OnResolveFinish(Dictionary<string, object> _tables);

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "X1:" + X1 + ","
        + "X2:" + X2 + ","
        + "X3:" + X3 + ","
        + "X4:" + X4 + ","
        + "X5:" + X5 + ","
        + "}";
    }
    }
}

