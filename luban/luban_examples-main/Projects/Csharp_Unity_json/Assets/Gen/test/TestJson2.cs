
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.test
{

public sealed partial class TestJson2 :  Bright.Config.BeanBase 
{
    public TestJson2(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { var _json1 = _json["m1"]; if(!_json1.IsArray) { throw new SerializationException(); } M1 = new System.Collections.Generic.Dictionary<int, int>(_json1.Count); foreach(JSONNode __e in _json1.Children) { int __k;  { if(!__e[0].IsNumber) { throw new SerializationException(); }  __k = __e[0]; } int __v;  { if(!__e[1].IsNumber) { throw new SerializationException(); }  __v = __e[1]; }  M1.Add(__k, __v); }   }
        { var _json1 = _json["m2"]; if(!_json1.IsArray) { throw new SerializationException(); } M2 = new System.Collections.Generic.Dictionary<long, int>(_json1.Count); foreach(JSONNode __e in _json1.Children) { long __k;  { if(!__e[0].IsNumber) { throw new SerializationException(); }  __k = __e[0]; } int __v;  { if(!__e[1].IsNumber) { throw new SerializationException(); }  __v = __e[1]; }  M2.Add(__k, __v); }   }
        { var _json1 = _json["m3"]; if(!_json1.IsArray) { throw new SerializationException(); } M3 = new System.Collections.Generic.Dictionary<string, int>(_json1.Count); foreach(JSONNode __e in _json1.Children) { string __k;  { if(!__e[0].IsString) { throw new SerializationException(); }  __k = __e[0]; } int __v;  { if(!__e[1].IsNumber) { throw new SerializationException(); }  __v = __e[1]; }  M3.Add(__k, __v); }   }
        { var _json1 = _json["m4"]; if(!_json1.IsArray) { throw new SerializationException(); } M4 = new System.Collections.Generic.Dictionary<string, test.DemoType1>(_json1.Count); foreach(JSONNode __e in _json1.Children) { string __k;  { if(!__e[0].IsString) { throw new SerializationException(); }  __k = __e[0]; } test.DemoType1 __v;  { if(!__e[1].IsObject) { throw new SerializationException(); }  __v = test.DemoType1.DeserializeDemoType1(__e[1]); }  M4.Add(__k, __v); }   }
    }

    public TestJson2(int id, System.Collections.Generic.Dictionary<int, int> m1, System.Collections.Generic.Dictionary<long, int> m2, System.Collections.Generic.Dictionary<string, int> m3, System.Collections.Generic.Dictionary<string, test.DemoType1> m4 ) 
    {
        this.Id = id;
        this.M1 = m1;
        this.M2 = m2;
        this.M3 = m3;
        this.M4 = m4;
    }

    public static TestJson2 DeserializeTestJson2(JSONNode _json)
    {
        return new test.TestJson2(_json);
    }

    public readonly int Id;
    public readonly System.Collections.Generic.Dictionary<int, int> M1;
    public readonly System.Collections.Generic.Dictionary<long, int> M2;
    public readonly System.Collections.Generic.Dictionary<string, int> M3;
    public readonly System.Collections.Generic.Dictionary<string, test.DemoType1> M4;

    public const int ID = 1942237276;
    public override int GetTypeId() => ID;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        foreach(var _e in M4.Values) { _e?.Resolve(_tables); }
        OnResolveFinish(_tables);
    }

    partial void OnResolveFinish(Dictionary<string, object> _tables);

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "M1:" + Bright.Common.StringUtil.CollectionToString(M1) + ","
        + "M2:" + Bright.Common.StringUtil.CollectionToString(M2) + ","
        + "M3:" + Bright.Common.StringUtil.CollectionToString(M3) + ","
        + "M4:" + Bright.Common.StringUtil.CollectionToString(M4) + ","
        + "}";
    }
    }
}

