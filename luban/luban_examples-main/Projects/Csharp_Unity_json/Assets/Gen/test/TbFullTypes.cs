
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.test
{

public sealed partial class TbFullTypes
{
    private readonly Dictionary<short, test.DemoType2> _dataMap;
    private readonly List<test.DemoType2> _dataList;
    
    public TbFullTypes(JSONNode _json)
    {
        _dataMap = new Dictionary<short, test.DemoType2>();
        _dataList = new List<test.DemoType2>();
        
        foreach(JSONNode _row in _json.Children)
        {
            var _v = test.DemoType2.DeserializeDemoType2(_row);
            _dataList.Add(_v);
            _dataMap.Add(_v.X3, _v);
        }
    }

    public Dictionary<short, test.DemoType2> DataMap => _dataMap;
    public List<test.DemoType2> DataList => _dataList;

    public test.DemoType2 GetOrDefault(short key) => _dataMap.TryGetValue(key, out var v) ? v : null;
    public test.DemoType2 Get(short key) => _dataMap[key];
    public test.DemoType2 this[short key] => _dataMap[key];

    public void Resolve(Dictionary<string, object> _tables)
    {
        foreach(var v in _dataList)
        {
            v.Resolve(_tables);
        }
        OnResolveFinish(_tables);
    }


    partial void OnResolveFinish(Dictionary<string, object> _tables);
}

}
