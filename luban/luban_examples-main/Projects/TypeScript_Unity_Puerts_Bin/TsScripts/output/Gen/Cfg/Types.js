"use strict";
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
Object.defineProperty(exports, "__esModule", { value: true });
exports.cfg = exports.BeanBase = exports.Vector4 = exports.Vector3 = exports.Vector2 = void 0;
class Vector2 {
    static deserializeFrom(buf) {
        var v = new Vector2();
        v.deserialize(buf);
        return v;
    }
    x;
    y;
    constructor(x = 0, y = 0) {
        this.x = x;
        this.y = y;
    }
    serialize(_buf_) {
        _buf_.WriteFloat(this.x);
        _buf_.WriteFloat(this.y);
    }
    deserialize(buf) {
        this.x = buf.ReadFloat();
        this.y = buf.ReadFloat();
    }
}
exports.Vector2 = Vector2;
class Vector3 {
    static deserializeFrom(buf) {
        var v = new Vector3();
        v.deserialize(buf);
        return v;
    }
    x;
    y;
    z;
    constructor(x = 0, y = 0, z = 0) {
        this.x = x;
        this.y = y;
        this.z = z;
    }
    serialize(_buf_) {
        _buf_.WriteFloat(this.x);
        _buf_.WriteFloat(this.y);
        _buf_.WriteFloat(this.z);
    }
    deserialize(buf) {
        this.x = buf.ReadFloat();
        this.y = buf.ReadFloat();
        this.z = buf.ReadFloat();
    }
}
exports.Vector3 = Vector3;
class Vector4 {
    static deserializeFrom(buf) {
        var v = new Vector4();
        v.deserialize(buf);
        return v;
    }
    x;
    y;
    z;
    w;
    constructor(x = 0, y = 0, z = 0, w = 0) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
    }
    serialize(_buf_) {
        _buf_.WriteFloat(this.x);
        _buf_.WriteFloat(this.y);
        _buf_.WriteFloat(this.z);
        _buf_.WriteFloat(this.w);
    }
    deserialize(buf) {
        this.x = buf.ReadFloat();
        this.y = buf.ReadFloat();
        this.z = buf.ReadFloat();
        this.z = buf.ReadFloat();
    }
}
exports.Vector4 = Vector4;
class BeanBase {
}
exports.BeanBase = BeanBase;
var cfg;
(function (cfg) {
    let role;
    (function (role) {
        class Consts {
            static MAX_NAME_LENGTH = 20;
            static MAX_USER_ROLE_NUM = 10;
        }
        role.Consts = Consts;
    })(role = cfg.role || (cfg.role = {}));
    let test;
    (function (test) {
        class DemoConst {
            static x1 = 0;
            static x2 = 3242;
            static x3 = 444.3;
            static x4 = 55.3;
        }
        test.DemoConst = DemoConst;
    })(test = cfg.test || (cfg.test = {}));
    let ai;
    (function (ai) {
        let EExecutor;
        (function (EExecutor) {
            EExecutor[EExecutor["CLIENT"] = 0] = "CLIENT";
            EExecutor[EExecutor["SERVER"] = 1] = "SERVER";
        })(EExecutor = ai.EExecutor || (ai.EExecutor = {}));
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        let EKeyType;
        (function (EKeyType) {
            EKeyType[EKeyType["BOOL"] = 1] = "BOOL";
            EKeyType[EKeyType["INT"] = 2] = "INT";
            EKeyType[EKeyType["FLOAT"] = 3] = "FLOAT";
            EKeyType[EKeyType["STRING"] = 4] = "STRING";
            EKeyType[EKeyType["VECTOR"] = 5] = "VECTOR";
            EKeyType[EKeyType["ROTATOR"] = 6] = "ROTATOR";
            EKeyType[EKeyType["NAME"] = 7] = "NAME";
            EKeyType[EKeyType["CLASS"] = 8] = "CLASS";
            EKeyType[EKeyType["ENUM"] = 9] = "ENUM";
            EKeyType[EKeyType["OBJECT"] = 10] = "OBJECT";
        })(EKeyType = ai.EKeyType || (ai.EKeyType = {}));
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        let EFlowAbortMode;
        (function (EFlowAbortMode) {
            EFlowAbortMode[EFlowAbortMode["NONE"] = 0] = "NONE";
            EFlowAbortMode[EFlowAbortMode["LOWER_PRIORITY"] = 1] = "LOWER_PRIORITY";
            EFlowAbortMode[EFlowAbortMode["SELF"] = 2] = "SELF";
            EFlowAbortMode[EFlowAbortMode["BOTH"] = 3] = "BOTH";
        })(EFlowAbortMode = ai.EFlowAbortMode || (ai.EFlowAbortMode = {}));
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        let EFinishMode;
        (function (EFinishMode) {
            EFinishMode[EFinishMode["IMMEDIATE"] = 0] = "IMMEDIATE";
            EFinishMode[EFinishMode["DELAYED"] = 1] = "DELAYED";
        })(EFinishMode = ai.EFinishMode || (ai.EFinishMode = {}));
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        let ENotifyObserverMode;
        (function (ENotifyObserverMode) {
            ENotifyObserverMode[ENotifyObserverMode["ON_VALUE_CHANGE"] = 0] = "ON_VALUE_CHANGE";
            ENotifyObserverMode[ENotifyObserverMode["ON_RESULT_CHANGE"] = 1] = "ON_RESULT_CHANGE";
        })(ENotifyObserverMode = ai.ENotifyObserverMode || (ai.ENotifyObserverMode = {}));
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        let EOperator;
        (function (EOperator) {
            EOperator[EOperator["IS_EQUAL_TO"] = 0] = "IS_EQUAL_TO";
            EOperator[EOperator["IS_NOT_EQUAL_TO"] = 1] = "IS_NOT_EQUAL_TO";
            EOperator[EOperator["IS_LESS_THAN"] = 2] = "IS_LESS_THAN";
            EOperator[EOperator["IS_LESS_THAN_OR_EQUAL_TO"] = 3] = "IS_LESS_THAN_OR_EQUAL_TO";
            EOperator[EOperator["IS_GREAT_THAN"] = 4] = "IS_GREAT_THAN";
            EOperator[EOperator["IS_GREAT_THAN_OR_EQUAL_TO"] = 5] = "IS_GREAT_THAN_OR_EQUAL_TO";
            EOperator[EOperator["CONTAINS"] = 6] = "CONTAINS";
            EOperator[EOperator["NOT_CONTAINS"] = 7] = "NOT_CONTAINS";
        })(EOperator = ai.EOperator || (ai.EOperator = {}));
    })(ai = cfg.ai || (cfg.ai = {}));
    let common;
    (function (common) {
        let EBoolOperator;
        (function (EBoolOperator) {
            EBoolOperator[EBoolOperator["AND"] = 0] = "AND";
            EBoolOperator[EBoolOperator["OR"] = 1] = "OR";
        })(EBoolOperator = common.EBoolOperator || (common.EBoolOperator = {}));
    })(common = cfg.common || (cfg.common = {}));
    let error;
    (function (error) {
        let EOperation;
        (function (EOperation) {
            /**
             * 登出
             */
            EOperation[EOperation["LOGOUT"] = 0] = "LOGOUT";
            /**
             * 重启
             */
            EOperation[EOperation["RESTART"] = 1] = "RESTART";
        })(EOperation = error.EOperation || (error.EOperation = {}));
    })(error = cfg.error || (cfg.error = {}));
    (function (error) {
        let EErrorCode;
        (function (EErrorCode) {
            EErrorCode[EErrorCode["OK"] = 0] = "OK";
            EErrorCode[EErrorCode["SERVER_NOT_EXISTS"] = 1] = "SERVER_NOT_EXISTS";
            EErrorCode[EErrorCode["HAS_BIND_SERVER"] = 2] = "HAS_BIND_SERVER";
            EErrorCode[EErrorCode["AUTH_FAIL"] = 3] = "AUTH_FAIL";
            EErrorCode[EErrorCode["NOT_BIND_SERVER"] = 4] = "NOT_BIND_SERVER";
            EErrorCode[EErrorCode["SERVER_ACCESS_FAIL"] = 5] = "SERVER_ACCESS_FAIL";
            EErrorCode[EErrorCode["EXAMPLE_FLASH"] = 6] = "EXAMPLE_FLASH";
            EErrorCode[EErrorCode["EXAMPLE_MSGBOX"] = 7] = "EXAMPLE_MSGBOX";
            EErrorCode[EErrorCode["EXAMPLE_DLG_OK"] = 8] = "EXAMPLE_DLG_OK";
            EErrorCode[EErrorCode["EXAMPLE_DLG_OK_CANCEL"] = 9] = "EXAMPLE_DLG_OK_CANCEL";
            EErrorCode[EErrorCode["ROLE_CREATE_NAME_INVALID_CHAR"] = 100] = "ROLE_CREATE_NAME_INVALID_CHAR";
            EErrorCode[EErrorCode["ROLE_CREATE_NAME_EMPTY"] = 101] = "ROLE_CREATE_NAME_EMPTY";
            EErrorCode[EErrorCode["ROLE_CREATE_NAME_EXCEED_MAX_LENGTH"] = 102] = "ROLE_CREATE_NAME_EXCEED_MAX_LENGTH";
            EErrorCode[EErrorCode["ROLE_CREATE_ROLE_LIST_FULL"] = 103] = "ROLE_CREATE_ROLE_LIST_FULL";
            EErrorCode[EErrorCode["ROLE_CREATE_INVALID_PROFESSION"] = 104] = "ROLE_CREATE_INVALID_PROFESSION";
            EErrorCode[EErrorCode["ROLE_CREATE_INVALID_GENDER"] = 105] = "ROLE_CREATE_INVALID_GENDER";
            EErrorCode[EErrorCode["ROLE_NOT_OWNED_BY_USER"] = 106] = "ROLE_NOT_OWNED_BY_USER";
            EErrorCode[EErrorCode["ROLE_LEVEL_NOT_ARRIVE"] = 107] = "ROLE_LEVEL_NOT_ARRIVE";
            EErrorCode[EErrorCode["PARAM_ILLEGAL"] = 200] = "PARAM_ILLEGAL";
            EErrorCode[EErrorCode["TEMP_BAG_NOT_EMPTY"] = 201] = "TEMP_BAG_NOT_EMPTY";
            EErrorCode[EErrorCode["ITEM_CAN_NOT_USE"] = 202] = "ITEM_CAN_NOT_USE";
            EErrorCode[EErrorCode["CURRENCY_NOT_ENOUGH"] = 203] = "CURRENCY_NOT_ENOUGH";
            EErrorCode[EErrorCode["BAG_IS_FULL"] = 204] = "BAG_IS_FULL";
            EErrorCode[EErrorCode["ITEM_NOT_ENOUGH"] = 205] = "ITEM_NOT_ENOUGH";
            EErrorCode[EErrorCode["ITEM_IN_BAG"] = 206] = "ITEM_IN_BAG";
            EErrorCode[EErrorCode["GENDER_NOT_MATCH"] = 300] = "GENDER_NOT_MATCH";
            EErrorCode[EErrorCode["LEVEL_TOO_LOW"] = 301] = "LEVEL_TOO_LOW";
            EErrorCode[EErrorCode["LEVEL_TOO_HIGH"] = 302] = "LEVEL_TOO_HIGH";
            EErrorCode[EErrorCode["EXCEED_LIMIT"] = 303] = "EXCEED_LIMIT";
            EErrorCode[EErrorCode["OVER_TIME"] = 304] = "OVER_TIME";
            EErrorCode[EErrorCode["SERVER_ERROR"] = 305] = "SERVER_ERROR";
            EErrorCode[EErrorCode["SKILL_NOT_IN_LIST"] = 400] = "SKILL_NOT_IN_LIST";
            EErrorCode[EErrorCode["SKILL_NOT_COOLDOWN"] = 401] = "SKILL_NOT_COOLDOWN";
            EErrorCode[EErrorCode["SKILL_TARGET_NOT_EXIST"] = 402] = "SKILL_TARGET_NOT_EXIST";
            EErrorCode[EErrorCode["SKILL_ANOTHER_CASTING"] = 403] = "SKILL_ANOTHER_CASTING";
            EErrorCode[EErrorCode["SKILL_OUT_OF_DISTANCE"] = 404] = "SKILL_OUT_OF_DISTANCE";
            EErrorCode[EErrorCode["SKILL_TARGET_CAMP_NOT_MATCH"] = 405] = "SKILL_TARGET_CAMP_NOT_MATCH";
            EErrorCode[EErrorCode["SKILL_INVALID_DIRECTION"] = 406] = "SKILL_INVALID_DIRECTION";
            EErrorCode[EErrorCode["SKILL_NOT_IN_SELECT_SHAPE"] = 407] = "SKILL_NOT_IN_SELECT_SHAPE";
            EErrorCode[EErrorCode["SKILL_ENERGY_NOT_ENOUGH"] = 408] = "SKILL_ENERGY_NOT_ENOUGH";
            EErrorCode[EErrorCode["DIALOG_NODE_NOT_CHOOSEN"] = 500] = "DIALOG_NODE_NOT_CHOOSEN";
            EErrorCode[EErrorCode["DIALOG_NOT_FINISH"] = 501] = "DIALOG_NOT_FINISH";
            EErrorCode[EErrorCode["DIALOG_HAS_FINISH"] = 502] = "DIALOG_HAS_FINISH";
            EErrorCode[EErrorCode["QUEST_STAGE_NOT_FINISHED"] = 503] = "QUEST_STAGE_NOT_FINISHED";
            EErrorCode[EErrorCode["QUEST_NOT_DOING"] = 504] = "QUEST_NOT_DOING";
            EErrorCode[EErrorCode["QUEST_STAGE_NOT_DOING"] = 505] = "QUEST_STAGE_NOT_DOING";
            EErrorCode[EErrorCode["QUEST_HAS_ACCEPTED"] = 506] = "QUEST_HAS_ACCEPTED";
            EErrorCode[EErrorCode["MAP_OBJECT_NOT_EXIST"] = 600] = "MAP_OBJECT_NOT_EXIST";
            EErrorCode[EErrorCode["INTERACTION_OBJECT_NOT_SUPPORT_OPERATION"] = 601] = "INTERACTION_OBJECT_NOT_SUPPORT_OPERATION";
            EErrorCode[EErrorCode["HAS_NOT_EQUIP"] = 602] = "HAS_NOT_EQUIP";
            EErrorCode[EErrorCode["HANDHELD_EQUIP_ID_NOT_MATCH"] = 603] = "HANDHELD_EQUIP_ID_NOT_MATCH";
            EErrorCode[EErrorCode["NOT_AVAILABLE_SUIT_ID"] = 604] = "NOT_AVAILABLE_SUIT_ID";
            EErrorCode[EErrorCode["NO_INTERACTION_COMPONENT"] = 605] = "NO_INTERACTION_COMPONENT";
            EErrorCode[EErrorCode["HAS_INTERACTED"] = 606] = "HAS_INTERACTED";
            EErrorCode[EErrorCode["VIALITY_NOT_ENOUGH"] = 607] = "VIALITY_NOT_ENOUGH";
            EErrorCode[EErrorCode["PLAYER_SESSION_NOT_EXIST"] = 608] = "PLAYER_SESSION_NOT_EXIST";
            EErrorCode[EErrorCode["PLAYER_SESSION_WORLD_PLAYER_NOT_INIT"] = 609] = "PLAYER_SESSION_WORLD_PLAYER_NOT_INIT";
            EErrorCode[EErrorCode["MAP_NOT_EXIST"] = 610] = "MAP_NOT_EXIST";
            EErrorCode[EErrorCode["MAIL_TYPE_ERROR"] = 700] = "MAIL_TYPE_ERROR";
            EErrorCode[EErrorCode["MAIL_NOT_EXITST"] = 701] = "MAIL_NOT_EXITST";
            EErrorCode[EErrorCode["MAIL_HAVE_DELETED"] = 702] = "MAIL_HAVE_DELETED";
            EErrorCode[EErrorCode["MAIL_AWARD_HAVE_RECEIVED"] = 703] = "MAIL_AWARD_HAVE_RECEIVED";
            EErrorCode[EErrorCode["MAIL_OPERATE_TYPE_ERROR"] = 704] = "MAIL_OPERATE_TYPE_ERROR";
            EErrorCode[EErrorCode["MAIL_CONDITION_NOT_MEET"] = 705] = "MAIL_CONDITION_NOT_MEET";
            EErrorCode[EErrorCode["MAIL_STATE_ERROR"] = 706] = "MAIL_STATE_ERROR";
            EErrorCode[EErrorCode["MAIL_NO_AWARD"] = 707] = "MAIL_NO_AWARD";
            EErrorCode[EErrorCode["MAIL_BOX_IS_FULL"] = 708] = "MAIL_BOX_IS_FULL";
            EErrorCode[EErrorCode["PROP_SCORE_NOT_BIGGER_THAN"] = 800] = "PROP_SCORE_NOT_BIGGER_THAN";
            EErrorCode[EErrorCode["NOT_WEAR_CLOTHES"] = 801] = "NOT_WEAR_CLOTHES";
            EErrorCode[EErrorCode["NOT_WEAR_SUIT"] = 802] = "NOT_WEAR_SUIT";
            EErrorCode[EErrorCode["SUIT_NOT_UNLOCK"] = 900] = "SUIT_NOT_UNLOCK";
            EErrorCode[EErrorCode["SUIT_COMPONENT_NOT_UNLOCK"] = 901] = "SUIT_COMPONENT_NOT_UNLOCK";
            EErrorCode[EErrorCode["SUIT_STATE_ERROR"] = 902] = "SUIT_STATE_ERROR";
            EErrorCode[EErrorCode["SUIT_COMPONENT_STATE_ERROR"] = 903] = "SUIT_COMPONENT_STATE_ERROR";
            EErrorCode[EErrorCode["SUIT_COMPONENT_NO_NEED_LEARN"] = 904] = "SUIT_COMPONENT_NO_NEED_LEARN";
            EErrorCode[EErrorCode["STORE_NOT_ENABLED"] = 1000] = "STORE_NOT_ENABLED";
            EErrorCode[EErrorCode["SHELF_NOT_ENABLED"] = 1001] = "SHELF_NOT_ENABLED";
            EErrorCode[EErrorCode["GOODS_NOT_ENABLED"] = 1002] = "GOODS_NOT_ENABLED";
            EErrorCode[EErrorCode["GOODS_NOT_IN_CUR_REFRESH"] = 1003] = "GOODS_NOT_IN_CUR_REFRESH";
            EErrorCode[EErrorCode["RETRY"] = 1100] = "RETRY";
            EErrorCode[EErrorCode["NOT_COOLDOWN"] = 1101] = "NOT_COOLDOWN";
            EErrorCode[EErrorCode["SELFIE_UNLOCK"] = 1200] = "SELFIE_UNLOCK";
            EErrorCode[EErrorCode["SELFIE_ALREADY_UNLOCK"] = 1201] = "SELFIE_ALREADY_UNLOCK";
            EErrorCode[EErrorCode["SELFIE_LACK_STARTS"] = 1202] = "SELFIE_LACK_STARTS";
            EErrorCode[EErrorCode["SELFIE_HAD_REWARD"] = 1203] = "SELFIE_HAD_REWARD";
        })(EErrorCode = error.EErrorCode || (error.EErrorCode = {}));
    })(error = cfg.error || (cfg.error = {}));
    let item;
    (function (item) {
        /**
         * 道具品质
         */
        let EItemQuality;
        (function (EItemQuality) {
            /**
             * 白
             */
            EItemQuality[EItemQuality["WHITE"] = 0] = "WHITE";
            /**
             * 绿
             */
            EItemQuality[EItemQuality["GREEN"] = 1] = "GREEN";
            /**
             * 蓝
             */
            EItemQuality[EItemQuality["BLUE"] = 2] = "BLUE";
            /**
             * 紫
             */
            EItemQuality[EItemQuality["PURPLE"] = 3] = "PURPLE";
            /**
             * 金
             */
            EItemQuality[EItemQuality["GOLDEN"] = 4] = "GOLDEN";
        })(EItemQuality = item.EItemQuality || (item.EItemQuality = {}));
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        let ECurrencyType;
        (function (ECurrencyType) {
            /**
             * 钻石
             */
            ECurrencyType[ECurrencyType["DIAMOND"] = 1] = "DIAMOND";
            /**
             * 金币
             */
            ECurrencyType[ECurrencyType["GOLD"] = 2] = "GOLD";
            /**
             * 银币
             */
            ECurrencyType[ECurrencyType["SILVER"] = 3] = "SILVER";
            /**
             * 经验
             */
            ECurrencyType[ECurrencyType["EXP"] = 4] = "EXP";
            /**
             * 能量点
             */
            ECurrencyType[ECurrencyType["POWER_POINT"] = 5] = "POWER_POINT";
        })(ECurrencyType = item.ECurrencyType || (item.ECurrencyType = {}));
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        let EMajorType;
        (function (EMajorType) {
            /**
             * 货币
             */
            EMajorType[EMajorType["CURRENCY"] = 1] = "CURRENCY";
            /**
             * 服装
             */
            EMajorType[EMajorType["CLOTH"] = 2] = "CLOTH";
            /**
             * 任务
             */
            EMajorType[EMajorType["QUEST"] = 3] = "QUEST";
            /**
             * 消耗品
             */
            EMajorType[EMajorType["CONSUMABLES"] = 4] = "CONSUMABLES";
            /**
             * 宝箱
             */
            EMajorType[EMajorType["TREASURE_BOX"] = 5] = "TREASURE_BOX";
            /**
             * 成就和称谓
             */
            EMajorType[EMajorType["ACHIEVEMENT_AND_TITLE"] = 6] = "ACHIEVEMENT_AND_TITLE";
            /**
             * 头像框
             */
            EMajorType[EMajorType["HEAD_FRAME"] = 7] = "HEAD_FRAME";
            /**
             * 语音
             */
            EMajorType[EMajorType["VOICE"] = 8] = "VOICE";
            /**
             * 动作
             */
            EMajorType[EMajorType["ACTION"] = 9] = "ACTION";
            /**
             * 扩容道具
             */
            EMajorType[EMajorType["EXPANSION"] = 10] = "EXPANSION";
            /**
             * 制作材料
             */
            EMajorType[EMajorType["MATERIAL"] = 11] = "MATERIAL";
        })(EMajorType = item.EMajorType || (item.EMajorType = {}));
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        let EMinorType;
        (function (EMinorType) {
            /**
             * 钻石
             */
            EMinorType[EMinorType["DIAMOND"] = 101] = "DIAMOND";
            /**
             * 金币
             */
            EMinorType[EMinorType["GOLD"] = 102] = "GOLD";
            /**
             * 银币
             */
            EMinorType[EMinorType["SILVER"] = 103] = "SILVER";
            /**
             * 经验
             */
            EMinorType[EMinorType["EXP"] = 104] = "EXP";
            /**
             * 能量点
             */
            EMinorType[EMinorType["POWER_POINT"] = 105] = "POWER_POINT";
            /**
             * 发型
             */
            EMinorType[EMinorType["HAIR_STYLE"] = 210] = "HAIR_STYLE";
            /**
             * 外套
             */
            EMinorType[EMinorType["COAT"] = 220] = "COAT";
            /**
             * 上衣
             */
            EMinorType[EMinorType["UPPER_JACKET"] = 230] = "UPPER_JACKET";
            /**
             * 裤子
             */
            EMinorType[EMinorType["TROUSERS"] = 241] = "TROUSERS";
            /**
             * 裙子
             */
            EMinorType[EMinorType["SKIRT"] = 242] = "SKIRT";
            /**
             * 袜子
             */
            EMinorType[EMinorType["SOCKS"] = 250] = "SOCKS";
            /**
             * 鞋子
             */
            EMinorType[EMinorType["SHOES"] = 260] = "SHOES";
            /**
             * 发饰
             */
            EMinorType[EMinorType["HAIR_ACCESSORY"] = 271] = "HAIR_ACCESSORY";
            /**
             * 帽子
             */
            EMinorType[EMinorType["HAT"] = 272] = "HAT";
            /**
             * 耳饰
             */
            EMinorType[EMinorType["EARRING"] = 273] = "EARRING";
            /**
             * 颈饰
             */
            EMinorType[EMinorType["NECKLACE"] = 274] = "NECKLACE";
            /**
             * 腕饰
             */
            EMinorType[EMinorType["BRACELET"] = 275] = "BRACELET";
            /**
             * 发箍
             */
            EMinorType[EMinorType["HAIR_CLASP"] = 276] = "HAIR_CLASP";
            /**
             * 手套
             */
            EMinorType[EMinorType["GLOVE"] = 277] = "GLOVE";
            /**
             * 手持物
             */
            EMinorType[EMinorType["HANDHELD_OBJECT"] = 278] = "HANDHELD_OBJECT";
            /**
             * 特殊
             */
            EMinorType[EMinorType["SPECIAL"] = 279] = "SPECIAL";
            /**
             * 底妆
             */
            EMinorType[EMinorType["BASE_COSMETIC"] = 281] = "BASE_COSMETIC";
            /**
             * 眉妆
             */
            EMinorType[EMinorType["EYEBROW_COSMETIC"] = 282] = "EYEBROW_COSMETIC";
            /**
             * 睫毛
             */
            EMinorType[EMinorType["EYELASH"] = 283] = "EYELASH";
            /**
             * 美瞳
             */
            EMinorType[EMinorType["COSMETIC_CONTACT_LENSES"] = 284] = "COSMETIC_CONTACT_LENSES";
            /**
             * 唇妆
             */
            EMinorType[EMinorType["LIP_COSMETIC"] = 285] = "LIP_COSMETIC";
            /**
             * 肤色
             */
            EMinorType[EMinorType["SKIN_COLOR"] = 286] = "SKIN_COLOR";
            /**
             * 连衣裙
             */
            EMinorType[EMinorType["ONE_PIECE_DRESS"] = 290] = "ONE_PIECE_DRESS";
            /**
             * 换装场景
             */
            EMinorType[EMinorType["SWITCH_CLOTHES_SCENE"] = 291] = "SWITCH_CLOTHES_SCENE";
            /**
             * 任务道具
             */
            EMinorType[EMinorType["QUEST"] = 301] = "QUEST";
            /**
             * 投掷物
             */
            EMinorType[EMinorType["CAST"] = 401] = "CAST";
            /**
             * 刀剑
             */
            EMinorType[EMinorType["SWORD"] = 421] = "SWORD";
            /**
             * 弓箭
             */
            EMinorType[EMinorType["BOW_ARROW"] = 422] = "BOW_ARROW";
            /**
             * 法杖
             */
            EMinorType[EMinorType["WANDS"] = 423] = "WANDS";
            /**
             * 特殊工具
             */
            EMinorType[EMinorType["SPECIAL_TOOL"] = 424] = "SPECIAL_TOOL";
            /**
             * 食物
             */
            EMinorType[EMinorType["FOOD"] = 403] = "FOOD";
            /**
             * 宝箱
             */
            EMinorType[EMinorType["TREASURE_BOX"] = 501] = "TREASURE_BOX";
            /**
             * 钥匙
             */
            EMinorType[EMinorType["KEY"] = 502] = "KEY";
            /**
             * 多选一宝箱
             */
            EMinorType[EMinorType["MULTI_CHOOSE_TREASURE_BOX"] = 503] = "MULTI_CHOOSE_TREASURE_BOX";
            /**
             * 成就相关
             */
            EMinorType[EMinorType["ACHIEVEMENT"] = 601] = "ACHIEVEMENT";
            /**
             * 称谓相关
             */
            EMinorType[EMinorType["TITLE"] = 602] = "TITLE";
            /**
             * 头像框
             */
            EMinorType[EMinorType["AVATAR_FRAME"] = 701] = "AVATAR_FRAME";
            /**
             * 语音
             */
            EMinorType[EMinorType["VOICE"] = 801] = "VOICE";
            /**
             * 特殊待机动作
             */
            EMinorType[EMinorType["IDLE_POSE"] = 901] = "IDLE_POSE";
            /**
             * 拍照动作
             */
            EMinorType[EMinorType["PHOTO_POSE"] = 902] = "PHOTO_POSE";
            /**
             * 背包
             */
            EMinorType[EMinorType["BAG"] = 1001] = "BAG";
            /**
             * 好友数量
             */
            EMinorType[EMinorType["FRIEND_CAPACITY"] = 1002] = "FRIEND_CAPACITY";
            /**
             * 制作材料
             */
            EMinorType[EMinorType["CONSTRUCTION_MATERIAL"] = 1101] = "CONSTRUCTION_MATERIAL";
            /**
             * 设计图纸
             */
            EMinorType[EMinorType["DESIGN_DRAWING"] = 1102] = "DESIGN_DRAWING";
        })(EMinorType = item.EMinorType || (item.EMinorType = {}));
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        let EClothersStarQualityType;
        (function (EClothersStarQualityType) {
            /**
             * 一星
             */
            EClothersStarQualityType[EClothersStarQualityType["ONE"] = 1] = "ONE";
            /**
             * 二星
             */
            EClothersStarQualityType[EClothersStarQualityType["TWO"] = 2] = "TWO";
            /**
             * 三星
             */
            EClothersStarQualityType[EClothersStarQualityType["THREE"] = 3] = "THREE";
            /**
             * 四星
             */
            EClothersStarQualityType[EClothersStarQualityType["FOUR"] = 4] = "FOUR";
            /**
             * 五星
             */
            EClothersStarQualityType[EClothersStarQualityType["FIVE"] = 5] = "FIVE";
            /**
             * 六星
             */
            EClothersStarQualityType[EClothersStarQualityType["SIX"] = 6] = "SIX";
            /**
             * 七星
             */
            EClothersStarQualityType[EClothersStarQualityType["SEVEN"] = 7] = "SEVEN";
            /**
             * 八星
             */
            EClothersStarQualityType[EClothersStarQualityType["EIGHT"] = 8] = "EIGHT";
            /**
             * 九星
             */
            EClothersStarQualityType[EClothersStarQualityType["NINE"] = 9] = "NINE";
            /**
             * 十星
             */
            EClothersStarQualityType[EClothersStarQualityType["TEN"] = 10] = "TEN";
        })(EClothersStarQualityType = item.EClothersStarQualityType || (item.EClothersStarQualityType = {}));
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        let EClothersTag;
        (function (EClothersTag) {
            /**
             * 防晒
             */
            EClothersTag[EClothersTag["FANG_SHAI"] = 1] = "FANG_SHAI";
            /**
             * 舞者
             */
            EClothersTag[EClothersTag["WU_ZHE"] = 2] = "WU_ZHE";
        })(EClothersTag = item.EClothersTag || (item.EClothersTag = {}));
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        let EUseType;
        (function (EUseType) {
            /**
             * 手动
             */
            EUseType[EUseType["MANUAL"] = 0] = "MANUAL";
            /**
             * 自动
             */
            EUseType[EUseType["AUTO"] = 1] = "AUTO";
        })(EUseType = item.EUseType || (item.EUseType = {}));
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        let EClothesHidePartType;
        (function (EClothesHidePartType) {
            /**
             * 胸部
             */
            EClothesHidePartType[EClothesHidePartType["CHEST"] = 0] = "CHEST";
            /**
             * 手
             */
            EClothesHidePartType[EClothesHidePartType["HEAD"] = 1] = "HEAD";
            /**
             * 脊柱上
             */
            EClothesHidePartType[EClothesHidePartType["SPINE_UPPER"] = 2] = "SPINE_UPPER";
            /**
             * 脊柱下
             */
            EClothesHidePartType[EClothesHidePartType["SPINE_LOWER"] = 3] = "SPINE_LOWER";
            /**
             * 臀部
             */
            EClothesHidePartType[EClothesHidePartType["HIP"] = 4] = "HIP";
            /**
             * 腿上
             */
            EClothesHidePartType[EClothesHidePartType["LEG_UPPER"] = 5] = "LEG_UPPER";
            /**
             * 腿中
             */
            EClothesHidePartType[EClothesHidePartType["LEG_MIDDLE"] = 6] = "LEG_MIDDLE";
            /**
             * 腿下
             */
            EClothesHidePartType[EClothesHidePartType["LEG_LOWER"] = 7] = "LEG_LOWER";
        })(EClothesHidePartType = item.EClothesHidePartType || (item.EClothesHidePartType = {}));
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        let EClothesPropertyType;
        (function (EClothesPropertyType) {
            /**
             * 简约
             */
            EClothesPropertyType[EClothesPropertyType["JIAN_YUE"] = 1] = "JIAN_YUE";
            /**
             * 华丽
             */
            EClothesPropertyType[EClothesPropertyType["HUA_LI"] = 2] = "HUA_LI";
            /**
             * 可爱
             */
            EClothesPropertyType[EClothesPropertyType["KE_AI"] = 3] = "KE_AI";
            /**
             * 成熟
             */
            EClothesPropertyType[EClothesPropertyType["CHENG_SHU"] = 4] = "CHENG_SHU";
            /**
             * 活泼
             */
            EClothesPropertyType[EClothesPropertyType["HUO_PO"] = 5] = "HUO_PO";
            /**
             * 优雅
             */
            EClothesPropertyType[EClothesPropertyType["YOU_YA"] = 6] = "YOU_YA";
            /**
             * 清纯
             */
            EClothesPropertyType[EClothesPropertyType["QING_CHUN"] = 7] = "QING_CHUN";
            /**
             * 性感
             */
            EClothesPropertyType[EClothesPropertyType["XING_GAN"] = 8] = "XING_GAN";
            /**
             * 清凉
             */
            EClothesPropertyType[EClothesPropertyType["QING_LIANG"] = 9] = "QING_LIANG";
            /**
             * 保暖
             */
            EClothesPropertyType[EClothesPropertyType["BAO_NUAN"] = 10] = "BAO_NUAN";
        })(EClothesPropertyType = item.EClothesPropertyType || (item.EClothesPropertyType = {}));
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        let EItemFunctionType;
        (function (EItemFunctionType) {
            /**
             * 更换手持物
             */
            EItemFunctionType[EItemFunctionType["REPLACE_HANDHELD"] = 0] = "REPLACE_HANDHELD";
            /**
             * 使用设计图纸
             */
            EItemFunctionType[EItemFunctionType["USE_DESIGN_DRAWING"] = 1] = "USE_DESIGN_DRAWING";
        })(EItemFunctionType = item.EItemFunctionType || (item.EItemFunctionType = {}));
    })(item = cfg.item || (cfg.item = {}));
    let limit;
    (function (limit) {
        let ENamespace;
        (function (ENamespace) {
            ENamespace[ENamespace["ITEM_DAILY_OBTAIN"] = 1] = "ITEM_DAILY_OBTAIN";
            ENamespace[ENamespace["TREASURE_DAILY_USE"] = 2] = "TREASURE_DAILY_USE";
            ENamespace[ENamespace["STORE_GOODS_LIMIT_BUY"] = 3] = "STORE_GOODS_LIMIT_BUY";
        })(ENamespace = limit.ENamespace || (limit.ENamespace = {}));
    })(limit = cfg.limit || (cfg.limit = {}));
    let mail;
    (function (mail) {
        let EMailType;
        (function (EMailType) {
            /**
             * 全局邮件
             */
            EMailType[EMailType["GLOBAL"] = 0] = "GLOBAL";
            /**
             * 系统邮件
             */
            EMailType[EMailType["SYSTEM"] = 1] = "SYSTEM";
        })(EMailType = mail.EMailType || (mail.EMailType = {}));
    })(mail = cfg.mail || (cfg.mail = {}));
    (function (role) {
        let EGenderType;
        (function (EGenderType) {
            /**
             * 男
             */
            EGenderType[EGenderType["MALE"] = 1] = "MALE";
            /**
             * 女
             */
            EGenderType[EGenderType["FEMALE"] = 2] = "FEMALE";
        })(EGenderType = role.EGenderType || (role.EGenderType = {}));
    })(role = cfg.role || (cfg.role = {}));
    (function (role) {
        let EProfession;
        (function (EProfession) {
            EProfession[EProfession["TEST_PROFESSION"] = 1] = "TEST_PROFESSION";
        })(EProfession = role.EProfession || (role.EProfession = {}));
    })(role = cfg.role || (cfg.role = {}));
    (function (test) {
        let DemoEnum;
        (function (DemoEnum) {
            /**
             * aa
             */
            DemoEnum[DemoEnum["A"] = 1] = "A";
            /**
             * bb
             */
            DemoEnum[DemoEnum["B"] = 2] = "B";
            /**
             * cc
             */
            DemoEnum[DemoEnum["C"] = 4] = "C";
            /**
             * dd
             */
            DemoEnum[DemoEnum["D"] = 5] = "D";
        })(DemoEnum = test.DemoEnum || (test.DemoEnum = {}));
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        let ETestUeType;
        (function (ETestUeType) {
            /**
             * 白
             */
            ETestUeType[ETestUeType["WHITE"] = 0] = "WHITE";
            ETestUeType[ETestUeType["BLACK"] = 1] = "BLACK";
        })(ETestUeType = test.ETestUeType || (test.ETestUeType = {}));
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        let ETestEmptyEnum;
        (function (ETestEmptyEnum) {
        })(ETestEmptyEnum = test.ETestEmptyEnum || (test.ETestEmptyEnum = {}));
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        let ETestEmptyEnum2;
        (function (ETestEmptyEnum2) {
            ETestEmptyEnum2[ETestEmptyEnum2["SMALL_THAN_256"] = 255] = "SMALL_THAN_256";
            ETestEmptyEnum2[ETestEmptyEnum2["X_256"] = 256] = "X_256";
            ETestEmptyEnum2[ETestEmptyEnum2["X_257"] = 257] = "X_257";
        })(ETestEmptyEnum2 = test.ETestEmptyEnum2 || (test.ETestEmptyEnum2 = {}));
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        let ETestQuality;
        (function (ETestQuality) {
            /**
             * 最高品质
             */
            ETestQuality[ETestQuality["A"] = 1] = "A";
            /**
             * 黑色的
             */
            ETestQuality[ETestQuality["B"] = 2] = "B";
            /**
             * 蓝色的
             */
            ETestQuality[ETestQuality["C"] = 3] = "C";
            /**
             * 最差品质
             */
            ETestQuality[ETestQuality["D"] = 4] = "D";
        })(ETestQuality = test.ETestQuality || (test.ETestQuality = {}));
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        let ETestCurrency;
        (function (ETestCurrency) {
            /**
             * 重要
             */
            ETestCurrency[ETestCurrency["DIAMOND"] = 1] = "DIAMOND";
            /**
             * 有用
             */
            ETestCurrency[ETestCurrency["GOLD"] = 2] = "GOLD";
        })(ETestCurrency = test.ETestCurrency || (test.ETestCurrency = {}));
    })(test = cfg.test || (cfg.test = {}));
    (function (ai) {
        class TbBlackboard {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new ai.Blackboard(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.name, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        ai.TbBlackboard = TbBlackboard;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class Blackboard {
            constructor(_buf_) {
                this.name = _buf_.ReadString();
                this.desc = _buf_.ReadString();
                this.parentName = _buf_.ReadString();
                {
                    this.keys = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = new ai.BlackboardKey(_buf_);
                        this.keys.push(_e);
                    }
                }
            }
            name;
            desc;
            parentName;
            parentName_Ref = undefined;
            keys;
            resolve(_tables) {
                this.parentName_Ref = _tables.get('ai.TbBlackboard').get(this.parentName);
                for (let _e of this.keys) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        ai.Blackboard = Blackboard;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class BlackboardKey {
            constructor(_buf_) {
                this.name = _buf_.ReadString();
                this.desc = _buf_.ReadString();
                this.isStatic = _buf_.ReadBool();
                this.type = _buf_.ReadInt();
                this.typeClassName = _buf_.ReadString();
            }
            name;
            desc;
            isStatic;
            type;
            typeClassName;
            resolve(_tables) {
            }
        }
        ai.BlackboardKey = BlackboardKey;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class TbBehaviorTree {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new ai.BehaviorTree(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        ai.TbBehaviorTree = TbBehaviorTree;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class BehaviorTree {
            constructor(_buf_) {
                this.id = _buf_.ReadInt();
                this.name = _buf_.ReadString();
                this.desc = _buf_.ReadString();
                this.blackboardId = _buf_.ReadString();
                this.root = ai.ComposeNode.constructorFrom(_buf_);
            }
            id;
            name;
            desc;
            blackboardId;
            blackboardId_Ref = undefined;
            root;
            resolve(_tables) {
                this.blackboardId_Ref = _tables.get('ai.TbBlackboard').get(this.blackboardId);
                if (this.root != null) {
                    this.root.resolve(_tables);
                }
            }
        }
        ai.BehaviorTree = BehaviorTree;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class Node {
            static constructorFrom(_buf_) {
                switch (_buf_.ReadInt()) {
                    case 1812449155: return new ai.UeSetDefaultFocus(_buf_);
                    case 990693812: return new ai.ExecuteTimeStatistic(_buf_);
                    case 1601247918: return new ai.ChooseTarget(_buf_);
                    case 1195270745: return new ai.KeepFaceTarget(_buf_);
                    case -999247644: return new ai.GetOwnerPlayer(_buf_);
                    case -61887372: return new ai.UpdateDailyBehaviorProps(_buf_);
                    case -513308166: return new ai.UeLoop(_buf_);
                    case -951439423: return new ai.UeCooldown(_buf_);
                    case 338469720: return new ai.UeTimeLimit(_buf_);
                    case -315297507: return new ai.UeBlackboard(_buf_);
                    case 195054574: return new ai.UeForceSuccess(_buf_);
                    case 1255972344: return new ai.IsAtLocation(_buf_);
                    case -1207170283: return new ai.DistanceLessThan(_buf_);
                    case -1789006105: return new ai.Sequence(_buf_);
                    case -1946981627: return new ai.Selector(_buf_);
                    case -1952582529: return new ai.SimpleParallel(_buf_);
                    case -512994101: return new ai.UeWait(_buf_);
                    case 1215378271: return new ai.UeWaitBlackboardTime(_buf_);
                    case 514987779: return new ai.MoveToTarget(_buf_);
                    case -918812268: return new ai.ChooseSkill(_buf_);
                    case -2140042998: return new ai.MoveToRandomLocation(_buf_);
                    case -969953113: return new ai.MoveToLocation(_buf_);
                    case 1357409728: return new ai.DebugPrint(_buf_);
                    default: throw new Error();
                }
            }
            constructor(_buf_) {
                this.id = _buf_.ReadInt();
                this.nodeName = _buf_.ReadString();
            }
            id;
            nodeName;
            resolve(_tables) {
            }
        }
        ai.Node = Node;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class Service extends ai.Node {
            static constructorFrom(_buf_) {
                switch (_buf_.ReadInt()) {
                    case 1812449155: return new ai.UeSetDefaultFocus(_buf_);
                    case 990693812: return new ai.ExecuteTimeStatistic(_buf_);
                    case 1601247918: return new ai.ChooseTarget(_buf_);
                    case 1195270745: return new ai.KeepFaceTarget(_buf_);
                    case -999247644: return new ai.GetOwnerPlayer(_buf_);
                    case -61887372: return new ai.UpdateDailyBehaviorProps(_buf_);
                    default: throw new Error();
                }
            }
            constructor(_buf_) {
                super(_buf_);
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.Service = Service;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class UeSetDefaultFocus extends ai.Service {
            constructor(_buf_) {
                super(_buf_);
                this.keyboardKey = _buf_.ReadString();
            }
            keyboardKey;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.UeSetDefaultFocus = UeSetDefaultFocus;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class ExecuteTimeStatistic extends ai.Service {
            constructor(_buf_) {
                super(_buf_);
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.ExecuteTimeStatistic = ExecuteTimeStatistic;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class ChooseTarget extends ai.Service {
            constructor(_buf_) {
                super(_buf_);
                this.resultTargetKey = _buf_.ReadString();
            }
            resultTargetKey;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.ChooseTarget = ChooseTarget;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class KeepFaceTarget extends ai.Service {
            constructor(_buf_) {
                super(_buf_);
                this.targetActorKey = _buf_.ReadString();
            }
            targetActorKey;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.KeepFaceTarget = KeepFaceTarget;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class GetOwnerPlayer extends ai.Service {
            constructor(_buf_) {
                super(_buf_);
                this.playerActorKey = _buf_.ReadString();
            }
            playerActorKey;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.GetOwnerPlayer = GetOwnerPlayer;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class UpdateDailyBehaviorProps extends ai.Service {
            constructor(_buf_) {
                super(_buf_);
                this.satietyKey = _buf_.ReadString();
                this.energyKey = _buf_.ReadString();
                this.moodKey = _buf_.ReadString();
                this.satietyLowerThresholdKey = _buf_.ReadString();
                this.satietyUpperThresholdKey = _buf_.ReadString();
                this.energyLowerThresholdKey = _buf_.ReadString();
                this.energyUpperThresholdKey = _buf_.ReadString();
                this.moodLowerThresholdKey = _buf_.ReadString();
                this.moodUpperThresholdKey = _buf_.ReadString();
            }
            satietyKey;
            energyKey;
            moodKey;
            satietyLowerThresholdKey;
            satietyUpperThresholdKey;
            energyLowerThresholdKey;
            energyUpperThresholdKey;
            moodLowerThresholdKey;
            moodUpperThresholdKey;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.UpdateDailyBehaviorProps = UpdateDailyBehaviorProps;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class Decorator extends ai.Node {
            static constructorFrom(_buf_) {
                switch (_buf_.ReadInt()) {
                    case -513308166: return new ai.UeLoop(_buf_);
                    case -951439423: return new ai.UeCooldown(_buf_);
                    case 338469720: return new ai.UeTimeLimit(_buf_);
                    case -315297507: return new ai.UeBlackboard(_buf_);
                    case 195054574: return new ai.UeForceSuccess(_buf_);
                    case 1255972344: return new ai.IsAtLocation(_buf_);
                    case -1207170283: return new ai.DistanceLessThan(_buf_);
                    default: throw new Error();
                }
            }
            constructor(_buf_) {
                super(_buf_);
                this.flowAbortMode = _buf_.ReadInt();
            }
            flowAbortMode;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.Decorator = Decorator;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class UeLoop extends ai.Decorator {
            constructor(_buf_) {
                super(_buf_);
                this.numLoops = _buf_.ReadInt();
                this.infiniteLoop = _buf_.ReadBool();
                this.infiniteLoopTimeoutTime = _buf_.ReadFloat();
            }
            numLoops;
            infiniteLoop;
            infiniteLoopTimeoutTime;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.UeLoop = UeLoop;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class UeCooldown extends ai.Decorator {
            constructor(_buf_) {
                super(_buf_);
                this.cooldownTime = _buf_.ReadFloat();
            }
            cooldownTime;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.UeCooldown = UeCooldown;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class UeTimeLimit extends ai.Decorator {
            constructor(_buf_) {
                super(_buf_);
                this.limitTime = _buf_.ReadFloat();
            }
            limitTime;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.UeTimeLimit = UeTimeLimit;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class UeBlackboard extends ai.Decorator {
            constructor(_buf_) {
                super(_buf_);
                this.notifyObserver = _buf_.ReadInt();
                this.blackboardKey = _buf_.ReadString();
                this.keyQuery = ai.KeyQueryOperator.constructorFrom(_buf_);
            }
            notifyObserver;
            blackboardKey;
            keyQuery;
            resolve(_tables) {
                super.resolve(_tables);
                if (this.keyQuery != null) {
                    this.keyQuery.resolve(_tables);
                }
            }
        }
        ai.UeBlackboard = UeBlackboard;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class KeyQueryOperator {
            static constructorFrom(_buf_) {
                switch (_buf_.ReadInt()) {
                    case 1635350898: return new ai.IsSet(_buf_);
                    case 790736255: return new ai.IsNotSet(_buf_);
                    case -979891605: return new ai.BinaryOperator(_buf_);
                    default: throw new Error();
                }
            }
            constructor(_buf_) {
            }
            resolve(_tables) {
            }
        }
        ai.KeyQueryOperator = KeyQueryOperator;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class IsSet extends ai.KeyQueryOperator {
            constructor(_buf_) {
                super(_buf_);
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.IsSet = IsSet;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class IsNotSet extends ai.KeyQueryOperator {
            constructor(_buf_) {
                super(_buf_);
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.IsNotSet = IsNotSet;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class BinaryOperator extends ai.KeyQueryOperator {
            constructor(_buf_) {
                super(_buf_);
                this.oper = _buf_.ReadInt();
                this.data = ai.KeyData.constructorFrom(_buf_);
            }
            oper;
            data;
            resolve(_tables) {
                super.resolve(_tables);
                if (this.data != null) {
                    this.data.resolve(_tables);
                }
            }
        }
        ai.BinaryOperator = BinaryOperator;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class KeyData {
            static constructorFrom(_buf_) {
                switch (_buf_.ReadInt()) {
                    case -719747885: return new ai.FloatKeyData(_buf_);
                    case -342751904: return new ai.IntKeyData(_buf_);
                    case -307888654: return new ai.StringKeyData(_buf_);
                    case 1517269500: return new ai.BlackboardKeyData(_buf_);
                    default: throw new Error();
                }
            }
            constructor(_buf_) {
            }
            resolve(_tables) {
            }
        }
        ai.KeyData = KeyData;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class FloatKeyData extends ai.KeyData {
            constructor(_buf_) {
                super(_buf_);
                this.value = _buf_.ReadFloat();
            }
            value;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.FloatKeyData = FloatKeyData;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class IntKeyData extends ai.KeyData {
            constructor(_buf_) {
                super(_buf_);
                this.value = _buf_.ReadInt();
            }
            value;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.IntKeyData = IntKeyData;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class StringKeyData extends ai.KeyData {
            constructor(_buf_) {
                super(_buf_);
                this.value = _buf_.ReadString();
            }
            value;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.StringKeyData = StringKeyData;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class BlackboardKeyData extends ai.KeyData {
            constructor(_buf_) {
                super(_buf_);
                this.value = _buf_.ReadString();
            }
            value;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.BlackboardKeyData = BlackboardKeyData;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class UeForceSuccess extends ai.Decorator {
            constructor(_buf_) {
                super(_buf_);
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.UeForceSuccess = UeForceSuccess;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class IsAtLocation extends ai.Decorator {
            constructor(_buf_) {
                super(_buf_);
                this.acceptableRadius = _buf_.ReadFloat();
                this.keyboardKey = _buf_.ReadString();
                this.inverseCondition = _buf_.ReadBool();
            }
            acceptableRadius;
            keyboardKey;
            inverseCondition;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.IsAtLocation = IsAtLocation;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class DistanceLessThan extends ai.Decorator {
            constructor(_buf_) {
                super(_buf_);
                this.actor1Key = _buf_.ReadString();
                this.actor2Key = _buf_.ReadString();
                this.distance = _buf_.ReadFloat();
                this.reverseResult = _buf_.ReadBool();
            }
            actor1Key;
            actor2Key;
            distance;
            reverseResult;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.DistanceLessThan = DistanceLessThan;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class FlowNode extends ai.Node {
            static constructorFrom(_buf_) {
                switch (_buf_.ReadInt()) {
                    case -1789006105: return new ai.Sequence(_buf_);
                    case -1946981627: return new ai.Selector(_buf_);
                    case -1952582529: return new ai.SimpleParallel(_buf_);
                    case -512994101: return new ai.UeWait(_buf_);
                    case 1215378271: return new ai.UeWaitBlackboardTime(_buf_);
                    case 514987779: return new ai.MoveToTarget(_buf_);
                    case -918812268: return new ai.ChooseSkill(_buf_);
                    case -2140042998: return new ai.MoveToRandomLocation(_buf_);
                    case -969953113: return new ai.MoveToLocation(_buf_);
                    case 1357409728: return new ai.DebugPrint(_buf_);
                    default: throw new Error();
                }
            }
            constructor(_buf_) {
                super(_buf_);
                {
                    this.decorators = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = ai.Decorator.constructorFrom(_buf_);
                        this.decorators.push(_e);
                    }
                }
                {
                    this.services = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = ai.Service.constructorFrom(_buf_);
                        this.services.push(_e);
                    }
                }
            }
            decorators;
            services;
            resolve(_tables) {
                super.resolve(_tables);
                for (let _e of this.decorators) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
                for (let _e of this.services) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        ai.FlowNode = FlowNode;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class ComposeNode extends ai.FlowNode {
            static constructorFrom(_buf_) {
                switch (_buf_.ReadInt()) {
                    case -1789006105: return new ai.Sequence(_buf_);
                    case -1946981627: return new ai.Selector(_buf_);
                    case -1952582529: return new ai.SimpleParallel(_buf_);
                    default: throw new Error();
                }
            }
            constructor(_buf_) {
                super(_buf_);
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.ComposeNode = ComposeNode;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class Sequence extends ai.ComposeNode {
            constructor(_buf_) {
                super(_buf_);
                {
                    this.children = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = ai.FlowNode.constructorFrom(_buf_);
                        this.children.push(_e);
                    }
                }
            }
            children;
            resolve(_tables) {
                super.resolve(_tables);
                for (let _e of this.children) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        ai.Sequence = Sequence;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class Selector extends ai.ComposeNode {
            constructor(_buf_) {
                super(_buf_);
                {
                    this.children = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = ai.FlowNode.constructorFrom(_buf_);
                        this.children.push(_e);
                    }
                }
            }
            children;
            resolve(_tables) {
                super.resolve(_tables);
                for (let _e of this.children) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        ai.Selector = Selector;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class SimpleParallel extends ai.ComposeNode {
            constructor(_buf_) {
                super(_buf_);
                this.finishMode = _buf_.ReadInt();
                this.mainTask = ai.Task.constructorFrom(_buf_);
                this.backgroundNode = ai.FlowNode.constructorFrom(_buf_);
            }
            finishMode;
            mainTask;
            backgroundNode;
            resolve(_tables) {
                super.resolve(_tables);
                if (this.mainTask != null) {
                    this.mainTask.resolve(_tables);
                }
                if (this.backgroundNode != null) {
                    this.backgroundNode.resolve(_tables);
                }
            }
        }
        ai.SimpleParallel = SimpleParallel;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class Task extends ai.FlowNode {
            static constructorFrom(_buf_) {
                switch (_buf_.ReadInt()) {
                    case -512994101: return new ai.UeWait(_buf_);
                    case 1215378271: return new ai.UeWaitBlackboardTime(_buf_);
                    case 514987779: return new ai.MoveToTarget(_buf_);
                    case -918812268: return new ai.ChooseSkill(_buf_);
                    case -2140042998: return new ai.MoveToRandomLocation(_buf_);
                    case -969953113: return new ai.MoveToLocation(_buf_);
                    case 1357409728: return new ai.DebugPrint(_buf_);
                    default: throw new Error();
                }
            }
            constructor(_buf_) {
                super(_buf_);
                this.ignoreRestartSelf = _buf_.ReadBool();
            }
            ignoreRestartSelf;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.Task = Task;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class UeWait extends ai.Task {
            constructor(_buf_) {
                super(_buf_);
                this.waitTime = _buf_.ReadFloat();
                this.randomDeviation = _buf_.ReadFloat();
            }
            waitTime;
            randomDeviation;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.UeWait = UeWait;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class UeWaitBlackboardTime extends ai.Task {
            constructor(_buf_) {
                super(_buf_);
                this.blackboardKey = _buf_.ReadString();
            }
            blackboardKey;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.UeWaitBlackboardTime = UeWaitBlackboardTime;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class MoveToTarget extends ai.Task {
            constructor(_buf_) {
                super(_buf_);
                this.targetActorKey = _buf_.ReadString();
                this.acceptableRadius = _buf_.ReadFloat();
            }
            targetActorKey;
            acceptableRadius;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.MoveToTarget = MoveToTarget;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class ChooseSkill extends ai.Task {
            constructor(_buf_) {
                super(_buf_);
                this.targetActorKey = _buf_.ReadString();
                this.resultSkillIdKey = _buf_.ReadString();
            }
            targetActorKey;
            resultSkillIdKey;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.ChooseSkill = ChooseSkill;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class MoveToRandomLocation extends ai.Task {
            constructor(_buf_) {
                super(_buf_);
                this.originPositionKey = _buf_.ReadString();
                this.radius = _buf_.ReadFloat();
            }
            originPositionKey;
            radius;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.MoveToRandomLocation = MoveToRandomLocation;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class MoveToLocation extends ai.Task {
            constructor(_buf_) {
                super(_buf_);
                this.location = Vector3.deserializeFrom(_buf_);
                this.acceptableRadius = _buf_.ReadFloat();
            }
            location;
            acceptableRadius;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.MoveToLocation = MoveToLocation;
    })(ai = cfg.ai || (cfg.ai = {}));
    (function (ai) {
        class DebugPrint extends ai.Task {
            constructor(_buf_) {
                super(_buf_);
                this.text = _buf_.ReadString();
            }
            text;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        ai.DebugPrint = DebugPrint;
    })(ai = cfg.ai || (cfg.ai = {}));
    let blueprint;
    (function (blueprint) {
        class TbClazz {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = blueprint.Clazz.constructorFrom(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.name, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        blueprint.TbClazz = TbClazz;
    })(blueprint = cfg.blueprint || (cfg.blueprint = {}));
    (function (blueprint) {
        class Clazz {
            static constructorFrom(_buf_) {
                switch (_buf_.ReadInt()) {
                    case 2114170750: return new blueprint.Interface(_buf_);
                    case -2073576778: return new blueprint.NormalClazz(_buf_);
                    case 1827364892: return new blueprint.EnumClazz(_buf_);
                    default: throw new Error();
                }
            }
            constructor(_buf_) {
                this.name = _buf_.ReadString();
                this.desc = _buf_.ReadString();
                {
                    this.parents = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = blueprint.Clazz.constructorFrom(_buf_);
                        this.parents.push(_e);
                    }
                }
                {
                    this.methods = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = blueprint.Method.constructorFrom(_buf_);
                        this.methods.push(_e);
                    }
                }
            }
            name;
            desc;
            parents;
            methods;
            resolve(_tables) {
                for (let _e of this.parents) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
                for (let _e of this.methods) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        blueprint.Clazz = Clazz;
    })(blueprint = cfg.blueprint || (cfg.blueprint = {}));
    (function (blueprint) {
        class Method {
            static constructorFrom(_buf_) {
                switch (_buf_.ReadInt()) {
                    case -392137809: return new blueprint.AbstraceMethod(_buf_);
                    case 1739079015: return new blueprint.ExternalMethod(_buf_);
                    case -696408103: return new blueprint.BlueprintMethod(_buf_);
                    default: throw new Error();
                }
            }
            constructor(_buf_) {
                this.name = _buf_.ReadString();
                this.desc = _buf_.ReadString();
                this.isStatic = _buf_.ReadBool();
                this.returnType = _buf_.ReadString();
                {
                    this.parameters = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = new blueprint.ParamInfo(_buf_);
                        this.parameters.push(_e);
                    }
                }
            }
            name;
            desc;
            isStatic;
            returnType;
            parameters;
            resolve(_tables) {
                for (let _e of this.parameters) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        blueprint.Method = Method;
    })(blueprint = cfg.blueprint || (cfg.blueprint = {}));
    (function (blueprint) {
        class ParamInfo {
            constructor(_buf_) {
                this.name = _buf_.ReadString();
                this.type = _buf_.ReadString();
                this.isRef = _buf_.ReadBool();
            }
            name;
            type;
            isRef;
            resolve(_tables) {
            }
        }
        blueprint.ParamInfo = ParamInfo;
    })(blueprint = cfg.blueprint || (cfg.blueprint = {}));
    (function (blueprint) {
        class AbstraceMethod extends blueprint.Method {
            constructor(_buf_) {
                super(_buf_);
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        blueprint.AbstraceMethod = AbstraceMethod;
    })(blueprint = cfg.blueprint || (cfg.blueprint = {}));
    (function (blueprint) {
        class ExternalMethod extends blueprint.Method {
            constructor(_buf_) {
                super(_buf_);
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        blueprint.ExternalMethod = ExternalMethod;
    })(blueprint = cfg.blueprint || (cfg.blueprint = {}));
    (function (blueprint) {
        class BlueprintMethod extends blueprint.Method {
            constructor(_buf_) {
                super(_buf_);
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        blueprint.BlueprintMethod = BlueprintMethod;
    })(blueprint = cfg.blueprint || (cfg.blueprint = {}));
    (function (blueprint) {
        class Interface extends blueprint.Clazz {
            constructor(_buf_) {
                super(_buf_);
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        blueprint.Interface = Interface;
    })(blueprint = cfg.blueprint || (cfg.blueprint = {}));
    (function (blueprint) {
        class NormalClazz extends blueprint.Clazz {
            constructor(_buf_) {
                super(_buf_);
                this.isAbstract = _buf_.ReadBool();
                {
                    this.fields = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = new blueprint.Field(_buf_);
                        this.fields.push(_e);
                    }
                }
            }
            isAbstract;
            fields;
            resolve(_tables) {
                super.resolve(_tables);
                for (let _e of this.fields) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        blueprint.NormalClazz = NormalClazz;
    })(blueprint = cfg.blueprint || (cfg.blueprint = {}));
    (function (blueprint) {
        class Field {
            constructor(_buf_) {
                this.name = _buf_.ReadString();
                this.type = _buf_.ReadString();
                this.desc = _buf_.ReadString();
            }
            name;
            type;
            desc;
            resolve(_tables) {
            }
        }
        blueprint.Field = Field;
    })(blueprint = cfg.blueprint || (cfg.blueprint = {}));
    (function (blueprint) {
        class EnumClazz extends blueprint.Clazz {
            constructor(_buf_) {
                super(_buf_);
                {
                    this.enums = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = new blueprint.EnumField(_buf_);
                        this.enums.push(_e);
                    }
                }
            }
            enums;
            resolve(_tables) {
                super.resolve(_tables);
                for (let _e of this.enums) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        blueprint.EnumClazz = EnumClazz;
    })(blueprint = cfg.blueprint || (cfg.blueprint = {}));
    (function (blueprint) {
        class EnumField {
            constructor(_buf_) {
                this.name = _buf_.ReadString();
                this.value = _buf_.ReadInt();
            }
            name;
            value;
            resolve(_tables) {
            }
        }
        blueprint.EnumField = EnumField;
    })(blueprint = cfg.blueprint || (cfg.blueprint = {}));
    let bonus;
    (function (bonus) {
        class TbDrop {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new bonus.DropInfo(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        bonus.TbDrop = TbDrop;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class DropInfo {
            constructor(_buf_) {
                this.id = _buf_.ReadInt();
                this.desc = _buf_.ReadString();
                {
                    this.clientShowItems = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = new bonus.ShowItemInfo(_buf_);
                        this.clientShowItems.push(_e);
                    }
                }
                this.bonus = bonus.Bonus.constructorFrom(_buf_);
            }
            id;
            desc;
            clientShowItems;
            bonus;
            resolve(_tables) {
                for (let _e of this.clientShowItems) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
                if (this.bonus != null) {
                    this.bonus.resolve(_tables);
                }
            }
        }
        bonus.DropInfo = DropInfo;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class ShowItemInfo {
            constructor(_buf_) {
                this.itemId = _buf_.ReadInt();
                this.itemNum = _buf_.ReadLongAsNumber();
            }
            itemId;
            itemId_Ref = undefined;
            itemNum;
            resolve(_tables) {
                this.itemId_Ref = _tables.get('item.TbItem').get(this.itemId);
            }
        }
        bonus.ShowItemInfo = ShowItemInfo;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class Bonus {
            static constructorFrom(_buf_) {
                switch (_buf_.ReadInt()) {
                    case -1649658966: return new bonus.OneItem(_buf_);
                    case 400179721: return new bonus.OneItems(_buf_);
                    case 1689011106: return new bonus.Item(_buf_);
                    case 819736849: return new bonus.Items(_buf_);
                    case -229470727: return new bonus.CoefficientItem(_buf_);
                    case -356202311: return new bonus.WeightItems(_buf_);
                    case 366387866: return new bonus.ProbabilityItems(_buf_);
                    case 1421907893: return new bonus.MultiBonus(_buf_);
                    case 359783161: return new bonus.ProbabilityBonus(_buf_);
                    case -362807016: return new bonus.WeightBonus(_buf_);
                    case 1959868225: return new bonus.DropBonus(_buf_);
                    default: throw new Error();
                }
            }
            constructor(_buf_) {
            }
            resolve(_tables) {
            }
        }
        bonus.Bonus = Bonus;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class OneItem extends bonus.Bonus {
            constructor(_buf_) {
                super(_buf_);
                this.itemId = _buf_.ReadInt();
            }
            itemId;
            itemId_Ref = undefined;
            resolve(_tables) {
                super.resolve(_tables);
                this.itemId_Ref = _tables.get('item.TbItem').get(this.itemId);
            }
        }
        bonus.OneItem = OneItem;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class OneItems extends bonus.Bonus {
            constructor(_buf_) {
                super(_buf_);
                {
                    let n = Math.min(_buf_.ReadSize(), _buf_.Size);
                    this.items = new Int32Array(n);
                    for (let i = 0; i < n; i++) {
                        let _e;
                        _e = _buf_.ReadInt();
                        this.items[i] = _e;
                    }
                }
            }
            items;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        bonus.OneItems = OneItems;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class Item extends bonus.Bonus {
            constructor(_buf_) {
                super(_buf_);
                this.itemId = _buf_.ReadInt();
                this.amount = _buf_.ReadInt();
            }
            itemId;
            itemId_Ref = undefined;
            amount;
            resolve(_tables) {
                super.resolve(_tables);
                this.itemId_Ref = _tables.get('item.TbItem').get(this.itemId);
            }
        }
        bonus.Item = Item;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class Items extends bonus.Bonus {
            constructor(_buf_) {
                super(_buf_);
                {
                    let n = Math.min(_buf_.ReadSize(), _buf_.Size);
                    this.itemList = [];
                    for (let i = 0; i < n; i++) {
                        let _e;
                        _e = new bonus.Item(_buf_);
                        this.itemList.push(_e);
                    }
                }
            }
            itemList;
            resolve(_tables) {
                super.resolve(_tables);
                for (let _e of this.itemList) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        bonus.Items = Items;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class CoefficientItem extends bonus.Bonus {
            constructor(_buf_) {
                super(_buf_);
                this.bonusId = _buf_.ReadInt();
                this.bonusList = new bonus.Items(_buf_);
            }
            bonusId;
            bonusList;
            resolve(_tables) {
                super.resolve(_tables);
                if (this.bonusList != null) {
                    this.bonusList.resolve(_tables);
                }
            }
        }
        bonus.CoefficientItem = CoefficientItem;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class WeightItems extends bonus.Bonus {
            constructor(_buf_) {
                super(_buf_);
                {
                    let n = Math.min(_buf_.ReadSize(), _buf_.Size);
                    this.itemList = [];
                    for (let i = 0; i < n; i++) {
                        let _e;
                        _e = new bonus.WeightItemInfo(_buf_);
                        this.itemList.push(_e);
                    }
                }
            }
            itemList;
            resolve(_tables) {
                super.resolve(_tables);
                for (let _e of this.itemList) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        bonus.WeightItems = WeightItems;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class WeightItemInfo {
            constructor(_buf_) {
                this.itemId = _buf_.ReadInt();
                this.num = _buf_.ReadInt();
                this.weight = _buf_.ReadInt();
            }
            itemId;
            itemId_Ref = undefined;
            num;
            weight;
            resolve(_tables) {
                this.itemId_Ref = _tables.get('item.TbItem').get(this.itemId);
            }
        }
        bonus.WeightItemInfo = WeightItemInfo;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class ProbabilityItems extends bonus.Bonus {
            constructor(_buf_) {
                super(_buf_);
                {
                    let n = Math.min(_buf_.ReadSize(), _buf_.Size);
                    this.itemList = [];
                    for (let i = 0; i < n; i++) {
                        let _e;
                        _e = new bonus.ProbabilityItemInfo(_buf_);
                        this.itemList.push(_e);
                    }
                }
            }
            itemList;
            resolve(_tables) {
                super.resolve(_tables);
                for (let _e of this.itemList) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        bonus.ProbabilityItems = ProbabilityItems;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class ProbabilityItemInfo {
            constructor(_buf_) {
                this.itemId = _buf_.ReadInt();
                this.num = _buf_.ReadInt();
                this.probability = _buf_.ReadFloat();
            }
            itemId;
            itemId_Ref = undefined;
            num;
            probability;
            resolve(_tables) {
                this.itemId_Ref = _tables.get('item.TbItem').get(this.itemId);
            }
        }
        bonus.ProbabilityItemInfo = ProbabilityItemInfo;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class MultiBonus extends bonus.Bonus {
            constructor(_buf_) {
                super(_buf_);
                {
                    let n = Math.min(_buf_.ReadSize(), _buf_.Size);
                    this.bonuses = [];
                    for (let i = 0; i < n; i++) {
                        let _e;
                        _e = bonus.Bonus.constructorFrom(_buf_);
                        this.bonuses.push(_e);
                    }
                }
            }
            bonuses;
            resolve(_tables) {
                super.resolve(_tables);
                for (let _e of this.bonuses) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        bonus.MultiBonus = MultiBonus;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class ProbabilityBonus extends bonus.Bonus {
            constructor(_buf_) {
                super(_buf_);
                {
                    let n = Math.min(_buf_.ReadSize(), _buf_.Size);
                    this.bonuses = [];
                    for (let i = 0; i < n; i++) {
                        let _e;
                        _e = new bonus.ProbabilityBonusInfo(_buf_);
                        this.bonuses.push(_e);
                    }
                }
            }
            bonuses;
            resolve(_tables) {
                super.resolve(_tables);
                for (let _e of this.bonuses) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        bonus.ProbabilityBonus = ProbabilityBonus;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class ProbabilityBonusInfo {
            constructor(_buf_) {
                this.bonus = bonus.Bonus.constructorFrom(_buf_);
                this.probability = _buf_.ReadFloat();
            }
            bonus;
            probability;
            resolve(_tables) {
                if (this.bonus != null) {
                    this.bonus.resolve(_tables);
                }
            }
        }
        bonus.ProbabilityBonusInfo = ProbabilityBonusInfo;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class WeightBonus extends bonus.Bonus {
            constructor(_buf_) {
                super(_buf_);
                {
                    let n = Math.min(_buf_.ReadSize(), _buf_.Size);
                    this.bonuses = [];
                    for (let i = 0; i < n; i++) {
                        let _e;
                        _e = new bonus.WeightBonusInfo(_buf_);
                        this.bonuses.push(_e);
                    }
                }
            }
            bonuses;
            resolve(_tables) {
                super.resolve(_tables);
                for (let _e of this.bonuses) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        bonus.WeightBonus = WeightBonus;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class WeightBonusInfo {
            constructor(_buf_) {
                this.bonus = bonus.Bonus.constructorFrom(_buf_);
                this.weight = _buf_.ReadInt();
            }
            bonus;
            weight;
            resolve(_tables) {
                if (this.bonus != null) {
                    this.bonus.resolve(_tables);
                }
            }
        }
        bonus.WeightBonusInfo = WeightBonusInfo;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (bonus) {
        class DropBonus extends bonus.Bonus {
            constructor(_buf_) {
                super(_buf_);
                this.id = _buf_.ReadInt();
            }
            id;
            id_Ref = undefined;
            resolve(_tables) {
                super.resolve(_tables);
                this.id_Ref = _tables.get('bonus.TbDrop').get(this.id);
            }
        }
        bonus.DropBonus = DropBonus;
    })(bonus = cfg.bonus || (cfg.bonus = {}));
    (function (common) {
        class TbGlobalConfig {
            _data;
            constructor(_buf_) {
                if (_buf_.ReadInt() != 1)
                    throw new Error('table mode=one, but size != 1');
                this._data = new common.GlobalConfig(_buf_);
            }
            getData() { return this._data; }
            /**
             * 背包容量
             */
            get bagCapacity() { return this._data.bagCapacity; }
            get bagCapacitySpecial() { return this._data.bagCapacitySpecial; }
            get bagTempExpendableCapacity() { return this._data.bagTempExpendableCapacity; }
            get bagTempToolCapacity() { return this._data.bagTempToolCapacity; }
            get bagInitCapacity() { return this._data.bagInitCapacity; }
            get quickBagCapacity() { return this._data.quickBagCapacity; }
            get clothBagCapacity() { return this._data.clothBagCapacity; }
            get clothBagInitCapacity() { return this._data.clothBagInitCapacity; }
            get clothBagCapacitySpecial() { return this._data.clothBagCapacitySpecial; }
            get bagInitItemsDropId() { return this._data.bagInitItemsDropId; }
            get mailBoxCapacity() { return this._data.mailBoxCapacity; }
            get damageParamC() { return this._data.damageParamC; }
            get damageParamE() { return this._data.damageParamE; }
            get damageParamF() { return this._data.damageParamF; }
            get damageParamD() { return this._data.damageParamD; }
            get roleSpeed() { return this._data.roleSpeed; }
            get monsterSpeed() { return this._data.monsterSpeed; }
            get initEnergy() { return this._data.initEnergy; }
            get initViality() { return this._data.initViality; }
            get maxViality() { return this._data.maxViality; }
            get perVialityRecoveryTime() { return this._data.perVialityRecoveryTime; }
            resolve(_tables) {
                this._data.resolve(_tables);
            }
        }
        common.TbGlobalConfig = TbGlobalConfig;
    })(common = cfg.common || (cfg.common = {}));
    (function (common) {
        class GlobalConfig {
            constructor(_buf_) {
                this.bagCapacity = _buf_.ReadInt();
                this.bagCapacitySpecial = _buf_.ReadInt();
                this.bagTempExpendableCapacity = _buf_.ReadInt();
                this.bagTempToolCapacity = _buf_.ReadInt();
                this.bagInitCapacity = _buf_.ReadInt();
                this.quickBagCapacity = _buf_.ReadInt();
                this.clothBagCapacity = _buf_.ReadInt();
                this.clothBagInitCapacity = _buf_.ReadInt();
                this.clothBagCapacitySpecial = _buf_.ReadInt();
                if (_buf_.ReadBool()) {
                    this.bagInitItemsDropId = _buf_.ReadInt();
                }
                else {
                    this.bagInitItemsDropId = undefined;
                }
                this.mailBoxCapacity = _buf_.ReadInt();
                this.damageParamC = _buf_.ReadFloat();
                this.damageParamE = _buf_.ReadFloat();
                this.damageParamF = _buf_.ReadFloat();
                this.damageParamD = _buf_.ReadFloat();
                this.roleSpeed = _buf_.ReadFloat();
                this.monsterSpeed = _buf_.ReadFloat();
                this.initEnergy = _buf_.ReadInt();
                this.initViality = _buf_.ReadInt();
                this.maxViality = _buf_.ReadInt();
                this.perVialityRecoveryTime = _buf_.ReadInt();
            }
            /**
             * 背包容量
             */
            bagCapacity;
            bagCapacitySpecial;
            bagTempExpendableCapacity;
            bagTempToolCapacity;
            bagInitCapacity;
            quickBagCapacity;
            clothBagCapacity;
            clothBagInitCapacity;
            clothBagCapacitySpecial;
            bagInitItemsDropId;
            bagInitItemsDropId_Ref;
            mailBoxCapacity;
            damageParamC;
            damageParamE;
            damageParamF;
            damageParamD;
            roleSpeed;
            monsterSpeed;
            initEnergy;
            initViality;
            maxViality;
            perVialityRecoveryTime;
            resolve(_tables) {
                this.bagInitItemsDropId_Ref = this.bagInitItemsDropId != undefined ? _tables.get('bonus.TbDrop').get(this.bagInitItemsDropId) : undefined;
            }
        }
        common.GlobalConfig = GlobalConfig;
    })(common = cfg.common || (cfg.common = {}));
    (function (common) {
        class TbDummy {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new common.Dummy(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        common.TbDummy = TbDummy;
    })(common = cfg.common || (cfg.common = {}));
    (function (common) {
        class Dummy {
            constructor(_buf_) {
                this.id = _buf_.ReadInt();
                this.limit = limit.LimitBase.constructorFrom(_buf_);
            }
            id;
            limit;
            resolve(_tables) {
                if (this.limit != null) {
                    this.limit.resolve(_tables);
                }
            }
        }
        common.Dummy = Dummy;
    })(common = cfg.common || (cfg.common = {}));
    (function (limit) {
        class LimitBase {
            static constructorFrom(_buf_) {
                switch (_buf_.ReadInt()) {
                    case 303235413: return new limit.DailyLimit(_buf_);
                    case -1753629499: return new limit.MultiDayLimit(_buf_);
                    case -252187161: return new limit.WeeklyLimit(_buf_);
                    case 2063279905: return new limit.MonthlyLimit(_buf_);
                    case -1366194050: return new limit.CoolDown(_buf_);
                    case 394328599: return new limit.GroupCoolDown(_buf_);
                    default: throw new Error();
                }
            }
            constructor(_buf_) {
            }
            resolve(_tables) {
            }
        }
        limit.LimitBase = LimitBase;
    })(limit = cfg.limit || (cfg.limit = {}));
    (function (limit) {
        class DailyLimitBase extends limit.LimitBase {
            static constructorFrom(_buf_) {
                switch (_buf_.ReadInt()) {
                    case 303235413: return new limit.DailyLimit(_buf_);
                    default: throw new Error();
                }
            }
            constructor(_buf_) {
                super(_buf_);
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        limit.DailyLimitBase = DailyLimitBase;
    })(limit = cfg.limit || (cfg.limit = {}));
    (function (limit) {
        class DailyLimit extends limit.DailyLimitBase {
            constructor(_buf_) {
                super(_buf_);
                this.num = _buf_.ReadInt();
            }
            num;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        limit.DailyLimit = DailyLimit;
    })(limit = cfg.limit || (cfg.limit = {}));
    (function (limit) {
        class MultiDayLimit extends limit.LimitBase {
            constructor(_buf_) {
                super(_buf_);
                this.day = _buf_.ReadInt();
                this.num = _buf_.ReadInt();
            }
            day;
            num;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        limit.MultiDayLimit = MultiDayLimit;
    })(limit = cfg.limit || (cfg.limit = {}));
    (function (limit) {
        class WeeklyLimit extends limit.LimitBase {
            constructor(_buf_) {
                super(_buf_);
                this.num = _buf_.ReadInt();
            }
            num;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        limit.WeeklyLimit = WeeklyLimit;
    })(limit = cfg.limit || (cfg.limit = {}));
    (function (limit) {
        class MonthlyLimit extends limit.LimitBase {
            constructor(_buf_) {
                super(_buf_);
                this.num = _buf_.ReadInt();
            }
            num;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        limit.MonthlyLimit = MonthlyLimit;
    })(limit = cfg.limit || (cfg.limit = {}));
    (function (limit) {
        class CoolDown extends limit.LimitBase {
            constructor(_buf_) {
                super(_buf_);
                this.duration = _buf_.ReadInt();
            }
            duration;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        limit.CoolDown = CoolDown;
    })(limit = cfg.limit || (cfg.limit = {}));
    (function (limit) {
        class GroupCoolDown extends limit.LimitBase {
            constructor(_buf_) {
                super(_buf_);
                this.groupId = _buf_.ReadInt();
                this.duration = _buf_.ReadInt();
            }
            groupId;
            duration;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        limit.GroupCoolDown = GroupCoolDown;
    })(limit = cfg.limit || (cfg.limit = {}));
    (function (error) {
        class TbErrorInfo {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new error.ErrorInfo(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.code, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        error.TbErrorInfo = TbErrorInfo;
    })(error = cfg.error || (cfg.error = {}));
    (function (error) {
        class ErrorInfo {
            constructor(_buf_) {
                this.code = _buf_.ReadString();
                this.desc = _buf_.ReadString();
                this.style = error.ErrorStyle.constructorFrom(_buf_);
            }
            code;
            desc;
            style;
            resolve(_tables) {
                if (this.style != null) {
                    this.style.resolve(_tables);
                }
            }
        }
        error.ErrorInfo = ErrorInfo;
    })(error = cfg.error || (cfg.error = {}));
    (function (error) {
        class ErrorStyle {
            static constructorFrom(_buf_) {
                switch (_buf_.ReadInt()) {
                    case 1915239884: return new error.ErrorStyleTip(_buf_);
                    case -1920482343: return new error.ErrorStyleMsgbox(_buf_);
                    case -2010134516: return new error.ErrorStyleDlgOk(_buf_);
                    case 971221414: return new error.ErrorStyleDlgOkCancel(_buf_);
                    default: throw new Error();
                }
            }
            constructor(_buf_) {
            }
            resolve(_tables) {
            }
        }
        error.ErrorStyle = ErrorStyle;
    })(error = cfg.error || (cfg.error = {}));
    (function (error) {
        class ErrorStyleTip extends error.ErrorStyle {
            constructor(_buf_) {
                super(_buf_);
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        error.ErrorStyleTip = ErrorStyleTip;
    })(error = cfg.error || (cfg.error = {}));
    (function (error) {
        class ErrorStyleMsgbox extends error.ErrorStyle {
            constructor(_buf_) {
                super(_buf_);
                this.btnName = _buf_.ReadString();
                this.operation = _buf_.ReadInt();
            }
            btnName;
            operation;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        error.ErrorStyleMsgbox = ErrorStyleMsgbox;
    })(error = cfg.error || (cfg.error = {}));
    (function (error) {
        class ErrorStyleDlgOk extends error.ErrorStyle {
            constructor(_buf_) {
                super(_buf_);
                this.btnName = _buf_.ReadString();
            }
            btnName;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        error.ErrorStyleDlgOk = ErrorStyleDlgOk;
    })(error = cfg.error || (cfg.error = {}));
    (function (error) {
        class ErrorStyleDlgOkCancel extends error.ErrorStyle {
            constructor(_buf_) {
                super(_buf_);
                this.btn1Name = _buf_.ReadString();
                this.btn2Name = _buf_.ReadString();
            }
            btn1Name;
            btn2Name;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        error.ErrorStyleDlgOkCancel = ErrorStyleDlgOkCancel;
    })(error = cfg.error || (cfg.error = {}));
    (function (error) {
        class TbCodeInfo {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new error.CodeInfo(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.code, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        error.TbCodeInfo = TbCodeInfo;
    })(error = cfg.error || (cfg.error = {}));
    (function (error) {
        class CodeInfo {
            constructor(_buf_) {
                this.code = _buf_.ReadInt();
                this.key = _buf_.ReadString();
            }
            code;
            key;
            resolve(_tables) {
            }
        }
        error.CodeInfo = CodeInfo;
    })(error = cfg.error || (cfg.error = {}));
    (function (item) {
        /**
         * 道具表
         */
        class TbItem {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new item.Item(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        item.TbItem = TbItem;
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        /**
         * 道具
         */
        class Item {
            constructor(_buf_) {
                this.id = _buf_.ReadInt();
                this.name = _buf_.ReadString();
                this.majorType = _buf_.ReadInt();
                this.minorType = _buf_.ReadInt();
                this.maxPileNum = _buf_.ReadInt();
                this.quality = _buf_.ReadInt();
                this.icon = _buf_.ReadString();
                this.iconBackgroud = _buf_.ReadString();
                this.iconMask = _buf_.ReadString();
                this.desc = _buf_.ReadString();
                this.showOrder = _buf_.ReadInt();
                this.quantifier = _buf_.ReadString();
                this.showInBag = _buf_.ReadBool();
                this.minShowLevel = _buf_.ReadInt();
                this.batchUsable = _buf_.ReadBool();
                this.progressTimeWhenUse = _buf_.ReadFloat();
                this.showHintWhenUse = _buf_.ReadBool();
                this.droppable = _buf_.ReadBool();
                if (_buf_.ReadBool()) {
                    this.price = _buf_.ReadInt();
                }
                else {
                    this.price = undefined;
                }
                this.useType = _buf_.ReadInt();
                if (_buf_.ReadBool()) {
                    this.levelUpId = _buf_.ReadInt();
                }
                else {
                    this.levelUpId = undefined;
                }
            }
            /**
             * 道具id
             */
            id;
            name;
            majorType;
            minorType;
            maxPileNum;
            quality;
            icon;
            iconBackgroud;
            iconMask;
            desc;
            showOrder;
            quantifier;
            showInBag;
            minShowLevel;
            batchUsable;
            progressTimeWhenUse;
            showHintWhenUse;
            droppable;
            price;
            useType;
            levelUpId;
            resolve(_tables) {
            }
        }
        item.Item = Item;
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        class TbItemFunc {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new item.ItemFunction(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.minorType, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        item.TbItemFunc = TbItemFunc;
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        class ItemFunction {
            constructor(_buf_) {
                this.minorType = _buf_.ReadInt();
                this.funcType = _buf_.ReadInt();
                this.method = _buf_.ReadString();
                this.closeBagUi = _buf_.ReadBool();
            }
            minorType;
            funcType;
            method;
            closeBagUi;
            resolve(_tables) {
            }
        }
        item.ItemFunction = ItemFunction;
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        class TbItemExtra {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = item.ItemExtra.constructorFrom(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        item.TbItemExtra = TbItemExtra;
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        class ItemExtra {
            static constructorFrom(_buf_) {
                switch (_buf_.ReadInt()) {
                    case 1494222369: return new item.TreasureBox(_buf_);
                    case 640937802: return new item.InteractionItem(_buf_);
                    case 1659907149: return new item.Clothes(_buf_);
                    case -1679179579: return new item.DesignDrawing(_buf_);
                    case 896889705: return new item.Dymmy(_buf_);
                    default: throw new Error();
                }
            }
            constructor(_buf_) {
                this.id = _buf_.ReadInt();
            }
            id;
            resolve(_tables) {
            }
        }
        item.ItemExtra = ItemExtra;
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        class TreasureBox extends item.ItemExtra {
            constructor(_buf_) {
                super(_buf_);
                if (_buf_.ReadBool()) {
                    this.keyItemId = _buf_.ReadInt();
                }
                else {
                    this.keyItemId = undefined;
                }
                this.openLevel = new condition.MinLevel(_buf_);
                this.useOnObtain = _buf_.ReadBool();
                {
                    this.dropIds = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = _buf_.ReadInt();
                        this.dropIds.push(_e);
                    }
                }
                {
                    this.chooseList = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = new item.ChooseOneBonus(_buf_);
                        this.chooseList.push(_e);
                    }
                }
            }
            keyItemId;
            openLevel;
            useOnObtain;
            dropIds;
            chooseList;
            resolve(_tables) {
                super.resolve(_tables);
                if (this.openLevel != null) {
                    this.openLevel.resolve(_tables);
                }
                for (let _e of this.chooseList) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        item.TreasureBox = TreasureBox;
    })(item = cfg.item || (cfg.item = {}));
    let condition;
    (function (condition) {
        class Condition {
            static constructorFrom(_buf_) {
                switch (_buf_.ReadInt()) {
                    case 1069033789: return new condition.TimeRange(_buf_);
                    case 934079583: return new condition.MultiRoleCondition(_buf_);
                    case 103675143: return new condition.GenderLimit(_buf_);
                    case -1075273755: return new condition.MinLevel(_buf_);
                    case 700922899: return new condition.MaxLevel(_buf_);
                    case 907499647: return new condition.MinMaxLevel(_buf_);
                    case 696630835: return new condition.ClothesPropertyScoreGreaterThan(_buf_);
                    case 1961145317: return new condition.ContainsItem(_buf_);
                    default: throw new Error();
                }
            }
            constructor(_buf_) {
            }
            resolve(_tables) {
            }
        }
        condition.Condition = Condition;
    })(condition = cfg.condition || (cfg.condition = {}));
    (function (condition) {
        class TimeRange extends condition.Condition {
            constructor(_buf_) {
                super(_buf_);
                this.dateTimeRange = new common.DateTimeRange(_buf_);
            }
            dateTimeRange;
            resolve(_tables) {
                super.resolve(_tables);
                if (this.dateTimeRange != null) {
                    this.dateTimeRange.resolve(_tables);
                }
            }
        }
        condition.TimeRange = TimeRange;
    })(condition = cfg.condition || (cfg.condition = {}));
    (function (common) {
        class DateTimeRange {
            constructor(_buf_) {
                if (_buf_.ReadBool()) {
                    this.startTime = _buf_.ReadInt();
                }
                else {
                    this.startTime = undefined;
                }
                if (_buf_.ReadBool()) {
                    this.endTime = _buf_.ReadInt();
                }
                else {
                    this.endTime = undefined;
                }
            }
            startTime;
            endTime;
            resolve(_tables) {
            }
        }
        common.DateTimeRange = DateTimeRange;
    })(common = cfg.common || (cfg.common = {}));
    (function (condition) {
        class RoleCondition extends condition.Condition {
            static constructorFrom(_buf_) {
                switch (_buf_.ReadInt()) {
                    case 934079583: return new condition.MultiRoleCondition(_buf_);
                    case 103675143: return new condition.GenderLimit(_buf_);
                    case -1075273755: return new condition.MinLevel(_buf_);
                    case 700922899: return new condition.MaxLevel(_buf_);
                    case 907499647: return new condition.MinMaxLevel(_buf_);
                    case 696630835: return new condition.ClothesPropertyScoreGreaterThan(_buf_);
                    case 1961145317: return new condition.ContainsItem(_buf_);
                    default: throw new Error();
                }
            }
            constructor(_buf_) {
                super(_buf_);
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        condition.RoleCondition = RoleCondition;
    })(condition = cfg.condition || (cfg.condition = {}));
    (function (condition) {
        class MultiRoleCondition extends condition.RoleCondition {
            constructor(_buf_) {
                super(_buf_);
                {
                    let n = Math.min(_buf_.ReadSize(), _buf_.Size);
                    this.conditions = [];
                    for (let i = 0; i < n; i++) {
                        let _e;
                        _e = condition.RoleCondition.constructorFrom(_buf_);
                        this.conditions.push(_e);
                    }
                }
            }
            conditions;
            resolve(_tables) {
                super.resolve(_tables);
                for (let _e of this.conditions) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        condition.MultiRoleCondition = MultiRoleCondition;
    })(condition = cfg.condition || (cfg.condition = {}));
    (function (condition) {
        class BoolRoleCondition extends condition.RoleCondition {
            static constructorFrom(_buf_) {
                switch (_buf_.ReadInt()) {
                    case 103675143: return new condition.GenderLimit(_buf_);
                    case -1075273755: return new condition.MinLevel(_buf_);
                    case 700922899: return new condition.MaxLevel(_buf_);
                    case 907499647: return new condition.MinMaxLevel(_buf_);
                    case 696630835: return new condition.ClothesPropertyScoreGreaterThan(_buf_);
                    default: throw new Error();
                }
            }
            constructor(_buf_) {
                super(_buf_);
            }
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        condition.BoolRoleCondition = BoolRoleCondition;
    })(condition = cfg.condition || (cfg.condition = {}));
    (function (condition) {
        class GenderLimit extends condition.BoolRoleCondition {
            constructor(_buf_) {
                super(_buf_);
                this.gender = _buf_.ReadInt();
            }
            gender;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        condition.GenderLimit = GenderLimit;
    })(condition = cfg.condition || (cfg.condition = {}));
    (function (condition) {
        class MinLevel extends condition.BoolRoleCondition {
            constructor(_buf_) {
                super(_buf_);
                this.level = _buf_.ReadInt();
            }
            level;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        condition.MinLevel = MinLevel;
    })(condition = cfg.condition || (cfg.condition = {}));
    (function (condition) {
        class MaxLevel extends condition.BoolRoleCondition {
            constructor(_buf_) {
                super(_buf_);
                this.level = _buf_.ReadInt();
            }
            level;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        condition.MaxLevel = MaxLevel;
    })(condition = cfg.condition || (cfg.condition = {}));
    (function (condition) {
        class MinMaxLevel extends condition.BoolRoleCondition {
            constructor(_buf_) {
                super(_buf_);
                this.min = _buf_.ReadInt();
                this.max = _buf_.ReadInt();
            }
            min;
            max;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        condition.MinMaxLevel = MinMaxLevel;
    })(condition = cfg.condition || (cfg.condition = {}));
    (function (condition) {
        class ClothesPropertyScoreGreaterThan extends condition.BoolRoleCondition {
            constructor(_buf_) {
                super(_buf_);
                this.prop = _buf_.ReadInt();
                this.value = _buf_.ReadInt();
            }
            prop;
            value;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        condition.ClothesPropertyScoreGreaterThan = ClothesPropertyScoreGreaterThan;
    })(condition = cfg.condition || (cfg.condition = {}));
    (function (condition) {
        class ContainsItem extends condition.RoleCondition {
            constructor(_buf_) {
                super(_buf_);
                this.itemId = _buf_.ReadInt();
                this.num = _buf_.ReadInt();
                this.reverse = _buf_.ReadBool();
            }
            itemId;
            itemId_Ref = undefined;
            num;
            reverse;
            resolve(_tables) {
                super.resolve(_tables);
                this.itemId_Ref = _tables.get('item.TbItem').get(this.itemId);
            }
        }
        condition.ContainsItem = ContainsItem;
    })(condition = cfg.condition || (cfg.condition = {}));
    (function (item) {
        class ChooseOneBonus {
            constructor(_buf_) {
                this.dropId = _buf_.ReadInt();
                this.isUnique = _buf_.ReadBool();
            }
            dropId;
            dropId_Ref = undefined;
            isUnique;
            resolve(_tables) {
                this.dropId_Ref = _tables.get('bonus.TbDrop').get(this.dropId);
            }
        }
        item.ChooseOneBonus = ChooseOneBonus;
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        class InteractionItem extends item.ItemExtra {
            constructor(_buf_) {
                super(_buf_);
                if (_buf_.ReadBool()) {
                    this.attackNum = _buf_.ReadInt();
                }
                else {
                    this.attackNum = undefined;
                }
                this.holdingStaticMesh = _buf_.ReadString();
                this.holdingStaticMeshMat = _buf_.ReadString();
            }
            attackNum;
            holdingStaticMesh;
            holdingStaticMeshMat;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        item.InteractionItem = InteractionItem;
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        class Clothes extends item.ItemExtra {
            constructor(_buf_) {
                super(_buf_);
                this.attack = _buf_.ReadInt();
                this.hp = _buf_.ReadLongAsNumber();
                this.energyLimit = _buf_.ReadInt();
                this.energyResume = _buf_.ReadInt();
            }
            attack;
            hp;
            energyLimit;
            energyResume;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        item.Clothes = Clothes;
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        class DesignDrawing extends item.ItemExtra {
            constructor(_buf_) {
                super(_buf_);
                {
                    this.learnComponentId = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = _buf_.ReadInt();
                        this.learnComponentId.push(_e);
                    }
                }
            }
            learnComponentId;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        item.DesignDrawing = DesignDrawing;
    })(item = cfg.item || (cfg.item = {}));
    (function (item) {
        class Dymmy extends item.ItemExtra {
            constructor(_buf_) {
                super(_buf_);
                this.cost = cost.Cost.constructorFrom(_buf_);
            }
            cost;
            resolve(_tables) {
                super.resolve(_tables);
                if (this.cost != null) {
                    this.cost.resolve(_tables);
                }
            }
        }
        item.Dymmy = Dymmy;
    })(item = cfg.item || (cfg.item = {}));
    let cost;
    (function (cost) {
        class Cost {
            static constructorFrom(_buf_) {
                switch (_buf_.ReadInt()) {
                    case 911838111: return new cost.CostCurrency(_buf_);
                    case 103084157: return new cost.CostCurrencies(_buf_);
                    case -1033587381: return new cost.CostOneItem(_buf_);
                    case -1249440351: return new cost.CostItem(_buf_);
                    case -77945102: return new cost.CostItems(_buf_);
                    default: throw new Error();
                }
            }
            constructor(_buf_) {
            }
            resolve(_tables) {
            }
        }
        cost.Cost = Cost;
    })(cost = cfg.cost || (cfg.cost = {}));
    (function (cost) {
        class CostCurrency extends cost.Cost {
            constructor(_buf_) {
                super(_buf_);
                this.type = _buf_.ReadInt();
                this.num = _buf_.ReadInt();
            }
            type;
            num;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        cost.CostCurrency = CostCurrency;
    })(cost = cfg.cost || (cfg.cost = {}));
    (function (cost) {
        class CostCurrencies extends cost.Cost {
            constructor(_buf_) {
                super(_buf_);
                {
                    this.currencies = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = new cost.CostCurrency(_buf_);
                        this.currencies.push(_e);
                    }
                }
            }
            currencies;
            resolve(_tables) {
                super.resolve(_tables);
                for (let _e of this.currencies) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        cost.CostCurrencies = CostCurrencies;
    })(cost = cfg.cost || (cfg.cost = {}));
    (function (cost) {
        class CostOneItem extends cost.Cost {
            constructor(_buf_) {
                super(_buf_);
                this.itemId = _buf_.ReadInt();
            }
            itemId;
            itemId_Ref = undefined;
            resolve(_tables) {
                super.resolve(_tables);
                this.itemId_Ref = _tables.get('item.TbItem').get(this.itemId);
            }
        }
        cost.CostOneItem = CostOneItem;
    })(cost = cfg.cost || (cfg.cost = {}));
    (function (cost) {
        class CostItem extends cost.Cost {
            constructor(_buf_) {
                super(_buf_);
                this.itemId = _buf_.ReadInt();
                this.amount = _buf_.ReadInt();
            }
            itemId;
            itemId_Ref = undefined;
            amount;
            resolve(_tables) {
                super.resolve(_tables);
                this.itemId_Ref = _tables.get('item.TbItem').get(this.itemId);
            }
        }
        cost.CostItem = CostItem;
    })(cost = cfg.cost || (cfg.cost = {}));
    (function (cost) {
        class CostItems extends cost.Cost {
            constructor(_buf_) {
                super(_buf_);
                {
                    let n = Math.min(_buf_.ReadSize(), _buf_.Size);
                    this.itemList = [];
                    for (let i = 0; i < n; i++) {
                        let _e;
                        _e = new cost.CostItem(_buf_);
                        this.itemList.push(_e);
                    }
                }
            }
            itemList;
            resolve(_tables) {
                super.resolve(_tables);
                for (let _e of this.itemList) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        cost.CostItems = CostItems;
    })(cost = cfg.cost || (cfg.cost = {}));
    let l10n;
    (function (l10n) {
        class TbL10NDemo {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new l10n.L10NDemo(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        l10n.TbL10NDemo = TbL10NDemo;
    })(l10n = cfg.l10n || (cfg.l10n = {}));
    (function (l10n) {
        class L10NDemo {
            constructor(_buf_) {
                this.id = _buf_.ReadInt();
                this.text = _buf_.ReadString();
            }
            id;
            text;
            resolve(_tables) {
            }
        }
        l10n.L10NDemo = L10NDemo;
    })(l10n = cfg.l10n || (cfg.l10n = {}));
    (function (l10n) {
        class TbPatchDemo {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new l10n.PatchDemo(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        l10n.TbPatchDemo = TbPatchDemo;
    })(l10n = cfg.l10n || (cfg.l10n = {}));
    (function (l10n) {
        class PatchDemo {
            constructor(_buf_) {
                this.id = _buf_.ReadInt();
                this.value = _buf_.ReadInt();
            }
            id;
            value;
            resolve(_tables) {
            }
        }
        l10n.PatchDemo = PatchDemo;
    })(l10n = cfg.l10n || (cfg.l10n = {}));
    (function (mail) {
        class TbSystemMail {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new mail.SystemMail(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        mail.TbSystemMail = TbSystemMail;
    })(mail = cfg.mail || (cfg.mail = {}));
    (function (mail) {
        class SystemMail {
            constructor(_buf_) {
                this.id = _buf_.ReadInt();
                this.title = _buf_.ReadString();
                this.sender = _buf_.ReadString();
                this.content = _buf_.ReadString();
                {
                    this.award = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = _buf_.ReadInt();
                        this.award.push(_e);
                    }
                }
            }
            id;
            title;
            sender;
            content;
            award;
            resolve(_tables) {
            }
        }
        mail.SystemMail = SystemMail;
    })(mail = cfg.mail || (cfg.mail = {}));
    (function (mail) {
        class TbGlobalMail {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new mail.GlobalMail(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        mail.TbGlobalMail = TbGlobalMail;
    })(mail = cfg.mail || (cfg.mail = {}));
    (function (mail) {
        class GlobalMail {
            constructor(_buf_) {
                this.id = _buf_.ReadInt();
                this.title = _buf_.ReadString();
                this.sender = _buf_.ReadString();
                this.content = _buf_.ReadString();
                {
                    this.award = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = _buf_.ReadInt();
                        this.award.push(_e);
                    }
                }
                this.allServer = _buf_.ReadBool();
                {
                    this.serverList = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = _buf_.ReadInt();
                        this.serverList.push(_e);
                    }
                }
                this.platform = _buf_.ReadString();
                this.channel = _buf_.ReadString();
                this.minMaxLevel = new condition.MinMaxLevel(_buf_);
                this.registerTime = new condition.TimeRange(_buf_);
                this.mailTime = new condition.TimeRange(_buf_);
            }
            id;
            title;
            sender;
            content;
            award;
            allServer;
            serverList;
            platform;
            channel;
            minMaxLevel;
            registerTime;
            mailTime;
            resolve(_tables) {
                if (this.minMaxLevel != null) {
                    this.minMaxLevel.resolve(_tables);
                }
                if (this.registerTime != null) {
                    this.registerTime.resolve(_tables);
                }
                if (this.mailTime != null) {
                    this.mailTime.resolve(_tables);
                }
            }
        }
        mail.GlobalMail = GlobalMail;
    })(mail = cfg.mail || (cfg.mail = {}));
    (function (role) {
        class TbRoleLevelExpAttr {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new role.LevelExpAttr(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.level, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        role.TbRoleLevelExpAttr = TbRoleLevelExpAttr;
    })(role = cfg.role || (cfg.role = {}));
    (function (role) {
        class LevelExpAttr {
            constructor(_buf_) {
                this.level = _buf_.ReadInt();
                this.needExp = _buf_.ReadLongAsNumber();
                {
                    this.clothesAttrs = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = _buf_.ReadInt();
                        this.clothesAttrs.push(_e);
                    }
                }
            }
            level;
            needExp;
            clothesAttrs;
            resolve(_tables) {
            }
        }
        role.LevelExpAttr = LevelExpAttr;
    })(role = cfg.role || (cfg.role = {}));
    (function (role) {
        class TbRoleLevelBonusCoefficient {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new role.LevelBonus(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        role.TbRoleLevelBonusCoefficient = TbRoleLevelBonusCoefficient;
    })(role = cfg.role || (cfg.role = {}));
    (function (role) {
        class LevelBonus {
            constructor(_buf_) {
                this.id = _buf_.ReadInt();
                {
                    this.distinctBonusInfos = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = new role.DistinctBonusInfos(_buf_);
                        this.distinctBonusInfos.push(_e);
                    }
                }
            }
            id;
            distinctBonusInfos;
            resolve(_tables) {
                for (let _e of this.distinctBonusInfos) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        role.LevelBonus = LevelBonus;
    })(role = cfg.role || (cfg.role = {}));
    (function (role) {
        class DistinctBonusInfos {
            constructor(_buf_) {
                this.effectiveLevel = _buf_.ReadInt();
                {
                    this.bonusInfo = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = new role.BonusInfo(_buf_);
                        this.bonusInfo.push(_e);
                    }
                }
            }
            effectiveLevel;
            bonusInfo;
            resolve(_tables) {
                for (let _e of this.bonusInfo) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        role.DistinctBonusInfos = DistinctBonusInfos;
    })(role = cfg.role || (cfg.role = {}));
    (function (role) {
        class BonusInfo {
            constructor(_buf_) {
                this.type = _buf_.ReadInt();
                this.coefficient = _buf_.ReadFloat();
            }
            type;
            coefficient;
            resolve(_tables) {
            }
        }
        role.BonusInfo = BonusInfo;
    })(role = cfg.role || (cfg.role = {}));
    let tag;
    (function (tag) {
        class TbTestTag {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new tag.TestTag(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        tag.TbTestTag = TbTestTag;
    })(tag = cfg.tag || (cfg.tag = {}));
    (function (tag) {
        class TestTag {
            constructor(_buf_) {
                this.id = _buf_.ReadInt();
                this.value = _buf_.ReadString();
            }
            id;
            value;
            resolve(_tables) {
            }
        }
        tag.TestTag = TestTag;
    })(tag = cfg.tag || (cfg.tag = {}));
    (function (test) {
        class TbFullTypes {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new test.DemoType2(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.x3, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        test.TbFullTypes = TbFullTypes;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class DemoType2 {
            constructor(_buf_) {
                this.x4 = _buf_.ReadInt();
                this.x1 = _buf_.ReadBool();
                this.x2 = _buf_.ReadByte();
                this.x3 = _buf_.ReadShort();
                this.x5 = _buf_.ReadLongAsNumber();
                this.x6 = _buf_.ReadFloat();
                this.x7 = _buf_.ReadDouble();
                this.x80 = _buf_.ReadFshort();
                this.x8 = _buf_.ReadFint();
                this.x9 = _buf_.ReadFlong();
                this.x10 = _buf_.ReadString();
                this.x12 = new test.DemoType1(_buf_);
                this.x13 = _buf_.ReadInt();
                this.x14 = test.DemoDynamic.constructorFrom(_buf_);
                this.s1 = _buf_.ReadString();
                this.v2 = Vector2.deserializeFrom(_buf_);
                this.v3 = Vector3.deserializeFrom(_buf_);
                this.v4 = Vector4.deserializeFrom(_buf_);
                this.t1 = _buf_.ReadInt();
                {
                    let n = Math.min(_buf_.ReadSize(), _buf_.Size);
                    this.k1 = new Int32Array(n);
                    for (let i = 0; i < n; i++) {
                        let _e;
                        _e = _buf_.ReadInt();
                        this.k1[i] = _e;
                    }
                }
                {
                    this.k2 = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = _buf_.ReadInt();
                        this.k2.push(_e);
                    }
                }
                {
                    this.k5 = new Set();
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = _buf_.ReadInt();
                        this.k5.add(_e);
                    }
                }
                {
                    this.k8 = new Map();
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _k;
                        _k = _buf_.ReadInt();
                        let _v;
                        _v = _buf_.ReadInt();
                        this.k8.set(_k, _v);
                    }
                }
                {
                    this.k9 = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = new test.DemoE2(_buf_);
                        this.k9.push(_e);
                    }
                }
                {
                    let n = Math.min(_buf_.ReadSize(), _buf_.Size);
                    this.k15 = [];
                    for (let i = 0; i < n; i++) {
                        let _e;
                        _e = test.DemoDynamic.constructorFrom(_buf_);
                        this.k15.push(_e);
                    }
                }
            }
            x4;
            x1;
            x2;
            x3;
            x3_Ref = undefined;
            x5;
            x6;
            x7;
            x80;
            x8;
            x9;
            x10;
            x12;
            x13;
            x14;
            s1;
            v2;
            v3;
            v4;
            t1;
            k1;
            k2;
            k5;
            k8;
            k9;
            k15;
            resolve(_tables) {
                this.x3_Ref = _tables.get('test.TbFullTypes').get(this.x3);
                if (this.x12 != null) {
                    this.x12.resolve(_tables);
                }
                if (this.x14 != null) {
                    this.x14.resolve(_tables);
                }
                for (let _e of this.k9) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
                for (let _e of this.k15) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        test.DemoType2 = DemoType2;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class DemoType1 {
            constructor(_buf_) {
                this.x1 = _buf_.ReadInt();
            }
            x1;
            resolve(_tables) {
            }
        }
        test.DemoType1 = DemoType1;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class DemoDynamic {
            static constructorFrom(_buf_) {
                switch (_buf_.ReadInt()) {
                    case -2138341747: return new test.DemoD2(_buf_);
                    case -2138341717: return new test.DemoE1(_buf_);
                    case -2138341744: return new test.DemoD5(_buf_);
                    default: throw new Error();
                }
            }
            constructor(_buf_) {
                this.x1 = _buf_.ReadInt();
            }
            x1;
            resolve(_tables) {
            }
        }
        test.DemoDynamic = DemoDynamic;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class DemoD2 extends test.DemoDynamic {
            constructor(_buf_) {
                super(_buf_);
                this.x2 = _buf_.ReadInt();
            }
            x2;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        test.DemoD2 = DemoD2;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class DemoD3 extends test.DemoDynamic {
            static constructorFrom(_buf_) {
                switch (_buf_.ReadInt()) {
                    case -2138341717: return new test.DemoE1(_buf_);
                    default: throw new Error();
                }
            }
            constructor(_buf_) {
                super(_buf_);
                this.x3 = _buf_.ReadInt();
            }
            x3;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        test.DemoD3 = DemoD3;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class DemoE1 extends test.DemoD3 {
            constructor(_buf_) {
                super(_buf_);
                this.x4 = _buf_.ReadInt();
            }
            x4;
            resolve(_tables) {
                super.resolve(_tables);
            }
        }
        test.DemoE1 = DemoE1;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class DemoD5 extends test.DemoDynamic {
            constructor(_buf_) {
                super(_buf_);
                this.time = new test.DateTimeRange(_buf_);
            }
            time;
            resolve(_tables) {
                super.resolve(_tables);
                if (this.time != null) {
                    this.time.resolve(_tables);
                }
            }
        }
        test.DemoD5 = DemoD5;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class DateTimeRange {
            constructor(_buf_) {
                this.startTime = _buf_.ReadInt();
                this.endTime = _buf_.ReadInt();
            }
            startTime;
            endTime;
            resolve(_tables) {
            }
        }
        test.DateTimeRange = DateTimeRange;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class DemoE2 {
            constructor(_buf_) {
                if (_buf_.ReadBool()) {
                    this.y1 = _buf_.ReadInt();
                }
                else {
                    this.y1 = undefined;
                }
                this.y2 = _buf_.ReadBool();
            }
            y1;
            y2;
            resolve(_tables) {
            }
        }
        test.DemoE2 = DemoE2;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbSingleton {
            _data;
            constructor(_buf_) {
                if (_buf_.ReadInt() != 1)
                    throw new Error('table mode=one, but size != 1');
                this._data = new test.DemoSingletonType(_buf_);
            }
            getData() { return this._data; }
            get id() { return this._data.id; }
            get name() { return this._data.name; }
            get date() { return this._data.date; }
            resolve(_tables) {
                this._data.resolve(_tables);
            }
        }
        test.TbSingleton = TbSingleton;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class DemoSingletonType {
            constructor(_buf_) {
                this.id = _buf_.ReadInt();
                this.name = _buf_.ReadString();
                this.date = test.DemoDynamic.constructorFrom(_buf_);
            }
            id;
            name;
            date;
            resolve(_tables) {
                if (this.date != null) {
                    this.date.resolve(_tables);
                }
            }
        }
        test.DemoSingletonType = DemoSingletonType;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbDataFromMisc {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new test.DemoType2(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.x4, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        test.TbDataFromMisc = TbDataFromMisc;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbMultiRowRecord {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new test.MultiRowRecord(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        test.TbMultiRowRecord = TbMultiRowRecord;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class MultiRowRecord {
            constructor(_buf_) {
                this.id = _buf_.ReadInt();
                this.name = _buf_.ReadString();
                {
                    this.oneRows = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = new test.MultiRowType1(_buf_);
                        this.oneRows.push(_e);
                    }
                }
                {
                    this.multiRows1 = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = new test.MultiRowType1(_buf_);
                        this.multiRows1.push(_e);
                    }
                }
                {
                    let n = Math.min(_buf_.ReadSize(), _buf_.Size);
                    this.multiRows2 = [];
                    for (let i = 0; i < n; i++) {
                        let _e;
                        _e = new test.MultiRowType1(_buf_);
                        this.multiRows2.push(_e);
                    }
                }
                {
                    this.multiRows3 = new Set();
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = new test.MultiRowType2(_buf_);
                        this.multiRows3.add(_e);
                    }
                }
                {
                    this.multiRows4 = new Map();
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _k;
                        _k = _buf_.ReadInt();
                        let _v;
                        _v = new test.MultiRowType2(_buf_);
                        this.multiRows4.set(_k, _v);
                    }
                }
                {
                    this.multiRows5 = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = new test.MultiRowType3(_buf_);
                        this.multiRows5.push(_e);
                    }
                }
            }
            id;
            name;
            oneRows;
            multiRows1;
            multiRows2;
            multiRows3;
            multiRows4;
            multiRows5;
            resolve(_tables) {
                for (let _e of this.oneRows) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
                for (let _e of this.multiRows1) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
                for (let _e of this.multiRows2) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
                for (let _e of this.multiRows4.values()) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
                for (let _e of this.multiRows5) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        test.MultiRowRecord = MultiRowRecord;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class MultiRowType1 {
            constructor(_buf_) {
                this.id = _buf_.ReadInt();
                this.x = _buf_.ReadInt();
            }
            id;
            x;
            resolve(_tables) {
            }
        }
        test.MultiRowType1 = MultiRowType1;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class MultiRowType2 {
            constructor(_buf_) {
                this.id = _buf_.ReadInt();
                this.x = _buf_.ReadInt();
                this.y = _buf_.ReadFloat();
            }
            id;
            x;
            y;
            resolve(_tables) {
            }
        }
        test.MultiRowType2 = MultiRowType2;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class MultiRowType3 {
            constructor(_buf_) {
                this.id = _buf_.ReadInt();
                {
                    this.items = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = new test.MultiRowType1(_buf_);
                        this.items.push(_e);
                    }
                }
            }
            id;
            items;
            resolve(_tables) {
                for (let _e of this.items) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        test.MultiRowType3 = MultiRowType3;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbMultiRowTitle {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new test.MultiRowTitle(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        test.TbMultiRowTitle = TbMultiRowTitle;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class MultiRowTitle {
            constructor(_buf_) {
                this.id = _buf_.ReadInt();
                this.name = _buf_.ReadString();
                this.x1 = new test.H1(_buf_);
                {
                    this.x2 = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = new test.H2(_buf_);
                        this.x2.push(_e);
                    }
                }
                {
                    let n = Math.min(_buf_.ReadSize(), _buf_.Size);
                    this.x3 = [];
                    for (let i = 0; i < n; i++) {
                        let _e;
                        _e = new test.H2(_buf_);
                        this.x3.push(_e);
                    }
                }
            }
            id;
            name;
            x1;
            x2;
            x3;
            resolve(_tables) {
                if (this.x1 != null) {
                    this.x1.resolve(_tables);
                }
                for (let _e of this.x2) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
                for (let _e of this.x3) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        test.MultiRowTitle = MultiRowTitle;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class H1 {
            constructor(_buf_) {
                this.y2 = new test.H2(_buf_);
                this.y3 = _buf_.ReadInt();
            }
            y2;
            y3;
            resolve(_tables) {
                if (this.y2 != null) {
                    this.y2.resolve(_tables);
                }
            }
        }
        test.H1 = H1;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class H2 {
            constructor(_buf_) {
                this.z2 = _buf_.ReadInt();
                this.z3 = _buf_.ReadInt();
            }
            z2;
            z3;
            resolve(_tables) {
            }
        }
        test.H2 = H2;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbTestNull {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new test.TestNull(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        test.TbTestNull = TbTestNull;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TestNull {
            constructor(_buf_) {
                this.id = _buf_.ReadInt();
                if (_buf_.ReadBool()) {
                    this.x1 = _buf_.ReadInt();
                }
                else {
                    this.x1 = undefined;
                }
                if (_buf_.ReadBool()) {
                    this.x2 = _buf_.ReadInt();
                }
                else {
                    this.x2 = undefined;
                }
                if (_buf_.ReadBool()) {
                    this.x3 = new test.DemoType1(_buf_);
                }
                else {
                    this.x3 = undefined;
                }
                if (_buf_.ReadBool()) {
                    this.x4 = test.DemoDynamic.constructorFrom(_buf_);
                }
                else {
                    this.x4 = undefined;
                }
                if (_buf_.ReadBool()) {
                    this.s1 = _buf_.ReadString();
                }
                else {
                    this.s1 = undefined;
                }
                if (_buf_.ReadBool()) {
                    this.s2 = _buf_.ReadString();
                }
                else {
                    this.s2 = undefined;
                }
            }
            id;
            x1;
            x2;
            x3;
            x4;
            s1;
            s2;
            resolve(_tables) {
                if (this.x3 != null) {
                    this.x3.resolve(_tables);
                }
                if (this.x4 != null) {
                    this.x4.resolve(_tables);
                }
            }
        }
        test.TestNull = TestNull;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbDemoPrimitive {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new test.DemoPrimitiveTypesTable(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.x4, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        test.TbDemoPrimitive = TbDemoPrimitive;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class DemoPrimitiveTypesTable {
            constructor(_buf_) {
                this.x1 = _buf_.ReadBool();
                this.x2 = _buf_.ReadByte();
                this.x3 = _buf_.ReadShort();
                this.x4 = _buf_.ReadInt();
                this.x5 = _buf_.ReadLongAsNumber();
                this.x6 = _buf_.ReadFloat();
                this.x7 = _buf_.ReadDouble();
                this.s1 = _buf_.ReadString();
                this.s2 = _buf_.ReadString();
                this.v2 = Vector2.deserializeFrom(_buf_);
                this.v3 = Vector3.deserializeFrom(_buf_);
                this.v4 = Vector4.deserializeFrom(_buf_);
                this.t1 = _buf_.ReadInt();
            }
            x1;
            x2;
            x3;
            x4;
            x5;
            x6;
            x7;
            s1;
            s2;
            v2;
            v3;
            v4;
            t1;
            resolve(_tables) {
            }
        }
        test.DemoPrimitiveTypesTable = DemoPrimitiveTypesTable;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbTestString {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new test.TestString(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        test.TbTestString = TbTestString;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TestString {
            constructor(_buf_) {
                this.id = _buf_.ReadInt();
                this.s1 = _buf_.ReadString();
                this.cs1 = new test.CompactString(_buf_);
                this.cs2 = new test.CompactString(_buf_);
            }
            id;
            s1;
            cs1;
            cs2;
            resolve(_tables) {
                if (this.cs1 != null) {
                    this.cs1.resolve(_tables);
                }
                if (this.cs2 != null) {
                    this.cs2.resolve(_tables);
                }
            }
        }
        test.TestString = TestString;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class CompactString {
            constructor(_buf_) {
                this.id = _buf_.ReadInt();
                this.s2 = _buf_.ReadString();
                this.s3 = _buf_.ReadString();
            }
            id;
            s2;
            s3;
            resolve(_tables) {
            }
        }
        test.CompactString = CompactString;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbDemoGroup {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new test.DemoGroup(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        test.TbDemoGroup = TbDemoGroup;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class DemoGroup {
            constructor(_buf_) {
                this.id = _buf_.ReadInt();
                this.x1 = _buf_.ReadInt();
                this.x2 = _buf_.ReadInt();
                this.x3 = _buf_.ReadInt();
                this.x4 = _buf_.ReadInt();
                this.x5 = new test.InnerGroup(_buf_);
            }
            id;
            x1;
            x2;
            x3;
            x4;
            x5;
            resolve(_tables) {
                if (this.x5 != null) {
                    this.x5.resolve(_tables);
                }
            }
        }
        test.DemoGroup = DemoGroup;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class InnerGroup {
            constructor(_buf_) {
                this.y1 = _buf_.ReadInt();
                this.y2 = _buf_.ReadInt();
                this.y3 = _buf_.ReadInt();
                this.y4 = _buf_.ReadInt();
            }
            y1;
            y2;
            y3;
            y4;
            resolve(_tables) {
            }
        }
        test.InnerGroup = InnerGroup;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbDemoGroup_C {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new test.DemoGroup(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        test.TbDemoGroup_C = TbDemoGroup_C;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbDemoGroup_S {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new test.DemoGroup(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        test.TbDemoGroup_S = TbDemoGroup_S;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbDemoGroup_E {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new test.DemoGroup(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        test.TbDemoGroup_E = TbDemoGroup_E;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbTestGlobal {
            _data;
            constructor(_buf_) {
                if (_buf_.ReadInt() != 1)
                    throw new Error('table mode=one, but size != 1');
                this._data = new test.TestGlobal(_buf_);
            }
            getData() { return this._data; }
            get unlockEquip() { return this._data.unlockEquip; }
            get unlockHero() { return this._data.unlockHero; }
            resolve(_tables) {
                this._data.resolve(_tables);
            }
        }
        test.TbTestGlobal = TbTestGlobal;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TestGlobal {
            constructor(_buf_) {
                this.unlockEquip = _buf_.ReadInt();
                this.unlockHero = _buf_.ReadInt();
            }
            unlockEquip;
            unlockHero;
            resolve(_tables) {
            }
        }
        test.TestGlobal = TestGlobal;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbDetectCsvEncoding {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new test.DetectEncoding(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        test.TbDetectCsvEncoding = TbDetectCsvEncoding;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class DetectEncoding {
            constructor(_buf_) {
                this.id = _buf_.ReadInt();
                this.name = _buf_.ReadString();
            }
            id;
            name;
            resolve(_tables) {
            }
        }
        test.DetectEncoding = DetectEncoding;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbDefineFromExcel {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new test.DefineFromExcel(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        test.TbDefineFromExcel = TbDefineFromExcel;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        /**
         *
         */
        class DefineFromExcel {
            constructor(_buf_) {
                this.id = _buf_.ReadInt();
                this.x1 = _buf_.ReadBool();
                this.x5 = _buf_.ReadLongAsNumber();
                this.x6 = _buf_.ReadFloat();
                this.x8 = _buf_.ReadInt();
                this.x10 = _buf_.ReadString();
                this.x13 = _buf_.ReadInt();
                this.x14 = test.DemoDynamic.constructorFrom(_buf_);
                this.v2 = Vector2.deserializeFrom(_buf_);
                this.t1 = _buf_.ReadInt();
                {
                    let n = Math.min(_buf_.ReadSize(), _buf_.Size);
                    this.k1 = new Int32Array(n);
                    for (let i = 0; i < n; i++) {
                        let _e;
                        _e = _buf_.ReadInt();
                        this.k1[i] = _e;
                    }
                }
                {
                    this.k8 = new Map();
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _k;
                        _k = _buf_.ReadInt();
                        let _v;
                        _v = _buf_.ReadInt();
                        this.k8.set(_k, _v);
                    }
                }
                {
                    this.k9 = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = new test.DemoE2(_buf_);
                        this.k9.push(_e);
                    }
                }
            }
            /**
             * id的描述
             */
            id;
            /**
             * 字段的描述
             */
            x1;
            x5;
            x6;
            x8;
            x8_Ref = undefined;
            x10;
            x13;
            x14;
            v2;
            t1;
            k1;
            k8;
            k9;
            resolve(_tables) {
                this.x8_Ref = _tables.get('test.TbDemoPrimitive').get(this.x8);
                if (this.x14 != null) {
                    this.x14.resolve(_tables);
                }
                for (let _e of this.k9) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        test.DefineFromExcel = DefineFromExcel;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbDefineFromExcelOne {
            _data;
            constructor(_buf_) {
                if (_buf_.ReadInt() != 1)
                    throw new Error('table mode=one, but size != 1');
                this._data = new test.DefineFromExcelOne(_buf_);
            }
            getData() { return this._data; }
            /**
             * 装备解锁等级_描述
             */
            get unlockEquip() { return this._data.unlockEquip; }
            /**
             * 英雄解锁等级
             */
            get unlockHero() { return this._data.unlockHero; }
            /**
             * 默认头像
             */
            get defaultAvatar() { return this._data.defaultAvatar; }
            get defaultItem() { return this._data.defaultItem; }
            resolve(_tables) {
                this._data.resolve(_tables);
            }
        }
        test.TbDefineFromExcelOne = TbDefineFromExcelOne;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        /**
         *
         */
        class DefineFromExcelOne {
            constructor(_buf_) {
                this.unlockEquip = _buf_.ReadInt();
                this.unlockHero = _buf_.ReadInt();
                this.defaultAvatar = _buf_.ReadString();
                this.defaultItem = _buf_.ReadString();
            }
            /**
             * 装备解锁等级_描述
             */
            unlockEquip;
            /**
             * 英雄解锁等级
             */
            unlockHero;
            /**
             * 默认头像
             */
            defaultAvatar;
            defaultItem;
            resolve(_tables) {
            }
        }
        test.DefineFromExcelOne = DefineFromExcelOne;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbTestJson2 {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new test.TestJson2(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        test.TbTestJson2 = TbTestJson2;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TestJson2 {
            constructor(_buf_) {
                this.id = _buf_.ReadInt();
                {
                    this.m1 = new Map();
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _k;
                        _k = _buf_.ReadInt();
                        let _v;
                        _v = _buf_.ReadInt();
                        this.m1.set(_k, _v);
                    }
                }
                {
                    this.m2 = new Map();
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _k;
                        _k = _buf_.ReadLongAsNumber();
                        let _v;
                        _v = _buf_.ReadInt();
                        this.m2.set(_k, _v);
                    }
                }
                {
                    this.m3 = new Map();
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _k;
                        _k = _buf_.ReadString();
                        let _v;
                        _v = _buf_.ReadInt();
                        this.m3.set(_k, _v);
                    }
                }
                {
                    this.m4 = new Map();
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _k;
                        _k = _buf_.ReadString();
                        let _v;
                        _v = new test.DemoType1(_buf_);
                        this.m4.set(_k, _v);
                    }
                }
            }
            id;
            m1;
            m2;
            m3;
            m4;
            resolve(_tables) {
                for (let _e of this.m4.values()) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        test.TestJson2 = TestJson2;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbTestIndex {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new test.TestIndex(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        test.TbTestIndex = TbTestIndex;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TestIndex {
            constructor(_buf_) {
                this.id = _buf_.ReadInt();
                {
                    this.eles = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = new test.DemoType1(_buf_);
                        this.eles.push(_e);
                    }
                }
            }
            id;
            eles;
            resolve(_tables) {
                for (let _e of this.eles) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        test.TestIndex = TestIndex;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbDemoGroupDefineFromExcel {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new test.DemoGroup(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        test.TbDemoGroupDefineFromExcel = TbDemoGroupDefineFromExcel;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbDefineFromExcel2 {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new test.DefineFromExcel2(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.id, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        test.TbDefineFromExcel2 = TbDefineFromExcel2;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        /**
         *
         */
        class DefineFromExcel2 {
            constructor(_buf_) {
                this.id = _buf_.ReadInt();
                this.x1 = _buf_.ReadBool();
                this.x5 = _buf_.ReadLongAsNumber();
                this.x6 = _buf_.ReadFloat();
                this.x8 = _buf_.ReadInt();
                this.x10 = _buf_.ReadString();
                this.x13 = _buf_.ReadInt();
                this.x14 = test.DemoDynamic.constructorFrom(_buf_);
                this.v2 = Vector2.deserializeFrom(_buf_);
                this.t1 = _buf_.ReadInt();
                {
                    let n = Math.min(_buf_.ReadSize(), _buf_.Size);
                    this.k1 = new Int32Array(n);
                    for (let i = 0; i < n; i++) {
                        let _e;
                        _e = _buf_.ReadInt();
                        this.k1[i] = _e;
                    }
                }
                {
                    this.k8 = new Map();
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _k;
                        _k = _buf_.ReadInt();
                        let _v;
                        _v = _buf_.ReadInt();
                        this.k8.set(_k, _v);
                    }
                }
                {
                    this.k9 = [];
                    for (let i = 0, n = _buf_.ReadSize(); i < n; i++) {
                        let _e;
                        _e = new test.DemoE2(_buf_);
                        this.k9.push(_e);
                    }
                }
            }
            /**
             * id的描述
             */
            id;
            /**
             * 字段的描述
             */
            x1;
            x5;
            x6;
            x8;
            x8_Ref = undefined;
            x10;
            x13;
            x14;
            v2;
            t1;
            k1;
            k8;
            k9;
            resolve(_tables) {
                this.x8_Ref = _tables.get('test.TbDemoPrimitive').get(this.x8);
                if (this.x14 != null) {
                    this.x14.resolve(_tables);
                }
                for (let _e of this.k9) {
                    if (_e != null) {
                        _e.resolve(_tables);
                    }
                }
            }
        }
        test.DefineFromExcel2 = DefineFromExcel2;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        class TbTestExcelBean {
            _dataMap;
            _dataList;
            constructor(_buf_) {
                this._dataMap = new Map();
                this._dataList = [];
                for (let n = _buf_.ReadInt(); n > 0; n--) {
                    let _v;
                    _v = new test.TestExcelBean1(_buf_);
                    this._dataList.push(_v);
                    this._dataMap.set(_v.x1, _v);
                }
            }
            getDataMap() { return this._dataMap; }
            getDataList() { return this._dataList; }
            get(key) { return this._dataMap.get(key); }
            resolve(_tables) {
                for (var v of this._dataList) {
                    v.resolve(_tables);
                }
            }
        }
        test.TbTestExcelBean = TbTestExcelBean;
    })(test = cfg.test || (cfg.test = {}));
    (function (test) {
        /**
         * 这是个测试excel结构
         */
        class TestExcelBean1 {
            constructor(_buf_) {
                this.x1 = _buf_.ReadInt();
                this.x2 = _buf_.ReadString();
                this.x3 = _buf_.ReadInt();
                this.x4 = _buf_.ReadFloat();
            }
            /**
             * 最高品质
             */
            x1;
            /**
             * 黑色的
             */
            x2;
            /**
             * 蓝色的
             */
            x3;
            /**
             * 最差品质
             */
            x4;
            resolve(_tables) {
            }
        }
        test.TestExcelBean1 = TestExcelBean1;
    })(test = cfg.test || (cfg.test = {}));
    class Tables {
        _TbBlackboard;
        get TbBlackboard() { return this._TbBlackboard; }
        _TbBehaviorTree;
        get TbBehaviorTree() { return this._TbBehaviorTree; }
        _TbClazz;
        get TbClazz() { return this._TbClazz; }
        _TbDrop;
        get TbDrop() { return this._TbDrop; }
        _TbGlobalConfig;
        get TbGlobalConfig() { return this._TbGlobalConfig; }
        _TbDummy;
        get TbDummy() { return this._TbDummy; }
        _TbErrorInfo;
        get TbErrorInfo() { return this._TbErrorInfo; }
        _TbCodeInfo;
        get TbCodeInfo() { return this._TbCodeInfo; }
        _TbItem;
        /**
         * 道具表
         */
        get TbItem() { return this._TbItem; }
        _TbItemFunc;
        get TbItemFunc() { return this._TbItemFunc; }
        _TbItemExtra;
        get TbItemExtra() { return this._TbItemExtra; }
        _TbL10NDemo;
        get TbL10NDemo() { return this._TbL10NDemo; }
        _TbPatchDemo;
        get TbPatchDemo() { return this._TbPatchDemo; }
        _TbSystemMail;
        get TbSystemMail() { return this._TbSystemMail; }
        _TbGlobalMail;
        get TbGlobalMail() { return this._TbGlobalMail; }
        _TbRoleLevelExpAttr;
        get TbRoleLevelExpAttr() { return this._TbRoleLevelExpAttr; }
        _TbRoleLevelBonusCoefficient;
        get TbRoleLevelBonusCoefficient() { return this._TbRoleLevelBonusCoefficient; }
        _TbTestTag;
        get TbTestTag() { return this._TbTestTag; }
        _TbFullTypes;
        get TbFullTypes() { return this._TbFullTypes; }
        _TbSingleton;
        get TbSingleton() { return this._TbSingleton; }
        _TbDataFromMisc;
        get TbDataFromMisc() { return this._TbDataFromMisc; }
        _TbMultiRowRecord;
        get TbMultiRowRecord() { return this._TbMultiRowRecord; }
        _TbMultiRowTitle;
        get TbMultiRowTitle() { return this._TbMultiRowTitle; }
        _TbTestNull;
        get TbTestNull() { return this._TbTestNull; }
        _TbDemoPrimitive;
        get TbDemoPrimitive() { return this._TbDemoPrimitive; }
        _TbTestString;
        get TbTestString() { return this._TbTestString; }
        _TbDemoGroup;
        get TbDemoGroup() { return this._TbDemoGroup; }
        _TbDemoGroup_C;
        get TbDemoGroup_C() { return this._TbDemoGroup_C; }
        _TbDemoGroup_S;
        get TbDemoGroup_S() { return this._TbDemoGroup_S; }
        _TbDemoGroup_E;
        get TbDemoGroup_E() { return this._TbDemoGroup_E; }
        _TbTestGlobal;
        get TbTestGlobal() { return this._TbTestGlobal; }
        _TbDetectCsvEncoding;
        get TbDetectCsvEncoding() { return this._TbDetectCsvEncoding; }
        _TbDefineFromExcel;
        get TbDefineFromExcel() { return this._TbDefineFromExcel; }
        _TbDefineFromExcelOne;
        get TbDefineFromExcelOne() { return this._TbDefineFromExcelOne; }
        _TbTestJson2;
        get TbTestJson2() { return this._TbTestJson2; }
        _TbTestIndex;
        get TbTestIndex() { return this._TbTestIndex; }
        _TbDemoGroupDefineFromExcel;
        get TbDemoGroupDefineFromExcel() { return this._TbDemoGroupDefineFromExcel; }
        _TbDefineFromExcel2;
        get TbDefineFromExcel2() { return this._TbDefineFromExcel2; }
        _TbTestExcelBean;
        get TbTestExcelBean() { return this._TbTestExcelBean; }
        constructor(loader) {
            let tables = new Map();
            this._TbBlackboard = new ai.TbBlackboard(loader('ai.TbBlackboard'));
            tables.set('ai.TbBlackboard', this._TbBlackboard);
            this._TbBehaviorTree = new ai.TbBehaviorTree(loader('ai.TbBehaviorTree'));
            tables.set('ai.TbBehaviorTree', this._TbBehaviorTree);
            this._TbClazz = new blueprint.TbClazz(loader('blueprint.TbClazz'));
            tables.set('blueprint.TbClazz', this._TbClazz);
            this._TbDrop = new bonus.TbDrop(loader('bonus.TbDrop'));
            tables.set('bonus.TbDrop', this._TbDrop);
            this._TbGlobalConfig = new common.TbGlobalConfig(loader('common.TbGlobalConfig'));
            tables.set('common.TbGlobalConfig', this._TbGlobalConfig);
            this._TbDummy = new common.TbDummy(loader('common.TbDummy'));
            tables.set('common.TbDummy', this._TbDummy);
            this._TbErrorInfo = new error.TbErrorInfo(loader('error.TbErrorInfo'));
            tables.set('error.TbErrorInfo', this._TbErrorInfo);
            this._TbCodeInfo = new error.TbCodeInfo(loader('error.TbCodeInfo'));
            tables.set('error.TbCodeInfo', this._TbCodeInfo);
            this._TbItem = new item.TbItem(loader('item.TbItem'));
            tables.set('item.TbItem', this._TbItem);
            this._TbItemFunc = new item.TbItemFunc(loader('item.TbItemFunc'));
            tables.set('item.TbItemFunc', this._TbItemFunc);
            this._TbItemExtra = new item.TbItemExtra(loader('item.TbItemExtra'));
            tables.set('item.TbItemExtra', this._TbItemExtra);
            this._TbL10NDemo = new l10n.TbL10NDemo(loader('l10n.TbL10NDemo'));
            tables.set('l10n.TbL10NDemo', this._TbL10NDemo);
            this._TbPatchDemo = new l10n.TbPatchDemo(loader('l10n.TbPatchDemo'));
            tables.set('l10n.TbPatchDemo', this._TbPatchDemo);
            this._TbSystemMail = new mail.TbSystemMail(loader('mail.TbSystemMail'));
            tables.set('mail.TbSystemMail', this._TbSystemMail);
            this._TbGlobalMail = new mail.TbGlobalMail(loader('mail.TbGlobalMail'));
            tables.set('mail.TbGlobalMail', this._TbGlobalMail);
            this._TbRoleLevelExpAttr = new role.TbRoleLevelExpAttr(loader('role.TbRoleLevelExpAttr'));
            tables.set('role.TbRoleLevelExpAttr', this._TbRoleLevelExpAttr);
            this._TbRoleLevelBonusCoefficient = new role.TbRoleLevelBonusCoefficient(loader('role.TbRoleLevelBonusCoefficient'));
            tables.set('role.TbRoleLevelBonusCoefficient', this._TbRoleLevelBonusCoefficient);
            this._TbTestTag = new tag.TbTestTag(loader('tag.TbTestTag'));
            tables.set('tag.TbTestTag', this._TbTestTag);
            this._TbFullTypes = new test.TbFullTypes(loader('test.TbFullTypes'));
            tables.set('test.TbFullTypes', this._TbFullTypes);
            this._TbSingleton = new test.TbSingleton(loader('test.TbSingleton'));
            tables.set('test.TbSingleton', this._TbSingleton);
            this._TbDataFromMisc = new test.TbDataFromMisc(loader('test.TbDataFromMisc'));
            tables.set('test.TbDataFromMisc', this._TbDataFromMisc);
            this._TbMultiRowRecord = new test.TbMultiRowRecord(loader('test.TbMultiRowRecord'));
            tables.set('test.TbMultiRowRecord', this._TbMultiRowRecord);
            this._TbMultiRowTitle = new test.TbMultiRowTitle(loader('test.TbMultiRowTitle'));
            tables.set('test.TbMultiRowTitle', this._TbMultiRowTitle);
            this._TbTestNull = new test.TbTestNull(loader('test.TbTestNull'));
            tables.set('test.TbTestNull', this._TbTestNull);
            this._TbDemoPrimitive = new test.TbDemoPrimitive(loader('test.TbDemoPrimitive'));
            tables.set('test.TbDemoPrimitive', this._TbDemoPrimitive);
            this._TbTestString = new test.TbTestString(loader('test.TbTestString'));
            tables.set('test.TbTestString', this._TbTestString);
            this._TbDemoGroup = new test.TbDemoGroup(loader('test.TbDemoGroup'));
            tables.set('test.TbDemoGroup', this._TbDemoGroup);
            this._TbDemoGroup_C = new test.TbDemoGroup_C(loader('test.TbDemoGroup_C'));
            tables.set('test.TbDemoGroup_C', this._TbDemoGroup_C);
            this._TbDemoGroup_S = new test.TbDemoGroup_S(loader('test.TbDemoGroup_S'));
            tables.set('test.TbDemoGroup_S', this._TbDemoGroup_S);
            this._TbDemoGroup_E = new test.TbDemoGroup_E(loader('test.TbDemoGroup_E'));
            tables.set('test.TbDemoGroup_E', this._TbDemoGroup_E);
            this._TbTestGlobal = new test.TbTestGlobal(loader('test.TbTestGlobal'));
            tables.set('test.TbTestGlobal', this._TbTestGlobal);
            this._TbDetectCsvEncoding = new test.TbDetectCsvEncoding(loader('test.TbDetectCsvEncoding'));
            tables.set('test.TbDetectCsvEncoding', this._TbDetectCsvEncoding);
            this._TbDefineFromExcel = new test.TbDefineFromExcel(loader('test.TbDefineFromExcel'));
            tables.set('test.TbDefineFromExcel', this._TbDefineFromExcel);
            this._TbDefineFromExcelOne = new test.TbDefineFromExcelOne(loader('test.TbDefineFromExcelOne'));
            tables.set('test.TbDefineFromExcelOne', this._TbDefineFromExcelOne);
            this._TbTestJson2 = new test.TbTestJson2(loader('test.TbTestJson2'));
            tables.set('test.TbTestJson2', this._TbTestJson2);
            this._TbTestIndex = new test.TbTestIndex(loader('test.TbTestIndex'));
            tables.set('test.TbTestIndex', this._TbTestIndex);
            this._TbDemoGroupDefineFromExcel = new test.TbDemoGroupDefineFromExcel(loader('test.TbDemoGroupDefineFromExcel'));
            tables.set('test.TbDemoGroupDefineFromExcel', this._TbDemoGroupDefineFromExcel);
            this._TbDefineFromExcel2 = new test.TbDefineFromExcel2(loader('test.TbDefineFromExcel2'));
            tables.set('test.TbDefineFromExcel2', this._TbDefineFromExcel2);
            this._TbTestExcelBean = new test.TbTestExcelBean(loader('test.TbTestExcelBean'));
            tables.set('test.TbTestExcelBean', this._TbTestExcelBean);
            this._TbBlackboard.resolve(tables);
            this._TbBehaviorTree.resolve(tables);
            this._TbClazz.resolve(tables);
            this._TbDrop.resolve(tables);
            this._TbGlobalConfig.resolve(tables);
            this._TbDummy.resolve(tables);
            this._TbErrorInfo.resolve(tables);
            this._TbCodeInfo.resolve(tables);
            this._TbItem.resolve(tables);
            this._TbItemFunc.resolve(tables);
            this._TbItemExtra.resolve(tables);
            this._TbL10NDemo.resolve(tables);
            this._TbPatchDemo.resolve(tables);
            this._TbSystemMail.resolve(tables);
            this._TbGlobalMail.resolve(tables);
            this._TbRoleLevelExpAttr.resolve(tables);
            this._TbRoleLevelBonusCoefficient.resolve(tables);
            this._TbTestTag.resolve(tables);
            this._TbFullTypes.resolve(tables);
            this._TbSingleton.resolve(tables);
            this._TbDataFromMisc.resolve(tables);
            this._TbMultiRowRecord.resolve(tables);
            this._TbMultiRowTitle.resolve(tables);
            this._TbTestNull.resolve(tables);
            this._TbDemoPrimitive.resolve(tables);
            this._TbTestString.resolve(tables);
            this._TbDemoGroup.resolve(tables);
            this._TbDemoGroup_C.resolve(tables);
            this._TbDemoGroup_S.resolve(tables);
            this._TbDemoGroup_E.resolve(tables);
            this._TbTestGlobal.resolve(tables);
            this._TbDetectCsvEncoding.resolve(tables);
            this._TbDefineFromExcel.resolve(tables);
            this._TbDefineFromExcelOne.resolve(tables);
            this._TbTestJson2.resolve(tables);
            this._TbTestIndex.resolve(tables);
            this._TbDemoGroupDefineFromExcel.resolve(tables);
            this._TbDefineFromExcel2.resolve(tables);
            this._TbTestExcelBean.resolve(tables);
        }
    }
    cfg.Tables = Tables;
})(cfg = exports.cfg || (exports.cfg = {}));
