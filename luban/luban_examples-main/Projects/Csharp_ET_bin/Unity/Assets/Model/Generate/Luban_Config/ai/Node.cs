
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Bright.Serialization;
using System.Collections.Generic;



namespace cfg.ai
{

public abstract partial class Node :  Bright.Config.BeanBase 
{
    public Node(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        NodeName = _buf.ReadString();
    }

    public Node(int id, string node_name ) 
    {
        this.Id = id;
        this.NodeName = node_name;
    }

    public static Node DeserializeNode(ByteBuf _buf)
    {
        switch (_buf.ReadInt())
        {
            case ai.UeSetDefaultFocus.ID: return new ai.UeSetDefaultFocus(_buf);
            case ai.ExecuteTimeStatistic.ID: return new ai.ExecuteTimeStatistic(_buf);
            case ai.ChooseTarget.ID: return new ai.ChooseTarget(_buf);
            case ai.KeepFaceTarget.ID: return new ai.KeepFaceTarget(_buf);
            case ai.GetOwnerPlayer.ID: return new ai.GetOwnerPlayer(_buf);
            case ai.UpdateDailyBehaviorProps.ID: return new ai.UpdateDailyBehaviorProps(_buf);
            case ai.UeLoop.ID: return new ai.UeLoop(_buf);
            case ai.UeCooldown.ID: return new ai.UeCooldown(_buf);
            case ai.UeTimeLimit.ID: return new ai.UeTimeLimit(_buf);
            case ai.UeBlackboard.ID: return new ai.UeBlackboard(_buf);
            case ai.UeForceSuccess.ID: return new ai.UeForceSuccess(_buf);
            case ai.IsAtLocation.ID: return new ai.IsAtLocation(_buf);
            case ai.DistanceLessThan.ID: return new ai.DistanceLessThan(_buf);
            case ai.Sequence.ID: return new ai.Sequence(_buf);
            case ai.Selector.ID: return new ai.Selector(_buf);
            case ai.SimpleParallel.ID: return new ai.SimpleParallel(_buf);
            case ai.UeWait.ID: return new ai.UeWait(_buf);
            case ai.UeWaitBlackboardTime.ID: return new ai.UeWaitBlackboardTime(_buf);
            case ai.MoveToTarget.ID: return new ai.MoveToTarget(_buf);
            case ai.ChooseSkill.ID: return new ai.ChooseSkill(_buf);
            case ai.MoveToRandomLocation.ID: return new ai.MoveToRandomLocation(_buf);
            case ai.MoveToLocation.ID: return new ai.MoveToLocation(_buf);
            case ai.DebugPrint.ID: return new ai.DebugPrint(_buf);
            default: throw new SerializationException();
        }
    }

    public readonly int Id;
    public readonly string NodeName;


    public virtual void Resolve(Dictionary<string, object> _tables)
    {
        OnResolveFinish(_tables);
    }

    partial void OnResolveFinish(Dictionary<string, object> _tables);

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "NodeName:" + NodeName + ","
        + "}";
    }
    }

}

