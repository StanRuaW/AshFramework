
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
package cfg

import (
    "bright/serialization"
)

import "errors"

type Ai_FlowNode struct {
    Ai_Node
    Decorators []interface{}
    Services []interface{}
}


func NewAi_FlowNode(_buf *serialization.ByteBuf) (_v interface{}, err error) {
    var id int32
    if id, err = _buf.ReadInt() ; err != nil {
        return
    }
    switch id {
        case -1789006105: return NewAi_Sequence(_buf)
        case -1946981627: return NewAi_Selector(_buf)
        case -1952582529: return NewAi_SimpleParallel(_buf)
        case -512994101: return NewAi_UeWait(_buf)
        case 1215378271: return NewAi_UeWaitBlackboardTime(_buf)
        case 514987779: return NewAi_MoveToTarget(_buf)
        case -918812268: return NewAi_ChooseSkill(_buf)
        case -2140042998: return NewAi_MoveToRandomLocation(_buf)
        case -969953113: return NewAi_MoveToLocation(_buf)
        case 1357409728: return NewAi_DebugPrint(_buf)
        default: return nil, errors.New("unknown type id")
    }
    return
}

func NewAi_FlowNode_Body(_buf *serialization.ByteBuf) (_v *Ai_FlowNode, err error) {
    _v = &Ai_FlowNode{}
    var _p *Ai_Node
     if _p, err = NewAi_Node_Body(_buf) ; err != nil { return }
    _v.Ai_Node = *_p
     {
                _v.Decorators = make([]interface{}, 0)
                var _n_ int
                if _n_, err = _buf.ReadSize(); err != nil {return}
                for i := 0 ; i < _n_ ; i++ {
                    var _e_ interface{}
                    { if _e_, err = NewAi_Decorator(_buf); err != nil { return } }
                    _v.Decorators = append(_v.Decorators, _e_)
                }
            }

     {
                _v.Services = make([]interface{}, 0)
                var _n_ int
                if _n_, err = _buf.ReadSize(); err != nil {return}
                for i := 0 ; i < _n_ ; i++ {
                    var _e_ interface{}
                    { if _e_, err = NewAi_Service(_buf); err != nil { return } }
                    _v.Services = append(_v.Services, _e_)
                }
            }

    return
}


