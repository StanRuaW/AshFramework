
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
package cfg

import (
    "bright/serialization"
)

import "errors"

type Blueprint_Clazz struct {
    Name string
    Desc string
    Parents []interface{}
    Methods []interface{}
}


func NewBlueprint_Clazz(_buf *serialization.ByteBuf) (_v interface{}, err error) {
    var id int32
    if id, err = _buf.ReadInt() ; err != nil {
        return
    }
    switch id {
        case 2114170750: return NewBlueprint_Interface(_buf)
        case -2073576778: return NewBlueprint_NormalClazz(_buf)
        case 1827364892: return NewBlueprint_EnumClazz(_buf)
        default: return nil, errors.New("unknown type id")
    }
    return
}

func NewBlueprint_Clazz_Body(_buf *serialization.ByteBuf) (_v *Blueprint_Clazz, err error) {
    _v = &Blueprint_Clazz{}
    { if _v.Name, err = _buf.ReadString(); err != nil { return } }
    { if _v.Desc, err = _buf.ReadString(); err != nil { return } }
     {
                _v.Parents = make([]interface{}, 0)
                var _n_ int
                if _n_, err = _buf.ReadSize(); err != nil {return}
                for i := 0 ; i < _n_ ; i++ {
                    var _e_ interface{}
                    { if _e_, err = NewBlueprint_Clazz(_buf); err != nil { return } }
                    _v.Parents = append(_v.Parents, _e_)
                }
            }

     {
                _v.Methods = make([]interface{}, 0)
                var _n_ int
                if _n_, err = _buf.ReadSize(); err != nil {return}
                for i := 0 ; i < _n_ ; i++ {
                    var _e_ interface{}
                    { if _e_, err = NewBlueprint_Method(_buf); err != nil { return } }
                    _v.Methods = append(_v.Methods, _e_)
                }
            }

    return
}


