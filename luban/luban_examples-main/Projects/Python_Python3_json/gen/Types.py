
'''
  <auto-generated>
    This code was generated by a tool.
    Changes to this file may cause incorrect behavior and will be lost if
    the code is regenerated.
  </auto-generated>
'''


from enum import Enum
import abc


class Vector2:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def __str__(self):
        return '{%g,%g}' % (self.x, self.y)

    @staticmethod
    def fromJson(_json_):
        x = _json_['x']
        y = _json_['y']
        if (x == None or y == None):
            raise Exception()
        return Vector2(x, y)


class Vector3:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z
    def __str__(self):
        return '{%f,%f,%f}' % (self.x, self.y, self.z)
    @staticmethod
    def fromJson(_json_):
        x = _json_['x']
        y = _json_['y']
        z = _json_['z']
        if (x == None or y == None or z == None):
            raise Exception()
        return Vector3(x, y, z)

class Vector4:
    def __init__(self, x, y, z, w):
        self.x = x
        self.y = y
        self.z = z
        self.w = w
    def __str__(self):
        return '{%g,%g,%g,%g}' % (self.x, self.y, self.z, self.w)
        
    @staticmethod
    def fromJson(_json_):
        x = _json_['x']
        y = _json_['y']
        z = _json_['z']
        w = _json_['w']
        if (x == None or y == None or z == None or w == None):
            raise Exception()
        return Vector4(x, y, z, w)



class role_Consts:
    MAX_NAME_LENGTH = 20
    MAX_USER_ROLE_NUM = 10



class test_DemoConst:
    x1 = 0
    x2 = 3242
    x3 = 444.3
    x4 = 55.3



class ai_EExecutor(Enum):
    CLIENT = 0
    SERVER = 1


class ai_EKeyType(Enum):
    BOOL = 1
    INT = 2
    FLOAT = 3
    STRING = 4
    VECTOR = 5
    ROTATOR = 6
    NAME = 7
    CLASS = 8
    ENUM = 9
    OBJECT = 10


class ai_EFlowAbortMode(Enum):
    NONE = 0
    LOWER_PRIORITY = 1
    SELF = 2
    BOTH = 3


class ai_EFinishMode(Enum):
    IMMEDIATE = 0
    DELAYED = 1


class ai_ENotifyObserverMode(Enum):
    ON_VALUE_CHANGE = 0
    ON_RESULT_CHANGE = 1


class ai_EOperator(Enum):
    IS_EQUAL_TO = 0
    IS_NOT_EQUAL_TO = 1
    IS_LESS_THAN = 2
    IS_LESS_THAN_OR_EQUAL_TO = 3
    IS_GREAT_THAN = 4
    IS_GREAT_THAN_OR_EQUAL_TO = 5
    CONTAINS = 6
    NOT_CONTAINS = 7


class common_EBoolOperator(Enum):
    AND = 0
    OR = 1


class error_EOperation(Enum):
    '''
    登出
    '''
    LOGOUT = 0
    '''
    重启
    '''
    RESTART = 1


class error_EErrorCode(Enum):
    OK = 0
    SERVER_NOT_EXISTS = 1
    HAS_BIND_SERVER = 2
    AUTH_FAIL = 3
    NOT_BIND_SERVER = 4
    SERVER_ACCESS_FAIL = 5
    EXAMPLE_FLASH = 6
    EXAMPLE_MSGBOX = 7
    EXAMPLE_DLG_OK = 8
    EXAMPLE_DLG_OK_CANCEL = 9
    ROLE_CREATE_NAME_INVALID_CHAR = 100
    ROLE_CREATE_NAME_EMPTY = 101
    ROLE_CREATE_NAME_EXCEED_MAX_LENGTH = 102
    ROLE_CREATE_ROLE_LIST_FULL = 103
    ROLE_CREATE_INVALID_PROFESSION = 104
    ROLE_CREATE_INVALID_GENDER = 105
    ROLE_NOT_OWNED_BY_USER = 106
    ROLE_LEVEL_NOT_ARRIVE = 107
    PARAM_ILLEGAL = 200
    TEMP_BAG_NOT_EMPTY = 201
    ITEM_CAN_NOT_USE = 202
    CURRENCY_NOT_ENOUGH = 203
    BAG_IS_FULL = 204
    ITEM_NOT_ENOUGH = 205
    ITEM_IN_BAG = 206
    GENDER_NOT_MATCH = 300
    LEVEL_TOO_LOW = 301
    LEVEL_TOO_HIGH = 302
    EXCEED_LIMIT = 303
    OVER_TIME = 304
    SERVER_ERROR = 305
    SKILL_NOT_IN_LIST = 400
    SKILL_NOT_COOLDOWN = 401
    SKILL_TARGET_NOT_EXIST = 402
    SKILL_ANOTHER_CASTING = 403
    SKILL_OUT_OF_DISTANCE = 404
    SKILL_TARGET_CAMP_NOT_MATCH = 405
    SKILL_INVALID_DIRECTION = 406
    SKILL_NOT_IN_SELECT_SHAPE = 407
    SKILL_ENERGY_NOT_ENOUGH = 408
    DIALOG_NODE_NOT_CHOOSEN = 500
    DIALOG_NOT_FINISH = 501
    DIALOG_HAS_FINISH = 502
    QUEST_STAGE_NOT_FINISHED = 503
    QUEST_NOT_DOING = 504
    QUEST_STAGE_NOT_DOING = 505
    QUEST_HAS_ACCEPTED = 506
    MAP_OBJECT_NOT_EXIST = 600
    INTERACTION_OBJECT_NOT_SUPPORT_OPERATION = 601
    HAS_NOT_EQUIP = 602
    HANDHELD_EQUIP_ID_NOT_MATCH = 603
    NOT_AVAILABLE_SUIT_ID = 604
    NO_INTERACTION_COMPONENT = 605
    HAS_INTERACTED = 606
    VIALITY_NOT_ENOUGH = 607
    PLAYER_SESSION_NOT_EXIST = 608
    PLAYER_SESSION_WORLD_PLAYER_NOT_INIT = 609
    MAP_NOT_EXIST = 610
    MAIL_TYPE_ERROR = 700
    MAIL_NOT_EXITST = 701
    MAIL_HAVE_DELETED = 702
    MAIL_AWARD_HAVE_RECEIVED = 703
    MAIL_OPERATE_TYPE_ERROR = 704
    MAIL_CONDITION_NOT_MEET = 705
    MAIL_STATE_ERROR = 706
    MAIL_NO_AWARD = 707
    MAIL_BOX_IS_FULL = 708
    PROP_SCORE_NOT_BIGGER_THAN = 800
    NOT_WEAR_CLOTHES = 801
    NOT_WEAR_SUIT = 802
    SUIT_NOT_UNLOCK = 900
    SUIT_COMPONENT_NOT_UNLOCK = 901
    SUIT_STATE_ERROR = 902
    SUIT_COMPONENT_STATE_ERROR = 903
    SUIT_COMPONENT_NO_NEED_LEARN = 904
    STORE_NOT_ENABLED = 1000
    SHELF_NOT_ENABLED = 1001
    GOODS_NOT_ENABLED = 1002
    GOODS_NOT_IN_CUR_REFRESH = 1003
    RETRY = 1100
    NOT_COOLDOWN = 1101
    SELFIE_UNLOCK = 1200
    SELFIE_ALREADY_UNLOCK = 1201
    SELFIE_LACK_STARTS = 1202
    SELFIE_HAD_REWARD = 1203


'''
道具品质
'''
class item_EItemQuality(Enum):
    '''
    白
    '''
    WHITE = 0
    '''
    绿
    '''
    GREEN = 1
    '''
    蓝
    '''
    BLUE = 2
    '''
    紫
    '''
    PURPLE = 3
    '''
    金
    '''
    GOLDEN = 4


class item_ECurrencyType(Enum):
    '''
    钻石
    '''
    DIAMOND = 1
    '''
    金币
    '''
    GOLD = 2
    '''
    银币
    '''
    SILVER = 3
    '''
    经验
    '''
    EXP = 4
    '''
    能量点
    '''
    POWER_POINT = 5


class item_EMajorType(Enum):
    '''
    货币
    '''
    CURRENCY = 1
    '''
    服装
    '''
    CLOTH = 2
    '''
    任务
    '''
    QUEST = 3
    '''
    消耗品
    '''
    CONSUMABLES = 4
    '''
    宝箱
    '''
    TREASURE_BOX = 5
    '''
    成就和称谓
    '''
    ACHIEVEMENT_AND_TITLE = 6
    '''
    头像框
    '''
    HEAD_FRAME = 7
    '''
    语音
    '''
    VOICE = 8
    '''
    动作
    '''
    ACTION = 9
    '''
    扩容道具
    '''
    EXPANSION = 10
    '''
    制作材料
    '''
    MATERIAL = 11


class item_EMinorType(Enum):
    '''
    钻石
    '''
    DIAMOND = 101
    '''
    金币
    '''
    GOLD = 102
    '''
    银币
    '''
    SILVER = 103
    '''
    经验
    '''
    EXP = 104
    '''
    能量点
    '''
    POWER_POINT = 105
    '''
    发型
    '''
    HAIR_STYLE = 210
    '''
    外套
    '''
    COAT = 220
    '''
    上衣
    '''
    UPPER_JACKET = 230
    '''
    裤子
    '''
    TROUSERS = 241
    '''
    裙子
    '''
    SKIRT = 242
    '''
    袜子
    '''
    SOCKS = 250
    '''
    鞋子
    '''
    SHOES = 260
    '''
    发饰
    '''
    HAIR_ACCESSORY = 271
    '''
    帽子
    '''
    HAT = 272
    '''
    耳饰
    '''
    EARRING = 273
    '''
    颈饰
    '''
    NECKLACE = 274
    '''
    腕饰
    '''
    BRACELET = 275
    '''
    发箍
    '''
    HAIR_CLASP = 276
    '''
    手套
    '''
    GLOVE = 277
    '''
    手持物
    '''
    HANDHELD_OBJECT = 278
    '''
    特殊
    '''
    SPECIAL = 279
    '''
    底妆
    '''
    BASE_COSMETIC = 281
    '''
    眉妆
    '''
    EYEBROW_COSMETIC = 282
    '''
    睫毛
    '''
    EYELASH = 283
    '''
    美瞳
    '''
    COSMETIC_CONTACT_LENSES = 284
    '''
    唇妆
    '''
    LIP_COSMETIC = 285
    '''
    肤色
    '''
    SKIN_COLOR = 286
    '''
    连衣裙
    '''
    ONE_PIECE_DRESS = 290
    '''
    换装场景
    '''
    SWITCH_CLOTHES_SCENE = 291
    '''
    任务道具
    '''
    QUEST = 301
    '''
    投掷物
    '''
    CAST = 401
    '''
    刀剑
    '''
    SWORD = 421
    '''
    弓箭
    '''
    BOW_ARROW = 422
    '''
    法杖
    '''
    WANDS = 423
    '''
    特殊工具
    '''
    SPECIAL_TOOL = 424
    '''
    食物
    '''
    FOOD = 403
    '''
    宝箱
    '''
    TREASURE_BOX = 501
    '''
    钥匙
    '''
    KEY = 502
    '''
    多选一宝箱
    '''
    MULTI_CHOOSE_TREASURE_BOX = 503
    '''
    成就相关
    '''
    ACHIEVEMENT = 601
    '''
    称谓相关
    '''
    TITLE = 602
    '''
    头像框
    '''
    AVATAR_FRAME = 701
    '''
    语音
    '''
    VOICE = 801
    '''
    特殊待机动作
    '''
    IDLE_POSE = 901
    '''
    拍照动作
    '''
    PHOTO_POSE = 902
    '''
    背包
    '''
    BAG = 1001
    '''
    好友数量
    '''
    FRIEND_CAPACITY = 1002
    '''
    制作材料
    '''
    CONSTRUCTION_MATERIAL = 1101
    '''
    设计图纸
    '''
    DESIGN_DRAWING = 1102


class item_EClothersStarQualityType(Enum):
    '''
    一星
    '''
    ONE = 1
    '''
    二星
    '''
    TWO = 2
    '''
    三星
    '''
    THREE = 3
    '''
    四星
    '''
    FOUR = 4
    '''
    五星
    '''
    FIVE = 5
    '''
    六星
    '''
    SIX = 6
    '''
    七星
    '''
    SEVEN = 7
    '''
    八星
    '''
    EIGHT = 8
    '''
    九星
    '''
    NINE = 9
    '''
    十星
    '''
    TEN = 10


class item_EClothersTag(Enum):
    '''
    防晒
    '''
    FANG_SHAI = 1
    '''
    舞者
    '''
    WU_ZHE = 2


class item_EUseType(Enum):
    '''
    手动
    '''
    MANUAL = 0
    '''
    自动
    '''
    AUTO = 1


class item_EClothesHidePartType(Enum):
    '''
    胸部
    '''
    CHEST = 0
    '''
    手
    '''
    HEAD = 1
    '''
    脊柱上
    '''
    SPINE_UPPER = 2
    '''
    脊柱下
    '''
    SPINE_LOWER = 3
    '''
    臀部
    '''
    HIP = 4
    '''
    腿上
    '''
    LEG_UPPER = 5
    '''
    腿中
    '''
    LEG_MIDDLE = 6
    '''
    腿下
    '''
    LEG_LOWER = 7


class item_EClothesPropertyType(Enum):
    '''
    简约
    '''
    JIAN_YUE = 1
    '''
    华丽
    '''
    HUA_LI = 2
    '''
    可爱
    '''
    KE_AI = 3
    '''
    成熟
    '''
    CHENG_SHU = 4
    '''
    活泼
    '''
    HUO_PO = 5
    '''
    优雅
    '''
    YOU_YA = 6
    '''
    清纯
    '''
    QING_CHUN = 7
    '''
    性感
    '''
    XING_GAN = 8
    '''
    清凉
    '''
    QING_LIANG = 9
    '''
    保暖
    '''
    BAO_NUAN = 10


class item_EItemFunctionType(Enum):
    '''
    更换手持物
    '''
    REPLACE_HANDHELD = 0
    '''
    使用设计图纸
    '''
    USE_DESIGN_DRAWING = 1


class limit_ENamespace(Enum):
    ITEM_DAILY_OBTAIN = 1
    TREASURE_DAILY_USE = 2
    STORE_GOODS_LIMIT_BUY = 3


class mail_EMailType(Enum):
    '''
    全局邮件
    '''
    GLOBAL = 0
    '''
    系统邮件
    '''
    SYSTEM = 1


class role_EGenderType(Enum):
    '''
    男
    '''
    MALE = 1
    '''
    女
    '''
    FEMALE = 2


class role_EProfession(Enum):
    TEST_PROFESSION = 1


class test_DemoEnum(Enum):
    '''
    aa
    '''
    A = 1
    '''
    bb
    '''
    B = 2
    '''
    cc
    '''
    C = 4
    '''
    dd
    '''
    D = 5


class test_ETestUeType(Enum):
    '''
    白
    '''
    WHITE = 0
    BLACK = 1


class test_ETestEmptyEnum(Enum):
    pass


class test_ETestEmptyEnum2(Enum):
    SMALL_THAN_256 = 255
    X_256 = 256
    X_257 = 257


class test_ETestQuality(Enum):
    '''
    最高品质
    '''
    A = 1
    '''
    黑色的
    '''
    B = 2
    '''
    蓝色的
    '''
    C = 3
    '''
    最差品质
    '''
    D = 4


class test_ETestCurrency(Enum):
    '''
    重要
    '''
    DIAMOND = 1
    '''
    有用
    '''
    GOLD = 2




class ai_TbBlackboard:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = ai_Blackboard(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.name] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)






class ai_Blackboard :

    def __init__(self, _json_):
        self.name = _json_['name']
        self.desc = _json_['desc']
        self.parent_name = _json_['parent_name']
        self.keys = []
        for _ele in _json_['keys']: _e = ai_BlackboardKey(_ele); self.keys.append(_e)





class ai_BlackboardKey :

    def __init__(self, _json_):
        self.name = _json_['name']
        self.desc = _json_['desc']
        self.is_static = _json_['is_static']
        self.type = ai_EKeyType(_json_['type'])
        self.type_class_name = _json_['type_class_name']




class ai_TbBehaviorTree:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = ai_BehaviorTree(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)






class ai_BehaviorTree :

    def __init__(self, _json_):
        self.id = _json_['id']
        self.name = _json_['name']
        self.desc = _json_['desc']
        self.blackboard_id = _json_['blackboard_id']
        self.root = ai_ComposeNode.fromJson(_json_['root'])





class ai_Node (metaclass=abc.ABCMeta):
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = ai_Node._childrenTypes
        if not childrenTypes:
            childrenTypes = ai_Node._childrenTypes = {
            'UeSetDefaultFocus': ai_UeSetDefaultFocus,
            'ExecuteTimeStatistic': ai_ExecuteTimeStatistic,
            'ChooseTarget': ai_ChooseTarget,
            'KeepFaceTarget': ai_KeepFaceTarget,
            'GetOwnerPlayer': ai_GetOwnerPlayer,
            'UpdateDailyBehaviorProps': ai_UpdateDailyBehaviorProps,
            'UeLoop': ai_UeLoop,
            'UeCooldown': ai_UeCooldown,
            'UeTimeLimit': ai_UeTimeLimit,
            'UeBlackboard': ai_UeBlackboard,
            'UeForceSuccess': ai_UeForceSuccess,
            'IsAtLocation': ai_IsAtLocation,
            'DistanceLessThan': ai_DistanceLessThan,
            'Sequence': ai_Sequence,
            'Selector': ai_Selector,
            'SimpleParallel': ai_SimpleParallel,
            'UeWait': ai_UeWait,
            'UeWaitBlackboardTime': ai_UeWaitBlackboardTime,
            'MoveToTarget': ai_MoveToTarget,
            'ChooseSkill': ai_ChooseSkill,
            'MoveToRandomLocation': ai_MoveToRandomLocation,
            'MoveToLocation': ai_MoveToLocation,
            'DebugPrint': ai_DebugPrint,
    }
        type = _json_['__type__']
        child = ai_Node._childrenTypes.get(type)
        if child != None:
            return  child(_json_)
        else:
            raise Exception()

    def __init__(self, _json_):
        self.id = _json_['id']
        self.node_name = _json_['node_name']





class ai_Service (ai_Node):
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = ai_Service._childrenTypes
        if not childrenTypes:
            childrenTypes = ai_Service._childrenTypes = {
            'UeSetDefaultFocus': ai_UeSetDefaultFocus,
            'ExecuteTimeStatistic': ai_ExecuteTimeStatistic,
            'ChooseTarget': ai_ChooseTarget,
            'KeepFaceTarget': ai_KeepFaceTarget,
            'GetOwnerPlayer': ai_GetOwnerPlayer,
            'UpdateDailyBehaviorProps': ai_UpdateDailyBehaviorProps,
    }
        type = _json_['__type__']
        child = ai_Service._childrenTypes.get(type)
        if child != None:
            return  child(_json_)
        else:
            raise Exception()

    def __init__(self, _json_):
        ai_Node.__init__(self, _json_)

        pass





class ai_UeSetDefaultFocus (ai_Service):

    def __init__(self, _json_):
        ai_Service.__init__(self, _json_)
        self.keyboard_key = _json_['keyboard_key']





class ai_ExecuteTimeStatistic (ai_Service):

    def __init__(self, _json_):
        ai_Service.__init__(self, _json_)

        pass





class ai_ChooseTarget (ai_Service):

    def __init__(self, _json_):
        ai_Service.__init__(self, _json_)
        self.result_target_key = _json_['result_target_key']





class ai_KeepFaceTarget (ai_Service):

    def __init__(self, _json_):
        ai_Service.__init__(self, _json_)
        self.target_actor_key = _json_['target_actor_key']





class ai_GetOwnerPlayer (ai_Service):

    def __init__(self, _json_):
        ai_Service.__init__(self, _json_)
        self.player_actor_key = _json_['player_actor_key']





class ai_UpdateDailyBehaviorProps (ai_Service):

    def __init__(self, _json_):
        ai_Service.__init__(self, _json_)
        self.satiety_key = _json_['satiety_key']
        self.energy_key = _json_['energy_key']
        self.mood_key = _json_['mood_key']
        self.satiety_lower_threshold_key = _json_['satiety_lower_threshold_key']
        self.satiety_upper_threshold_key = _json_['satiety_upper_threshold_key']
        self.energy_lower_threshold_key = _json_['energy_lower_threshold_key']
        self.energy_upper_threshold_key = _json_['energy_upper_threshold_key']
        self.mood_lower_threshold_key = _json_['mood_lower_threshold_key']
        self.mood_upper_threshold_key = _json_['mood_upper_threshold_key']





class ai_Decorator (ai_Node):
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = ai_Decorator._childrenTypes
        if not childrenTypes:
            childrenTypes = ai_Decorator._childrenTypes = {
            'UeLoop': ai_UeLoop,
            'UeCooldown': ai_UeCooldown,
            'UeTimeLimit': ai_UeTimeLimit,
            'UeBlackboard': ai_UeBlackboard,
            'UeForceSuccess': ai_UeForceSuccess,
            'IsAtLocation': ai_IsAtLocation,
            'DistanceLessThan': ai_DistanceLessThan,
    }
        type = _json_['__type__']
        child = ai_Decorator._childrenTypes.get(type)
        if child != None:
            return  child(_json_)
        else:
            raise Exception()

    def __init__(self, _json_):
        ai_Node.__init__(self, _json_)
        self.flow_abort_mode = ai_EFlowAbortMode(_json_['flow_abort_mode'])





class ai_UeLoop (ai_Decorator):

    def __init__(self, _json_):
        ai_Decorator.__init__(self, _json_)
        self.num_loops = _json_['num_loops']
        self.infinite_loop = _json_['infinite_loop']
        self.infinite_loop_timeout_time = _json_['infinite_loop_timeout_time']





class ai_UeCooldown (ai_Decorator):

    def __init__(self, _json_):
        ai_Decorator.__init__(self, _json_)
        self.cooldown_time = _json_['cooldown_time']





class ai_UeTimeLimit (ai_Decorator):

    def __init__(self, _json_):
        ai_Decorator.__init__(self, _json_)
        self.limit_time = _json_['limit_time']





class ai_UeBlackboard (ai_Decorator):

    def __init__(self, _json_):
        ai_Decorator.__init__(self, _json_)
        self.notify_observer = ai_ENotifyObserverMode(_json_['notify_observer'])
        self.blackboard_key = _json_['blackboard_key']
        self.key_query = ai_KeyQueryOperator.fromJson(_json_['key_query'])





class ai_KeyQueryOperator (metaclass=abc.ABCMeta):
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = ai_KeyQueryOperator._childrenTypes
        if not childrenTypes:
            childrenTypes = ai_KeyQueryOperator._childrenTypes = {
            'IsSet': ai_IsSet,
            'IsNotSet': ai_IsNotSet,
            'BinaryOperator': ai_BinaryOperator,
    }
        type = _json_['__type__']
        child = ai_KeyQueryOperator._childrenTypes.get(type)
        if child != None:
            return  child(_json_)
        else:
            raise Exception()

    def __init__(self, _json_):

        pass





class ai_IsSet (ai_KeyQueryOperator):

    def __init__(self, _json_):
        ai_KeyQueryOperator.__init__(self, _json_)

        pass





class ai_IsNotSet (ai_KeyQueryOperator):

    def __init__(self, _json_):
        ai_KeyQueryOperator.__init__(self, _json_)

        pass





class ai_BinaryOperator (ai_KeyQueryOperator):

    def __init__(self, _json_):
        ai_KeyQueryOperator.__init__(self, _json_)
        self.oper = ai_EOperator(_json_['oper'])
        self.data = ai_KeyData.fromJson(_json_['data'])





class ai_KeyData (metaclass=abc.ABCMeta):
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = ai_KeyData._childrenTypes
        if not childrenTypes:
            childrenTypes = ai_KeyData._childrenTypes = {
            'FloatKeyData': ai_FloatKeyData,
            'IntKeyData': ai_IntKeyData,
            'StringKeyData': ai_StringKeyData,
            'BlackboardKeyData': ai_BlackboardKeyData,
    }
        type = _json_['__type__']
        child = ai_KeyData._childrenTypes.get(type)
        if child != None:
            return  child(_json_)
        else:
            raise Exception()

    def __init__(self, _json_):

        pass





class ai_FloatKeyData (ai_KeyData):

    def __init__(self, _json_):
        ai_KeyData.__init__(self, _json_)
        self.value = _json_['value']





class ai_IntKeyData (ai_KeyData):

    def __init__(self, _json_):
        ai_KeyData.__init__(self, _json_)
        self.value = _json_['value']





class ai_StringKeyData (ai_KeyData):

    def __init__(self, _json_):
        ai_KeyData.__init__(self, _json_)
        self.value = _json_['value']





class ai_BlackboardKeyData (ai_KeyData):

    def __init__(self, _json_):
        ai_KeyData.__init__(self, _json_)
        self.value = _json_['value']





class ai_UeForceSuccess (ai_Decorator):

    def __init__(self, _json_):
        ai_Decorator.__init__(self, _json_)

        pass





class ai_IsAtLocation (ai_Decorator):

    def __init__(self, _json_):
        ai_Decorator.__init__(self, _json_)
        self.acceptable_radius = _json_['acceptable_radius']
        self.keyboard_key = _json_['keyboard_key']
        self.inverse_condition = _json_['inverse_condition']





class ai_DistanceLessThan (ai_Decorator):

    def __init__(self, _json_):
        ai_Decorator.__init__(self, _json_)
        self.actor1_key = _json_['actor1_key']
        self.actor2_key = _json_['actor2_key']
        self.distance = _json_['distance']
        self.reverse_result = _json_['reverse_result']





class ai_FlowNode (ai_Node):
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = ai_FlowNode._childrenTypes
        if not childrenTypes:
            childrenTypes = ai_FlowNode._childrenTypes = {
            'Sequence': ai_Sequence,
            'Selector': ai_Selector,
            'SimpleParallel': ai_SimpleParallel,
            'UeWait': ai_UeWait,
            'UeWaitBlackboardTime': ai_UeWaitBlackboardTime,
            'MoveToTarget': ai_MoveToTarget,
            'ChooseSkill': ai_ChooseSkill,
            'MoveToRandomLocation': ai_MoveToRandomLocation,
            'MoveToLocation': ai_MoveToLocation,
            'DebugPrint': ai_DebugPrint,
    }
        type = _json_['__type__']
        child = ai_FlowNode._childrenTypes.get(type)
        if child != None:
            return  child(_json_)
        else:
            raise Exception()

    def __init__(self, _json_):
        ai_Node.__init__(self, _json_)
        self.decorators = []
        for _ele in _json_['decorators']: _e = ai_Decorator.fromJson(_ele); self.decorators.append(_e)
        self.services = []
        for _ele in _json_['services']: _e = ai_Service.fromJson(_ele); self.services.append(_e)





class ai_ComposeNode (ai_FlowNode):
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = ai_ComposeNode._childrenTypes
        if not childrenTypes:
            childrenTypes = ai_ComposeNode._childrenTypes = {
            'Sequence': ai_Sequence,
            'Selector': ai_Selector,
            'SimpleParallel': ai_SimpleParallel,
    }
        type = _json_['__type__']
        child = ai_ComposeNode._childrenTypes.get(type)
        if child != None:
            return  child(_json_)
        else:
            raise Exception()

    def __init__(self, _json_):
        ai_FlowNode.__init__(self, _json_)

        pass





class ai_Sequence (ai_ComposeNode):

    def __init__(self, _json_):
        ai_ComposeNode.__init__(self, _json_)
        self.children = []
        for _ele in _json_['children']: _e = ai_FlowNode.fromJson(_ele); self.children.append(_e)





class ai_Selector (ai_ComposeNode):

    def __init__(self, _json_):
        ai_ComposeNode.__init__(self, _json_)
        self.children = []
        for _ele in _json_['children']: _e = ai_FlowNode.fromJson(_ele); self.children.append(_e)





class ai_SimpleParallel (ai_ComposeNode):

    def __init__(self, _json_):
        ai_ComposeNode.__init__(self, _json_)
        self.finish_mode = ai_EFinishMode(_json_['finish_mode'])
        self.main_task = ai_Task.fromJson(_json_['main_task'])
        self.background_node = ai_FlowNode.fromJson(_json_['background_node'])





class ai_Task (ai_FlowNode):
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = ai_Task._childrenTypes
        if not childrenTypes:
            childrenTypes = ai_Task._childrenTypes = {
            'UeWait': ai_UeWait,
            'UeWaitBlackboardTime': ai_UeWaitBlackboardTime,
            'MoveToTarget': ai_MoveToTarget,
            'ChooseSkill': ai_ChooseSkill,
            'MoveToRandomLocation': ai_MoveToRandomLocation,
            'MoveToLocation': ai_MoveToLocation,
            'DebugPrint': ai_DebugPrint,
    }
        type = _json_['__type__']
        child = ai_Task._childrenTypes.get(type)
        if child != None:
            return  child(_json_)
        else:
            raise Exception()

    def __init__(self, _json_):
        ai_FlowNode.__init__(self, _json_)
        self.ignore_restart_self = _json_['ignore_restart_self']





class ai_UeWait (ai_Task):

    def __init__(self, _json_):
        ai_Task.__init__(self, _json_)
        self.wait_time = _json_['wait_time']
        self.random_deviation = _json_['random_deviation']





class ai_UeWaitBlackboardTime (ai_Task):

    def __init__(self, _json_):
        ai_Task.__init__(self, _json_)
        self.blackboard_key = _json_['blackboard_key']





class ai_MoveToTarget (ai_Task):

    def __init__(self, _json_):
        ai_Task.__init__(self, _json_)
        self.target_actor_key = _json_['target_actor_key']
        self.acceptable_radius = _json_['acceptable_radius']





class ai_ChooseSkill (ai_Task):

    def __init__(self, _json_):
        ai_Task.__init__(self, _json_)
        self.target_actor_key = _json_['target_actor_key']
        self.result_skill_id_key = _json_['result_skill_id_key']





class ai_MoveToRandomLocation (ai_Task):

    def __init__(self, _json_):
        ai_Task.__init__(self, _json_)
        self.origin_position_key = _json_['origin_position_key']
        self.radius = _json_['radius']





class ai_MoveToLocation (ai_Task):

    def __init__(self, _json_):
        ai_Task.__init__(self, _json_)
        self.location = Vector3.fromJson(_json_['location'])
        self.acceptable_radius = _json_['acceptable_radius']





class ai_DebugPrint (ai_Task):

    def __init__(self, _json_):
        ai_Task.__init__(self, _json_)
        self.text = _json_['text']




class blueprint_TbClazz:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = blueprint_Clazz.fromJson(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.name] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)






class blueprint_Clazz (metaclass=abc.ABCMeta):
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = blueprint_Clazz._childrenTypes
        if not childrenTypes:
            childrenTypes = blueprint_Clazz._childrenTypes = {
            'Interface': blueprint_Interface,
            'NormalClazz': blueprint_NormalClazz,
            'EnumClazz': blueprint_EnumClazz,
    }
        type = _json_['__type__']
        child = blueprint_Clazz._childrenTypes.get(type)
        if child != None:
            return  child(_json_)
        else:
            raise Exception()

    def __init__(self, _json_):
        self.name = _json_['name']
        self.desc = _json_['desc']
        self.parents = []
        for _ele in _json_['parents']: _e = blueprint_Clazz.fromJson(_ele); self.parents.append(_e)
        self.methods = []
        for _ele in _json_['methods']: _e = blueprint_Method.fromJson(_ele); self.methods.append(_e)





class blueprint_Method (metaclass=abc.ABCMeta):
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = blueprint_Method._childrenTypes
        if not childrenTypes:
            childrenTypes = blueprint_Method._childrenTypes = {
            'AbstraceMethod': blueprint_AbstraceMethod,
            'ExternalMethod': blueprint_ExternalMethod,
            'BlueprintMethod': blueprint_BlueprintMethod,
    }
        type = _json_['__type__']
        child = blueprint_Method._childrenTypes.get(type)
        if child != None:
            return  child(_json_)
        else:
            raise Exception()

    def __init__(self, _json_):
        self.name = _json_['name']
        self.desc = _json_['desc']
        self.is_static = _json_['is_static']
        self.return_type = _json_['return_type']
        self.parameters = []
        for _ele in _json_['parameters']: _e = blueprint_ParamInfo(_ele); self.parameters.append(_e)





class blueprint_ParamInfo :

    def __init__(self, _json_):
        self.name = _json_['name']
        self.type = _json_['type']
        self.is_ref = _json_['is_ref']





class blueprint_AbstraceMethod (blueprint_Method):

    def __init__(self, _json_):
        blueprint_Method.__init__(self, _json_)

        pass





class blueprint_ExternalMethod (blueprint_Method):

    def __init__(self, _json_):
        blueprint_Method.__init__(self, _json_)

        pass





class blueprint_BlueprintMethod (blueprint_Method):

    def __init__(self, _json_):
        blueprint_Method.__init__(self, _json_)

        pass





class blueprint_Interface (blueprint_Clazz):

    def __init__(self, _json_):
        blueprint_Clazz.__init__(self, _json_)

        pass





class blueprint_NormalClazz (blueprint_Clazz):

    def __init__(self, _json_):
        blueprint_Clazz.__init__(self, _json_)
        self.is_abstract = _json_['is_abstract']
        self.fields = []
        for _ele in _json_['fields']: _e = blueprint_Field(_ele); self.fields.append(_e)





class blueprint_Field :

    def __init__(self, _json_):
        self.name = _json_['name']
        self.type = _json_['type']
        self.desc = _json_['desc']





class blueprint_EnumClazz (blueprint_Clazz):

    def __init__(self, _json_):
        blueprint_Clazz.__init__(self, _json_)
        self.enums = []
        for _ele in _json_['enums']: _e = blueprint_EnumField(_ele); self.enums.append(_e)





class blueprint_EnumField :

    def __init__(self, _json_):
        self.name = _json_['name']
        self.value = _json_['value']




class bonus_TbDrop:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = bonus_DropInfo(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)






class bonus_DropInfo :

    def __init__(self, _json_):
        self.id = _json_['id']
        self.desc = _json_['desc']
        self.client_show_items = []
        for _ele in _json_['client_show_items']: _e = bonus_ShowItemInfo(_ele); self.client_show_items.append(_e)
        self.bonus = bonus_Bonus.fromJson(_json_['bonus'])





class bonus_ShowItemInfo :

    def __init__(self, _json_):
        self.item_id = _json_['item_id']
        self.item_num = _json_['item_num']





class bonus_Bonus (metaclass=abc.ABCMeta):
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = bonus_Bonus._childrenTypes
        if not childrenTypes:
            childrenTypes = bonus_Bonus._childrenTypes = {
            'OneItem': bonus_OneItem,
            'OneItems': bonus_OneItems,
            'Item': bonus_Item,
            'Items': bonus_Items,
            'CoefficientItem': bonus_CoefficientItem,
            'WeightItems': bonus_WeightItems,
            'ProbabilityItems': bonus_ProbabilityItems,
            'MultiBonus': bonus_MultiBonus,
            'ProbabilityBonus': bonus_ProbabilityBonus,
            'WeightBonus': bonus_WeightBonus,
            'DropBonus': bonus_DropBonus,
    }
        type = _json_['__type__']
        child = bonus_Bonus._childrenTypes.get(type)
        if child != None:
            return  child(_json_)
        else:
            raise Exception()

    def __init__(self, _json_):

        pass





class bonus_OneItem (bonus_Bonus):

    def __init__(self, _json_):
        bonus_Bonus.__init__(self, _json_)
        self.item_id = _json_['item_id']





class bonus_OneItems (bonus_Bonus):

    def __init__(self, _json_):
        bonus_Bonus.__init__(self, _json_)
        self.items = _json_['items']





class bonus_Item (bonus_Bonus):

    def __init__(self, _json_):
        bonus_Bonus.__init__(self, _json_)
        self.item_id = _json_['item_id']
        self.amount = _json_['amount']





class bonus_Items (bonus_Bonus):

    def __init__(self, _json_):
        bonus_Bonus.__init__(self, _json_)
        self.item_list = []
        for _ele in _json_['item_list']: _e = bonus_Item(_ele); self.item_list.append(_e)





class bonus_CoefficientItem (bonus_Bonus):

    def __init__(self, _json_):
        bonus_Bonus.__init__(self, _json_)
        self.bonus_id = _json_['bonus_id']
        self.bonus_list = bonus_Items(_json_['bonus_list'])





class bonus_WeightItems (bonus_Bonus):

    def __init__(self, _json_):
        bonus_Bonus.__init__(self, _json_)
        self.item_list = []
        for _ele in _json_['item_list']: _e = bonus_WeightItemInfo(_ele); self.item_list.append(_e)





class bonus_WeightItemInfo :

    def __init__(self, _json_):
        self.item_id = _json_['item_id']
        self.num = _json_['num']
        self.weight = _json_['weight']





class bonus_ProbabilityItems (bonus_Bonus):

    def __init__(self, _json_):
        bonus_Bonus.__init__(self, _json_)
        self.item_list = []
        for _ele in _json_['item_list']: _e = bonus_ProbabilityItemInfo(_ele); self.item_list.append(_e)





class bonus_ProbabilityItemInfo :

    def __init__(self, _json_):
        self.item_id = _json_['item_id']
        self.num = _json_['num']
        self.probability = _json_['probability']





class bonus_MultiBonus (bonus_Bonus):

    def __init__(self, _json_):
        bonus_Bonus.__init__(self, _json_)
        self.bonuses = []
        for _ele in _json_['bonuses']: _e = bonus_Bonus.fromJson(_ele); self.bonuses.append(_e)





class bonus_ProbabilityBonus (bonus_Bonus):

    def __init__(self, _json_):
        bonus_Bonus.__init__(self, _json_)
        self.bonuses = []
        for _ele in _json_['bonuses']: _e = bonus_ProbabilityBonusInfo(_ele); self.bonuses.append(_e)





class bonus_ProbabilityBonusInfo :

    def __init__(self, _json_):
        self.bonus = bonus_Bonus.fromJson(_json_['bonus'])
        self.probability = _json_['probability']





class bonus_WeightBonus (bonus_Bonus):

    def __init__(self, _json_):
        bonus_Bonus.__init__(self, _json_)
        self.bonuses = []
        for _ele in _json_['bonuses']: _e = bonus_WeightBonusInfo(_ele); self.bonuses.append(_e)





class bonus_WeightBonusInfo :

    def __init__(self, _json_):
        self.bonus = bonus_Bonus.fromJson(_json_['bonus'])
        self.weight = _json_['weight']





class bonus_DropBonus (bonus_Bonus):

    def __init__(self, _json_):
        bonus_Bonus.__init__(self, _json_)
        self.id = _json_['id']




class common_TbGlobalConfig:

    def __init__(self, _json_):
        if (len(_json_) != 1): raise Exception('table mode=one, but size != 1')
        self._data = common_GlobalConfig(_json_[0])

    def getData(self) : return self._data

    '''
    背包容量
    '''
    def bag_capacity(self) : return self._data.bag_capacity
    def bag_capacity_special(self) : return self._data.bag_capacity_special
    def bag_temp_expendable_capacity(self) : return self._data.bag_temp_expendable_capacity
    def bag_temp_tool_capacity(self) : return self._data.bag_temp_tool_capacity
    def bag_init_capacity(self) : return self._data.bag_init_capacity
    def quick_bag_capacity(self) : return self._data.quick_bag_capacity
    def cloth_bag_capacity(self) : return self._data.cloth_bag_capacity
    def cloth_bag_init_capacity(self) : return self._data.cloth_bag_init_capacity
    def cloth_bag_capacity_special(self) : return self._data.cloth_bag_capacity_special
    def bag_init_items_drop_id(self) : return self._data.bag_init_items_drop_id
    def mail_box_capacity(self) : return self._data.mail_box_capacity
    def damage_param_c(self) : return self._data.damage_param_c
    def damage_param_e(self) : return self._data.damage_param_e
    def damage_param_f(self) : return self._data.damage_param_f
    def damage_param_d(self) : return self._data.damage_param_d
    def role_speed(self) : return self._data.role_speed
    def monster_speed(self) : return self._data.monster_speed
    def init_energy(self) : return self._data.init_energy
    def init_viality(self) : return self._data.init_viality
    def max_viality(self) : return self._data.max_viality
    def per_viality_recovery_time(self) : return self._data.per_viality_recovery_time





class common_GlobalConfig :

    def __init__(self, _json_):
        self.bag_capacity = _json_['bag_capacity']
        self.bag_capacity_special = _json_['bag_capacity_special']
        self.bag_temp_expendable_capacity = _json_['bag_temp_expendable_capacity']
        self.bag_temp_tool_capacity = _json_['bag_temp_tool_capacity']
        self.bag_init_capacity = _json_['bag_init_capacity']
        self.quick_bag_capacity = _json_['quick_bag_capacity']
        self.cloth_bag_capacity = _json_['cloth_bag_capacity']
        self.cloth_bag_init_capacity = _json_['cloth_bag_init_capacity']
        self.cloth_bag_capacity_special = _json_['cloth_bag_capacity_special']
        if _json_.get('bag_init_items_drop_id') != None: self.bag_init_items_drop_id = _json_['bag_init_items_drop_id']
        self.mail_box_capacity = _json_['mail_box_capacity']
        self.damage_param_c = _json_['damage_param_c']
        self.damage_param_e = _json_['damage_param_e']
        self.damage_param_f = _json_['damage_param_f']
        self.damage_param_d = _json_['damage_param_d']
        self.role_speed = _json_['role_speed']
        self.monster_speed = _json_['monster_speed']
        self.init_energy = _json_['init_energy']
        self.init_viality = _json_['init_viality']
        self.max_viality = _json_['max_viality']
        self.per_viality_recovery_time = _json_['per_viality_recovery_time']




class common_TbDummy:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = common_Dummy(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)






class common_Dummy :

    def __init__(self, _json_):
        self.id = _json_['id']
        self.limit = limit_LimitBase.fromJson(_json_['limit'])





class limit_LimitBase (metaclass=abc.ABCMeta):
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = limit_LimitBase._childrenTypes
        if not childrenTypes:
            childrenTypes = limit_LimitBase._childrenTypes = {
            'DailyLimit': limit_DailyLimit,
            'MultiDayLimit': limit_MultiDayLimit,
            'WeeklyLimit': limit_WeeklyLimit,
            'MonthlyLimit': limit_MonthlyLimit,
            'CoolDown': limit_CoolDown,
            'GroupCoolDown': limit_GroupCoolDown,
    }
        type = _json_['__type__']
        child = limit_LimitBase._childrenTypes.get(type)
        if child != None:
            return  child(_json_)
        else:
            raise Exception()

    def __init__(self, _json_):

        pass





class limit_DailyLimitBase (limit_LimitBase):
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = limit_DailyLimitBase._childrenTypes
        if not childrenTypes:
            childrenTypes = limit_DailyLimitBase._childrenTypes = {
            'DailyLimit': limit_DailyLimit,
    }
        type = _json_['__type__']
        child = limit_DailyLimitBase._childrenTypes.get(type)
        if child != None:
            return  child(_json_)
        else:
            raise Exception()

    def __init__(self, _json_):
        limit_LimitBase.__init__(self, _json_)

        pass





class limit_DailyLimit (limit_DailyLimitBase):

    def __init__(self, _json_):
        limit_DailyLimitBase.__init__(self, _json_)
        self.num = _json_['num']





class limit_MultiDayLimit (limit_LimitBase):

    def __init__(self, _json_):
        limit_LimitBase.__init__(self, _json_)
        self.day = _json_['day']
        self.num = _json_['num']





class limit_WeeklyLimit (limit_LimitBase):

    def __init__(self, _json_):
        limit_LimitBase.__init__(self, _json_)
        self.num = _json_['num']





class limit_MonthlyLimit (limit_LimitBase):

    def __init__(self, _json_):
        limit_LimitBase.__init__(self, _json_)
        self.num = _json_['num']





class limit_CoolDown (limit_LimitBase):

    def __init__(self, _json_):
        limit_LimitBase.__init__(self, _json_)
        self.duration = _json_['duration']





class limit_GroupCoolDown (limit_LimitBase):

    def __init__(self, _json_):
        limit_LimitBase.__init__(self, _json_)
        self.group_id = _json_['group_id']
        self.duration = _json_['duration']




class error_TbErrorInfo:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = error_ErrorInfo(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.code] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)






class error_ErrorInfo :

    def __init__(self, _json_):
        self.code = _json_['code']
        self.desc = _json_['desc']
        self.style = error_ErrorStyle.fromJson(_json_['style'])





class error_ErrorStyle (metaclass=abc.ABCMeta):
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = error_ErrorStyle._childrenTypes
        if not childrenTypes:
            childrenTypes = error_ErrorStyle._childrenTypes = {
            'ErrorStyleTip': error_ErrorStyleTip,
            'ErrorStyleMsgbox': error_ErrorStyleMsgbox,
            'ErrorStyleDlgOk': error_ErrorStyleDlgOk,
            'ErrorStyleDlgOkCancel': error_ErrorStyleDlgOkCancel,
    }
        type = _json_['__type__']
        child = error_ErrorStyle._childrenTypes.get(type)
        if child != None:
            return  child(_json_)
        else:
            raise Exception()

    def __init__(self, _json_):

        pass





class error_ErrorStyleTip (error_ErrorStyle):

    def __init__(self, _json_):
        error_ErrorStyle.__init__(self, _json_)

        pass





class error_ErrorStyleMsgbox (error_ErrorStyle):

    def __init__(self, _json_):
        error_ErrorStyle.__init__(self, _json_)
        self.btn_name = _json_['btn_name']
        self.operation = error_EOperation(_json_['operation'])





class error_ErrorStyleDlgOk (error_ErrorStyle):

    def __init__(self, _json_):
        error_ErrorStyle.__init__(self, _json_)
        self.btn_name = _json_['btn_name']





class error_ErrorStyleDlgOkCancel (error_ErrorStyle):

    def __init__(self, _json_):
        error_ErrorStyle.__init__(self, _json_)
        self.btn1_name = _json_['btn1_name']
        self.btn2_name = _json_['btn2_name']




class error_TbCodeInfo:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = error_CodeInfo(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.code] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)






class error_CodeInfo :

    def __init__(self, _json_):
        self.code = error_EErrorCode(_json_['code'])
        self.key = _json_['key']




class item_TbItem:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = item_Item(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)






class item_Item :

    def __init__(self, _json_):
        self.id = _json_['id']
        self.name = _json_['name']
        self.major_type = item_EMajorType(_json_['major_type'])
        self.minor_type = item_EMinorType(_json_['minor_type'])
        self.max_pile_num = _json_['max_pile_num']
        self.quality = item_EItemQuality(_json_['quality'])
        self.icon = _json_['icon']
        self.icon_backgroud = _json_['icon_backgroud']
        self.icon_mask = _json_['icon_mask']
        self.desc = _json_['desc']
        self.show_order = _json_['show_order']
        self.quantifier = _json_['quantifier']
        self.show_in_bag = _json_['show_in_bag']
        self.min_show_level = _json_['min_show_level']
        self.batch_usable = _json_['batch_usable']
        self.progress_time_when_use = _json_['progress_time_when_use']
        self.show_hint_when_use = _json_['show_hint_when_use']
        self.droppable = _json_['droppable']
        if _json_.get('price') != None: self.price = _json_['price']
        self.use_type = item_EUseType(_json_['use_type'])
        if _json_.get('level_up_id') != None: self.level_up_id = _json_['level_up_id']




class item_TbItemFunc:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = item_ItemFunction(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.minor_type] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)






class item_ItemFunction :

    def __init__(self, _json_):
        self.minor_type = item_EMinorType(_json_['minor_type'])
        self.func_type = item_EItemFunctionType(_json_['func_type'])
        self.method = _json_['method']
        self.close_bag_ui = _json_['close_bag_ui']




class item_TbItemExtra:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = item_ItemExtra.fromJson(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)






class item_ItemExtra (metaclass=abc.ABCMeta):
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = item_ItemExtra._childrenTypes
        if not childrenTypes:
            childrenTypes = item_ItemExtra._childrenTypes = {
            'TreasureBox': item_TreasureBox,
            'InteractionItem': item_InteractionItem,
            'Clothes': item_Clothes,
            'DesignDrawing': item_DesignDrawing,
            'Dymmy': item_Dymmy,
    }
        type = _json_['__type__']
        child = item_ItemExtra._childrenTypes.get(type)
        if child != None:
            return  child(_json_)
        else:
            raise Exception()

    def __init__(self, _json_):
        self.id = _json_['id']





class item_TreasureBox (item_ItemExtra):

    def __init__(self, _json_):
        item_ItemExtra.__init__(self, _json_)
        if _json_.get('key_item_id') != None: self.key_item_id = _json_['key_item_id']
        self.open_level = condition_MinLevel(_json_['open_level'])
        self.use_on_obtain = _json_['use_on_obtain']
        self.drop_ids = _json_['drop_ids']
        self.choose_list = []
        for _ele in _json_['choose_list']: _e = item_ChooseOneBonus(_ele); self.choose_list.append(_e)





class condition_Condition (metaclass=abc.ABCMeta):
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = condition_Condition._childrenTypes
        if not childrenTypes:
            childrenTypes = condition_Condition._childrenTypes = {
            'TimeRange': condition_TimeRange,
            'MultiRoleCondition': condition_MultiRoleCondition,
            'GenderLimit': condition_GenderLimit,
            'MinLevel': condition_MinLevel,
            'MaxLevel': condition_MaxLevel,
            'MinMaxLevel': condition_MinMaxLevel,
            'ClothesPropertyScoreGreaterThan': condition_ClothesPropertyScoreGreaterThan,
            'ContainsItem': condition_ContainsItem,
    }
        type = _json_['__type__']
        child = condition_Condition._childrenTypes.get(type)
        if child != None:
            return  child(_json_)
        else:
            raise Exception()

    def __init__(self, _json_):

        pass





class condition_TimeRange (condition_Condition):

    def __init__(self, _json_):
        condition_Condition.__init__(self, _json_)
        self.date_time_range = common_DateTimeRange(_json_['date_time_range'])





class common_DateTimeRange :

    def __init__(self, _json_):
        if _json_.get('start_time') != None: self.start_time = _json_['start_time']
        if _json_.get('end_time') != None: self.end_time = _json_['end_time']





class condition_RoleCondition (condition_Condition):
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = condition_RoleCondition._childrenTypes
        if not childrenTypes:
            childrenTypes = condition_RoleCondition._childrenTypes = {
            'MultiRoleCondition': condition_MultiRoleCondition,
            'GenderLimit': condition_GenderLimit,
            'MinLevel': condition_MinLevel,
            'MaxLevel': condition_MaxLevel,
            'MinMaxLevel': condition_MinMaxLevel,
            'ClothesPropertyScoreGreaterThan': condition_ClothesPropertyScoreGreaterThan,
            'ContainsItem': condition_ContainsItem,
    }
        type = _json_['__type__']
        child = condition_RoleCondition._childrenTypes.get(type)
        if child != None:
            return  child(_json_)
        else:
            raise Exception()

    def __init__(self, _json_):
        condition_Condition.__init__(self, _json_)

        pass





class condition_MultiRoleCondition (condition_RoleCondition):

    def __init__(self, _json_):
        condition_RoleCondition.__init__(self, _json_)
        self.conditions = []
        for _ele in _json_['conditions']: _e = condition_RoleCondition.fromJson(_ele); self.conditions.append(_e)





class condition_BoolRoleCondition (condition_RoleCondition):
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = condition_BoolRoleCondition._childrenTypes
        if not childrenTypes:
            childrenTypes = condition_BoolRoleCondition._childrenTypes = {
            'GenderLimit': condition_GenderLimit,
            'MinLevel': condition_MinLevel,
            'MaxLevel': condition_MaxLevel,
            'MinMaxLevel': condition_MinMaxLevel,
            'ClothesPropertyScoreGreaterThan': condition_ClothesPropertyScoreGreaterThan,
    }
        type = _json_['__type__']
        child = condition_BoolRoleCondition._childrenTypes.get(type)
        if child != None:
            return  child(_json_)
        else:
            raise Exception()

    def __init__(self, _json_):
        condition_RoleCondition.__init__(self, _json_)

        pass





class condition_GenderLimit (condition_BoolRoleCondition):

    def __init__(self, _json_):
        condition_BoolRoleCondition.__init__(self, _json_)
        self.gender = role_EGenderType(_json_['gender'])





class condition_MinLevel (condition_BoolRoleCondition):

    def __init__(self, _json_):
        condition_BoolRoleCondition.__init__(self, _json_)
        self.level = _json_['level']





class condition_MaxLevel (condition_BoolRoleCondition):

    def __init__(self, _json_):
        condition_BoolRoleCondition.__init__(self, _json_)
        self.level = _json_['level']





class condition_MinMaxLevel (condition_BoolRoleCondition):

    def __init__(self, _json_):
        condition_BoolRoleCondition.__init__(self, _json_)
        self.min = _json_['min']
        self.max = _json_['max']





class condition_ClothesPropertyScoreGreaterThan (condition_BoolRoleCondition):

    def __init__(self, _json_):
        condition_BoolRoleCondition.__init__(self, _json_)
        self.prop = item_EClothesPropertyType(_json_['prop'])
        self.value = _json_['value']





class condition_ContainsItem (condition_RoleCondition):

    def __init__(self, _json_):
        condition_RoleCondition.__init__(self, _json_)
        self.item_id = _json_['item_id']
        self.num = _json_['num']
        self.reverse = _json_['reverse']





class item_ChooseOneBonus :

    def __init__(self, _json_):
        self.drop_id = _json_['drop_id']
        self.is_unique = _json_['is_unique']





class item_InteractionItem (item_ItemExtra):

    def __init__(self, _json_):
        item_ItemExtra.__init__(self, _json_)
        if _json_.get('attack_num') != None: self.attack_num = _json_['attack_num']
        self.holding_static_mesh = _json_['holding_static_mesh']
        self.holding_static_mesh_mat = _json_['holding_static_mesh_mat']





class item_Clothes (item_ItemExtra):

    def __init__(self, _json_):
        item_ItemExtra.__init__(self, _json_)
        self.attack = _json_['attack']
        self.hp = _json_['hp']
        self.energy_limit = _json_['energy_limit']
        self.energy_resume = _json_['energy_resume']





class item_DesignDrawing (item_ItemExtra):

    def __init__(self, _json_):
        item_ItemExtra.__init__(self, _json_)
        self.learn_component_id = _json_['learn_component_id']





class item_Dymmy (item_ItemExtra):

    def __init__(self, _json_):
        item_ItemExtra.__init__(self, _json_)
        self.cost = cost_Cost.fromJson(_json_['cost'])





class cost_Cost (metaclass=abc.ABCMeta):
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = cost_Cost._childrenTypes
        if not childrenTypes:
            childrenTypes = cost_Cost._childrenTypes = {
            'CostCurrency': cost_CostCurrency,
            'CostCurrencies': cost_CostCurrencies,
            'CostOneItem': cost_CostOneItem,
            'CostItem': cost_CostItem,
            'CostItems': cost_CostItems,
    }
        type = _json_['__type__']
        child = cost_Cost._childrenTypes.get(type)
        if child != None:
            return  child(_json_)
        else:
            raise Exception()

    def __init__(self, _json_):

        pass





class cost_CostCurrency (cost_Cost):

    def __init__(self, _json_):
        cost_Cost.__init__(self, _json_)
        self.type = item_ECurrencyType(_json_['type'])
        self.num = _json_['num']





class cost_CostCurrencies (cost_Cost):

    def __init__(self, _json_):
        cost_Cost.__init__(self, _json_)
        self.currencies = []
        for _ele in _json_['currencies']: _e = cost_CostCurrency(_ele); self.currencies.append(_e)





class cost_CostOneItem (cost_Cost):

    def __init__(self, _json_):
        cost_Cost.__init__(self, _json_)
        self.item_id = _json_['item_id']





class cost_CostItem (cost_Cost):

    def __init__(self, _json_):
        cost_Cost.__init__(self, _json_)
        self.item_id = _json_['item_id']
        self.amount = _json_['amount']





class cost_CostItems (cost_Cost):

    def __init__(self, _json_):
        cost_Cost.__init__(self, _json_)
        self.item_list = []
        for _ele in _json_['item_list']: _e = cost_CostItem(_ele); self.item_list.append(_e)




class l10n_TbL10NDemo:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = l10n_L10NDemo(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)






class l10n_L10NDemo :

    def __init__(self, _json_):
        self.id = _json_['id']
        self.text = _json_['text']




class l10n_TbPatchDemo:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = l10n_PatchDemo(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)






class l10n_PatchDemo :

    def __init__(self, _json_):
        self.id = _json_['id']
        self.value = _json_['value']




class mail_TbSystemMail:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = mail_SystemMail(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)






class mail_SystemMail :

    def __init__(self, _json_):
        self.id = _json_['id']
        self.title = _json_['title']
        self.sender = _json_['sender']
        self.content = _json_['content']
        self.award = _json_['award']




class mail_TbGlobalMail:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = mail_GlobalMail(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)






class mail_GlobalMail :

    def __init__(self, _json_):
        self.id = _json_['id']
        self.title = _json_['title']
        self.sender = _json_['sender']
        self.content = _json_['content']
        self.award = _json_['award']
        self.all_server = _json_['all_server']
        self.server_list = _json_['server_list']
        self.platform = _json_['platform']
        self.channel = _json_['channel']
        self.min_max_level = condition_MinMaxLevel(_json_['min_max_level'])
        self.register_time = condition_TimeRange(_json_['register_time'])
        self.mail_time = condition_TimeRange(_json_['mail_time'])




class role_TbRoleLevelExpAttr:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = role_LevelExpAttr(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.level] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)






class role_LevelExpAttr :

    def __init__(self, _json_):
        self.level = _json_['level']
        self.need_exp = _json_['need_exp']
        self.clothes_attrs = _json_['clothes_attrs']




class role_TbRoleLevelBonusCoefficient:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = role_LevelBonus(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)






class role_LevelBonus :

    def __init__(self, _json_):
        self.id = _json_['id']
        self.distinct_bonus_infos = []
        for _ele in _json_['distinct_bonus_infos']: _e = role_DistinctBonusInfos(_ele); self.distinct_bonus_infos.append(_e)





class role_DistinctBonusInfos :

    def __init__(self, _json_):
        self.effective_level = _json_['effective_level']
        self.bonus_info = []
        for _ele in _json_['bonus_info']: _e = role_BonusInfo(_ele); self.bonus_info.append(_e)





class role_BonusInfo :

    def __init__(self, _json_):
        self.type = item_ECurrencyType(_json_['type'])
        self.coefficient = _json_['coefficient']




class tag_TbTestTag:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = tag_TestTag(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)






class tag_TestTag :

    def __init__(self, _json_):
        self.id = _json_['id']
        self.value = _json_['value']




class test_TbFullTypes:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = test_DemoType2(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.x3] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)






class test_DemoType2 :

    def __init__(self, _json_):
        self.x4 = _json_['x4']
        self.x1 = _json_['x1']
        self.x2 = _json_['x2']
        self.x3 = _json_['x3']
        self.x5 = _json_['x5']
        self.x6 = _json_['x6']
        self.x7 = _json_['x7']
        self.x8_0 = _json_['x8_0']
        self.x8 = _json_['x8']
        self.x9 = _json_['x9']
        self.x10 = _json_['x10']
        self.x12 = test_DemoType1(_json_['x12'])
        self.x13 = test_DemoEnum(_json_['x13'])
        self.x14 = test_DemoDynamic.fromJson(_json_['x14'])
        self.s1 = _json_['s1']
        self.v2 = Vector2.fromJson(_json_['v2'])
        self.v3 = Vector3.fromJson(_json_['v3'])
        self.v4 = Vector4.fromJson(_json_['v4'])
        self.t1 = _json_['t1']
        self.k1 = _json_['k1']
        self.k2 = _json_['k2']
        self.k5 = _json_['k5']
        self.k8 = {}
        for _ek, _ev in _json_['k8']: _k = _ek; _v = _ev; self.k8[_k] =_v
        self.k9 = []
        for _ele in _json_['k9']: _e = test_DemoE2(_ele); self.k9.append(_e)
        self.k15 = []
        for _ele in _json_['k15']: _e = test_DemoDynamic.fromJson(_ele); self.k15.append(_e)





class test_DemoType1 :

    def __init__(self, _json_):
        self.x1 = _json_['x1']





class test_DemoDynamic (metaclass=abc.ABCMeta):
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = test_DemoDynamic._childrenTypes
        if not childrenTypes:
            childrenTypes = test_DemoDynamic._childrenTypes = {
            'DemoD2': test_DemoD2,
            'DemoE1': test_DemoE1,
            'DemoD5': test_DemoD5,
    }
        type = _json_['__type__']
        child = test_DemoDynamic._childrenTypes.get(type)
        if child != None:
            return  child(_json_)
        else:
            raise Exception()

    def __init__(self, _json_):
        self.x1 = _json_['x1']





class test_DemoD2 (test_DemoDynamic):

    def __init__(self, _json_):
        test_DemoDynamic.__init__(self, _json_)
        self.x2 = _json_['x2']





class test_DemoD3 (test_DemoDynamic):
    _childrenTypes = None

    @staticmethod
    def fromJson(_json_):
        childrenTypes = test_DemoD3._childrenTypes
        if not childrenTypes:
            childrenTypes = test_DemoD3._childrenTypes = {
            'DemoE1': test_DemoE1,
    }
        type = _json_['__type__']
        child = test_DemoD3._childrenTypes.get(type)
        if child != None:
            return  child(_json_)
        else:
            raise Exception()

    def __init__(self, _json_):
        test_DemoDynamic.__init__(self, _json_)
        self.x3 = _json_['x3']





class test_DemoE1 (test_DemoD3):

    def __init__(self, _json_):
        test_DemoD3.__init__(self, _json_)
        self.x4 = _json_['x4']





class test_DemoD5 (test_DemoDynamic):

    def __init__(self, _json_):
        test_DemoDynamic.__init__(self, _json_)
        self.time = test_DateTimeRange(_json_['time'])





class test_DateTimeRange :

    def __init__(self, _json_):
        self.start_time = _json_['start_time']
        self.end_time = _json_['end_time']





class test_DemoE2 :

    def __init__(self, _json_):
        if _json_.get('y1') != None: self.y1 = _json_['y1']
        self.y2 = _json_['y2']




class test_TbSingleton:

    def __init__(self, _json_):
        if (len(_json_) != 1): raise Exception('table mode=one, but size != 1')
        self._data = test_DemoSingletonType(_json_[0])

    def getData(self) : return self._data

    def id(self) : return self._data.id
    def name(self) : return self._data.name
    def date(self) : return self._data.date





class test_DemoSingletonType :

    def __init__(self, _json_):
        self.id = _json_['id']
        self.name = _json_['name']
        self.date = test_DemoDynamic.fromJson(_json_['date'])




class test_TbDataFromMisc:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = test_DemoType2(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.x4] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)





class test_TbMultiRowRecord:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = test_MultiRowRecord(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)






class test_MultiRowRecord :

    def __init__(self, _json_):
        self.id = _json_['id']
        self.name = _json_['name']
        self.one_rows = []
        for _ele in _json_['one_rows']: _e = test_MultiRowType1(_ele); self.one_rows.append(_e)
        self.multi_rows1 = []
        for _ele in _json_['multi_rows1']: _e = test_MultiRowType1(_ele); self.multi_rows1.append(_e)
        self.multi_rows2 = []
        for _ele in _json_['multi_rows2']: _e = test_MultiRowType1(_ele); self.multi_rows2.append(_e)
        self.multi_rows3 = set()
        for _ele in _json_['multi_rows3']: _e = test_MultiRowType2(_ele); self.multi_rows3.add(_e)
        self.multi_rows4 = {}
        for _ek, _ev in _json_['multi_rows4']: _k = _ek; _v = test_MultiRowType2(_ev); self.multi_rows4[_k] =_v
        self.multi_rows5 = []
        for _ele in _json_['multi_rows5']: _e = test_MultiRowType3(_ele); self.multi_rows5.append(_e)





class test_MultiRowType1 :

    def __init__(self, _json_):
        self.id = _json_['id']
        self.x = _json_['x']





class test_MultiRowType2 :

    def __init__(self, _json_):
        self.id = _json_['id']
        self.x = _json_['x']
        self.y = _json_['y']





class test_MultiRowType3 :

    def __init__(self, _json_):
        self.id = _json_['id']
        self.items = []
        for _ele in _json_['items']: _e = test_MultiRowType1(_ele); self.items.append(_e)




class test_TbMultiRowTitle:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = test_MultiRowTitle(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)






class test_MultiRowTitle :

    def __init__(self, _json_):
        self.id = _json_['id']
        self.name = _json_['name']
        self.x1 = test_H1(_json_['x1'])
        self.x2 = []
        for _ele in _json_['x2']: _e = test_H2(_ele); self.x2.append(_e)
        self.x3 = []
        for _ele in _json_['x3']: _e = test_H2(_ele); self.x3.append(_e)





class test_H1 :

    def __init__(self, _json_):
        self.y2 = test_H2(_json_['y2'])
        self.y3 = _json_['y3']





class test_H2 :

    def __init__(self, _json_):
        self.z2 = _json_['z2']
        self.z3 = _json_['z3']




class test_TbTestNull:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = test_TestNull(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)






class test_TestNull :

    def __init__(self, _json_):
        self.id = _json_['id']
        if _json_.get('x1') != None: self.x1 = _json_['x1']
        if _json_.get('x2') != None: self.x2 = test_DemoEnum(_json_['x2'])
        if _json_.get('x3') != None: self.x3 = test_DemoType1(_json_['x3'])
        if _json_.get('x4') != None: self.x4 = test_DemoDynamic.fromJson(_json_['x4'])
        if _json_.get('s1') != None: self.s1 = _json_['s1']
        if _json_.get('s2') != None: self.s2 = _json_['s2']




class test_TbDemoPrimitive:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = test_DemoPrimitiveTypesTable(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.x4] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)






class test_DemoPrimitiveTypesTable :

    def __init__(self, _json_):
        self.x1 = _json_['x1']
        self.x2 = _json_['x2']
        self.x3 = _json_['x3']
        self.x4 = _json_['x4']
        self.x5 = _json_['x5']
        self.x6 = _json_['x6']
        self.x7 = _json_['x7']
        self.s1 = _json_['s1']
        self.s2 = _json_['s2']
        self.v2 = Vector2.fromJson(_json_['v2'])
        self.v3 = Vector3.fromJson(_json_['v3'])
        self.v4 = Vector4.fromJson(_json_['v4'])
        self.t1 = _json_['t1']




class test_TbTestString:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = test_TestString(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)






class test_TestString :

    def __init__(self, _json_):
        self.id = _json_['id']
        self.s1 = _json_['s1']
        self.cs1 = test_CompactString(_json_['cs1'])
        self.cs2 = test_CompactString(_json_['cs2'])





class test_CompactString :

    def __init__(self, _json_):
        self.id = _json_['id']
        self.s2 = _json_['s2']
        self.s3 = _json_['s3']




class test_TbDemoGroup:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = test_DemoGroup(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)






class test_DemoGroup :

    def __init__(self, _json_):
        self.id = _json_['id']
        self.x1 = _json_['x1']
        self.x2 = _json_['x2']
        self.x3 = _json_['x3']
        self.x4 = _json_['x4']
        self.x5 = test_InnerGroup(_json_['x5'])





class test_InnerGroup :

    def __init__(self, _json_):
        self.y1 = _json_['y1']
        self.y2 = _json_['y2']
        self.y3 = _json_['y3']
        self.y4 = _json_['y4']




class test_TbDemoGroup_C:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = test_DemoGroup(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)





class test_TbDemoGroup_S:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = test_DemoGroup(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)





class test_TbDemoGroup_E:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = test_DemoGroup(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)





class test_TbTestGlobal:

    def __init__(self, _json_):
        if (len(_json_) != 1): raise Exception('table mode=one, but size != 1')
        self._data = test_TestGlobal(_json_[0])

    def getData(self) : return self._data

    def unlock_equip(self) : return self._data.unlock_equip
    def unlock_hero(self) : return self._data.unlock_hero





class test_TestGlobal :

    def __init__(self, _json_):
        self.unlock_equip = _json_['unlock_equip']
        self.unlock_hero = _json_['unlock_hero']




class test_TbDetectCsvEncoding:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = test_DetectEncoding(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)






class test_DetectEncoding :

    def __init__(self, _json_):
        self.id = _json_['id']
        self.name = _json_['name']




class test_TbDefineFromExcel:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = test_DefineFromExcel(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)






class test_DefineFromExcel :

    def __init__(self, _json_):
        self.id = _json_['id']
        self.x1 = _json_['x1']
        self.x5 = _json_['x5']
        self.x6 = _json_['x6']
        self.x8 = _json_['x8']
        self.x10 = _json_['x10']
        self.x13 = test_ETestQuality(_json_['x13'])
        self.x14 = test_DemoDynamic.fromJson(_json_['x14'])
        self.v2 = Vector2.fromJson(_json_['v2'])
        self.t1 = _json_['t1']
        self.k1 = _json_['k1']
        self.k8 = {}
        for _ek, _ev in _json_['k8']: _k = _ek; _v = _ev; self.k8[_k] =_v
        self.k9 = []
        for _ele in _json_['k9']: _e = test_DemoE2(_ele); self.k9.append(_e)




class test_TbDefineFromExcelOne:

    def __init__(self, _json_):
        if (len(_json_) != 1): raise Exception('table mode=one, but size != 1')
        self._data = test_DefineFromExcelOne(_json_[0])

    def getData(self) : return self._data

    '''
    装备解锁等级_描述
    '''
    def unlock_equip(self) : return self._data.unlock_equip
    '''
    英雄解锁等级
    '''
    def unlock_hero(self) : return self._data.unlock_hero
    '''
    默认头像
    '''
    def default_avatar(self) : return self._data.default_avatar
    def default_item(self) : return self._data.default_item





class test_DefineFromExcelOne :

    def __init__(self, _json_):
        self.unlock_equip = _json_['unlock_equip']
        self.unlock_hero = _json_['unlock_hero']
        self.default_avatar = _json_['default_avatar']
        self.default_item = _json_['default_item']




class test_TbTestJson2:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = test_TestJson2(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)






class test_TestJson2 :

    def __init__(self, _json_):
        self.id = _json_['id']
        self.m1 = {}
        for _ek, _ev in _json_['m1']: _k = _ek; _v = _ev; self.m1[_k] =_v
        self.m2 = {}
        for _ek, _ev in _json_['m2']: _k = _ek; _v = _ev; self.m2[_k] =_v
        self.m3 = {}
        for _ek, _ev in _json_['m3']: _k = _ek; _v = _ev; self.m3[_k] =_v
        self.m4 = {}
        for _ek, _ev in _json_['m4']: _k = _ek; _v = test_DemoType1(_ev); self.m4[_k] =_v




class test_TbTestIndex:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = test_TestIndex(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)






class test_TestIndex :

    def __init__(self, _json_):
        self.id = _json_['id']
        self.eles = []
        for _ele in _json_['eles']: _e = test_DemoType1(_ele); self.eles.append(_e)




class test_TbDemoGroupDefineFromExcel:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = test_DemoGroup(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)





class test_TbDefineFromExcel2:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = test_DefineFromExcel2(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.id] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)






class test_DefineFromExcel2 :

    def __init__(self, _json_):
        self.id = _json_['id']
        self.x1 = _json_['x1']
        self.x5 = _json_['x5']
        self.x6 = _json_['x6']
        self.x8 = _json_['x8']
        self.x10 = _json_['x10']
        self.x13 = test_ETestQuality(_json_['x13'])
        self.x14 = test_DemoDynamic.fromJson(_json_['x14'])
        self.v2 = Vector2.fromJson(_json_['v2'])
        self.t1 = _json_['t1']
        self.k1 = _json_['k1']
        self.k8 = {}
        for _ek, _ev in _json_['k8']: _k = _ek; _v = _ev; self.k8[_k] =_v
        self.k9 = []
        for _ele in _json_['k9']: _e = test_DemoE2(_ele); self.k9.append(_e)




class test_TbTestExcelBean:

    def __init__(self, _json_ ):
        self._dataMap = {}
        self._dataList = []
        
        for _json2_ in _json_:
            _v = test_TestExcelBean1(_json2_)
            self._dataList.append(_v)
            self._dataMap[_v.x1] = _v

    def getDataMap(self) : return self._dataMap
    def getDataList(self) : return self._dataList

    def get(self, key) : return self._dataMap.get(key)






class test_TestExcelBean1 :

    def __init__(self, _json_):
        self.x1 = _json_['x1']
        self.x2 = _json_['x2']
        self.x3 = _json_['x3']
        self.x4 = _json_['x4']




class Tables:
    #def TbBlackboard : return self._TbBlackboard
    #def TbBehaviorTree : return self._TbBehaviorTree
    #def TbClazz : return self._TbClazz
    #def TbDrop : return self._TbDrop
    #def TbGlobalConfig : return self._TbGlobalConfig
    #def TbDummy : return self._TbDummy
    #def TbErrorInfo : return self._TbErrorInfo
    #def TbCodeInfo : return self._TbCodeInfo
    #def TbItem : return self._TbItem
    #def TbItemFunc : return self._TbItemFunc
    #def TbItemExtra : return self._TbItemExtra
    #def TbL10NDemo : return self._TbL10NDemo
    #def TbPatchDemo : return self._TbPatchDemo
    #def TbSystemMail : return self._TbSystemMail
    #def TbGlobalMail : return self._TbGlobalMail
    #def TbRoleLevelExpAttr : return self._TbRoleLevelExpAttr
    #def TbRoleLevelBonusCoefficient : return self._TbRoleLevelBonusCoefficient
    #def TbTestTag : return self._TbTestTag
    #def TbFullTypes : return self._TbFullTypes
    #def TbSingleton : return self._TbSingleton
    #def TbDataFromMisc : return self._TbDataFromMisc
    #def TbMultiRowRecord : return self._TbMultiRowRecord
    #def TbMultiRowTitle : return self._TbMultiRowTitle
    #def TbTestNull : return self._TbTestNull
    #def TbDemoPrimitive : return self._TbDemoPrimitive
    #def TbTestString : return self._TbTestString
    #def TbDemoGroup : return self._TbDemoGroup
    #def TbDemoGroup_C : return self._TbDemoGroup_C
    #def TbDemoGroup_S : return self._TbDemoGroup_S
    #def TbDemoGroup_E : return self._TbDemoGroup_E
    #def TbTestGlobal : return self._TbTestGlobal
    #def TbDetectCsvEncoding : return self._TbDetectCsvEncoding
    #def TbDefineFromExcel : return self._TbDefineFromExcel
    #def TbDefineFromExcelOne : return self._TbDefineFromExcelOne
    #def TbTestJson2 : return self._TbTestJson2
    #def TbTestIndex : return self._TbTestIndex
    #def TbDemoGroupDefineFromExcel : return self._TbDemoGroupDefineFromExcel
    #def TbDefineFromExcel2 : return self._TbDefineFromExcel2
    #def TbTestExcelBean : return self._TbTestExcelBean

    def __init__(self, loader):
        self.TbBlackboard = ai_TbBlackboard(loader('ai.TbBlackboard')); 
        self.TbBehaviorTree = ai_TbBehaviorTree(loader('ai.TbBehaviorTree')); 
        self.TbClazz = blueprint_TbClazz(loader('blueprint.TbClazz')); 
        self.TbDrop = bonus_TbDrop(loader('bonus.TbDrop')); 
        self.TbGlobalConfig = common_TbGlobalConfig(loader('common.TbGlobalConfig')); 
        self.TbDummy = common_TbDummy(loader('common.TbDummy')); 
        self.TbErrorInfo = error_TbErrorInfo(loader('error.TbErrorInfo')); 
        self.TbCodeInfo = error_TbCodeInfo(loader('error.TbCodeInfo')); 
        self.TbItem = item_TbItem(loader('item.TbItem')); 
        self.TbItemFunc = item_TbItemFunc(loader('item.TbItemFunc')); 
        self.TbItemExtra = item_TbItemExtra(loader('item.TbItemExtra')); 
        self.TbL10NDemo = l10n_TbL10NDemo(loader('l10n.TbL10NDemo')); 
        self.TbPatchDemo = l10n_TbPatchDemo(loader('l10n.TbPatchDemo')); 
        self.TbSystemMail = mail_TbSystemMail(loader('mail.TbSystemMail')); 
        self.TbGlobalMail = mail_TbGlobalMail(loader('mail.TbGlobalMail')); 
        self.TbRoleLevelExpAttr = role_TbRoleLevelExpAttr(loader('role.TbRoleLevelExpAttr')); 
        self.TbRoleLevelBonusCoefficient = role_TbRoleLevelBonusCoefficient(loader('role.TbRoleLevelBonusCoefficient')); 
        self.TbTestTag = tag_TbTestTag(loader('tag.TbTestTag')); 
        self.TbFullTypes = test_TbFullTypes(loader('test.TbFullTypes')); 
        self.TbSingleton = test_TbSingleton(loader('test.TbSingleton')); 
        self.TbDataFromMisc = test_TbDataFromMisc(loader('test.TbDataFromMisc')); 
        self.TbMultiRowRecord = test_TbMultiRowRecord(loader('test.TbMultiRowRecord')); 
        self.TbMultiRowTitle = test_TbMultiRowTitle(loader('test.TbMultiRowTitle')); 
        self.TbTestNull = test_TbTestNull(loader('test.TbTestNull')); 
        self.TbDemoPrimitive = test_TbDemoPrimitive(loader('test.TbDemoPrimitive')); 
        self.TbTestString = test_TbTestString(loader('test.TbTestString')); 
        self.TbDemoGroup = test_TbDemoGroup(loader('test.TbDemoGroup')); 
        self.TbDemoGroup_C = test_TbDemoGroup_C(loader('test.TbDemoGroup_C')); 
        self.TbDemoGroup_S = test_TbDemoGroup_S(loader('test.TbDemoGroup_S')); 
        self.TbDemoGroup_E = test_TbDemoGroup_E(loader('test.TbDemoGroup_E')); 
        self.TbTestGlobal = test_TbTestGlobal(loader('test.TbTestGlobal')); 
        self.TbDetectCsvEncoding = test_TbDetectCsvEncoding(loader('test.TbDetectCsvEncoding')); 
        self.TbDefineFromExcel = test_TbDefineFromExcel(loader('test.TbDefineFromExcel')); 
        self.TbDefineFromExcelOne = test_TbDefineFromExcelOne(loader('test.TbDefineFromExcelOne')); 
        self.TbTestJson2 = test_TbTestJson2(loader('test.TbTestJson2')); 
        self.TbTestIndex = test_TbTestIndex(loader('test.TbTestIndex')); 
        self.TbDemoGroupDefineFromExcel = test_TbDemoGroupDefineFromExcel(loader('test.TbDemoGroupDefineFromExcel')); 
        self.TbDefineFromExcel2 = test_TbDefineFromExcel2(loader('test.TbDefineFromExcel2')); 
        self.TbTestExcelBean = test_TbTestExcelBean(loader('test.TbTestExcelBean')); 

