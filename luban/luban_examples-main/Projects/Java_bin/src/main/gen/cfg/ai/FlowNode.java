
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg.ai;

import bright.serialization.*;



public abstract class FlowNode extends  cfg.ai.Node 
{
    public FlowNode(ByteBuf _buf)
    { 
        super(_buf);
        {int n = Math.min(_buf.readSize(), _buf.size());decorators = new java.util.ArrayList<cfg.ai.Decorator>(n);for(var i = 0 ; i < n ; i++) { cfg.ai.Decorator _e;  _e = cfg.ai.Decorator.deserializeDecorator(_buf); decorators.add(_e);}}
        {int n = Math.min(_buf.readSize(), _buf.size());services = new java.util.ArrayList<cfg.ai.Service>(n);for(var i = 0 ; i < n ; i++) { cfg.ai.Service _e;  _e = cfg.ai.Service.deserializeService(_buf); services.add(_e);}}
    }

    public FlowNode(int id, String node_name, java.util.ArrayList<cfg.ai.Decorator> decorators, java.util.ArrayList<cfg.ai.Service> services )
    {
        super(id, node_name);
        this.decorators = decorators;
        this.services = services;
    }

    public static FlowNode deserializeFlowNode(ByteBuf _buf)
    {
        switch (_buf.readInt())
        {
            case cfg.ai.Sequence.ID: return new cfg.ai.Sequence(_buf);
            case cfg.ai.Selector.ID: return new cfg.ai.Selector(_buf);
            case cfg.ai.SimpleParallel.ID: return new cfg.ai.SimpleParallel(_buf);
            case cfg.ai.UeWait.ID: return new cfg.ai.UeWait(_buf);
            case cfg.ai.UeWaitBlackboardTime.ID: return new cfg.ai.UeWaitBlackboardTime(_buf);
            case cfg.ai.MoveToTarget.ID: return new cfg.ai.MoveToTarget(_buf);
            case cfg.ai.ChooseSkill.ID: return new cfg.ai.ChooseSkill(_buf);
            case cfg.ai.MoveToRandomLocation.ID: return new cfg.ai.MoveToRandomLocation(_buf);
            case cfg.ai.MoveToLocation.ID: return new cfg.ai.MoveToLocation(_buf);
            case cfg.ai.DebugPrint.ID: return new cfg.ai.DebugPrint(_buf);
            default: throw new SerializationException();
        }
    }

    public final java.util.ArrayList<cfg.ai.Decorator> decorators;
    public final java.util.ArrayList<cfg.ai.Service> services;


    @Override
    public void serialize(ByteBuf os)
    {
        throw new UnsupportedOperationException();
    }

    @Override
    public void deserialize(ByteBuf os)
    {
        throw new UnsupportedOperationException();
    }

    public void resolve(java.util.HashMap<String, Object> _tables)
    {
        super.resolve(_tables);
            for(cfg.ai.Decorator _e : decorators) { if (_e != null) _e.resolve(_tables); }
            for(cfg.ai.Service _e : services) { if (_e != null) _e.resolve(_tables); }
    }

    @Override
    public String toString()
    {
        return "{ "
        + "id:" + id + ","
        + "nodeName:" + nodeName + ","
        + "decorators:" + decorators + ","
        + "services:" + services + ","
        + "}";
    }
}

