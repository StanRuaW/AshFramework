
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg.test;

import bright.serialization.*;



public final class TestNull extends  bright.serialization.AbstractBean 
{
    public TestNull(ByteBuf _buf)
    { 
        id = _buf.readInt();
        if(_buf.readBool()){ x1 = _buf.readInt(); } else { x1 = null; }
        if(_buf.readBool()){ x2 = cfg.test.DemoEnum.valueOf(_buf.readInt()); } else { x2 = null; }
        if(_buf.readBool()){ x3 = cfg.test.DemoType1.deserializeDemoType1(_buf); } else { x3 = null; }
        if(_buf.readBool()){ x4 = cfg.test.DemoDynamic.deserializeDemoDynamic(_buf); } else { x4 = null; }
        if(_buf.readBool()){ s1 = _buf.readString(); } else { s1 = null; }
        if(_buf.readBool()){ s2 = _buf.readString(); } else { s2 = null; }
    }

    public TestNull(int id, Integer x1, cfg.test.DemoEnum x2, cfg.test.DemoType1 x3, cfg.test.DemoDynamic x4, String s1, String s2 )
    {
        this.id = id;
        this.x1 = x1;
        this.x2 = x2;
        this.x3 = x3;
        this.x4 = x4;
        this.s1 = s1;
        this.s2 = s2;
    }

    public static TestNull deserializeTestNull(ByteBuf _buf)
    {
        return new TestNull(_buf);
    }

    public final int id;
    public final Integer x1;
    public final cfg.test.DemoEnum x2;
    public final cfg.test.DemoType1 x3;
    public final cfg.test.DemoDynamic x4;
    public final String s1;
    public final String s2;

    public static final int ID = 339868469;

    @Override
    public int getTypeId() { return ID; }

    @Override
    public void serialize(ByteBuf os)
    {
        throw new UnsupportedOperationException();
    }

    @Override
    public void deserialize(ByteBuf os)
    {
        throw new UnsupportedOperationException();
    }

    public void resolve(java.util.HashMap<String, Object> _tables)
    {
            if (x3 != null) {x3.resolve(_tables);}
            if (x4 != null) {x4.resolve(_tables);}
    }

    @Override
    public String toString()
    {
        return "{ "
        + "id:" + id + ","
        + "x1:" + x1 + ","
        + "x2:" + x2 + ","
        + "x3:" + x3 + ","
        + "x4:" + x4 + ","
        + "s1:" + s1 + ","
        + "s2:" + s2 + ","
        + "}";
    }
}

