
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg.test;

import bright.serialization.*;



public final class TestJson2 extends  bright.serialization.AbstractBean 
{
    public TestJson2(ByteBuf _buf)
    { 
        id = _buf.readInt();
        {int n = Math.min(_buf.readSize(), _buf.size());m1 = new java.util.HashMap<Integer, Integer>(n * 3 / 2);for(var i = 0 ; i < n ; i++) { Integer _k;  _k = _buf.readInt(); Integer _v;  _v = _buf.readInt();     m1.put(_k, _v);}}
        {int n = Math.min(_buf.readSize(), _buf.size());m2 = new java.util.HashMap<Long, Integer>(n * 3 / 2);for(var i = 0 ; i < n ; i++) { Long _k;  _k = _buf.readLong(); Integer _v;  _v = _buf.readInt();     m2.put(_k, _v);}}
        {int n = Math.min(_buf.readSize(), _buf.size());m3 = new java.util.HashMap<String, Integer>(n * 3 / 2);for(var i = 0 ; i < n ; i++) { String _k;  _k = _buf.readString(); Integer _v;  _v = _buf.readInt();     m3.put(_k, _v);}}
        {int n = Math.min(_buf.readSize(), _buf.size());m4 = new java.util.HashMap<String, cfg.test.DemoType1>(n * 3 / 2);for(var i = 0 ; i < n ; i++) { String _k;  _k = _buf.readString(); cfg.test.DemoType1 _v;  _v = cfg.test.DemoType1.deserializeDemoType1(_buf);     m4.put(_k, _v);}}
    }

    public TestJson2(int id, java.util.HashMap<Integer, Integer> m1, java.util.HashMap<Long, Integer> m2, java.util.HashMap<String, Integer> m3, java.util.HashMap<String, cfg.test.DemoType1> m4 )
    {
        this.id = id;
        this.m1 = m1;
        this.m2 = m2;
        this.m3 = m3;
        this.m4 = m4;
    }

    public static TestJson2 deserializeTestJson2(ByteBuf _buf)
    {
        return new TestJson2(_buf);
    }

    public final int id;
    public final java.util.HashMap<Integer, Integer> m1;
    public final java.util.HashMap<Long, Integer> m2;
    public final java.util.HashMap<String, Integer> m3;
    public final java.util.HashMap<String, cfg.test.DemoType1> m4;

    public static final int ID = 1942237276;

    @Override
    public int getTypeId() { return ID; }

    @Override
    public void serialize(ByteBuf os)
    {
        throw new UnsupportedOperationException();
    }

    @Override
    public void deserialize(ByteBuf os)
    {
        throw new UnsupportedOperationException();
    }

    public void resolve(java.util.HashMap<String, Object> _tables)
    {
            for(cfg.test.DemoType1 _e : m4.values()) { if (_e != null) _e.resolve(_tables); }
    }

    @Override
    public String toString()
    {
        return "{ "
        + "id:" + id + ","
        + "m1:" + m1 + ","
        + "m2:" + m2 + ","
        + "m3:" + m3 + ","
        + "m4:" + m4 + ","
        + "}";
    }
}

