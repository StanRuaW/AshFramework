
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg.ai;

import bright.serialization.*;



public abstract class Decorator extends  cfg.ai.Node 
{
    public Decorator(ByteBuf _buf)
    { 
        super(_buf);
        flowAbortMode = cfg.ai.EFlowAbortMode.valueOf(_buf.readInt());
    }

    public Decorator(int id, String node_name, cfg.ai.EFlowAbortMode flow_abort_mode )
    {
        super(id, node_name);
        this.flowAbortMode = flow_abort_mode;
    }

    public static Decorator deserializeDecorator(ByteBuf _buf)
    {
        switch (_buf.readInt())
        {
            case cfg.ai.UeLoop.ID: return new cfg.ai.UeLoop(_buf);
            case cfg.ai.UeCooldown.ID: return new cfg.ai.UeCooldown(_buf);
            case cfg.ai.UeTimeLimit.ID: return new cfg.ai.UeTimeLimit(_buf);
            case cfg.ai.UeBlackboard.ID: return new cfg.ai.UeBlackboard(_buf);
            case cfg.ai.UeForceSuccess.ID: return new cfg.ai.UeForceSuccess(_buf);
            case cfg.ai.IsAtLocation.ID: return new cfg.ai.IsAtLocation(_buf);
            case cfg.ai.DistanceLessThan.ID: return new cfg.ai.DistanceLessThan(_buf);
            default: throw new SerializationException();
        }
    }

    public final cfg.ai.EFlowAbortMode flowAbortMode;


    @Override
    public void serialize(ByteBuf os)
    {
        throw new UnsupportedOperationException();
    }

    @Override
    public void deserialize(ByteBuf os)
    {
        throw new UnsupportedOperationException();
    }

    public void resolve(java.util.HashMap<String, Object> _tables)
    {
        super.resolve(_tables);
    }

    @Override
    public String toString()
    {
        return "{ "
        + "id:" + id + ","
        + "nodeName:" + nodeName + ","
        + "flowAbortMode:" + flowAbortMode + ","
        + "}";
    }
}

