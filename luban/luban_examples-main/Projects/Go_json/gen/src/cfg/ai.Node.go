
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
package cfg

import "errors"

type Ai_Node struct {
    Id int32
    NodeName string
}


func NewAi_Node(_buf map[string]interface{}) (_v interface{}, err error) {
    var id string
    var _ok_ bool
    if id, _ok_ = _buf["__type__"].(string) ; !_ok_ {
        return nil, errors.New("type id missing")
    }
    switch id {
        case "UeSetDefaultFocus": return NewAi_UeSetDefaultFocus(_buf);
        case "ExecuteTimeStatistic": return NewAi_ExecuteTimeStatistic(_buf);
        case "ChooseTarget": return NewAi_ChooseTarget(_buf);
        case "KeepFaceTarget": return NewAi_KeepFaceTarget(_buf);
        case "GetOwnerPlayer": return NewAi_GetOwnerPlayer(_buf);
        case "UpdateDailyBehaviorProps": return NewAi_UpdateDailyBehaviorProps(_buf);
        case "UeLoop": return NewAi_UeLoop(_buf);
        case "UeCooldown": return NewAi_UeCooldown(_buf);
        case "UeTimeLimit": return NewAi_UeTimeLimit(_buf);
        case "UeBlackboard": return NewAi_UeBlackboard(_buf);
        case "UeForceSuccess": return NewAi_UeForceSuccess(_buf);
        case "IsAtLocation": return NewAi_IsAtLocation(_buf);
        case "DistanceLessThan": return NewAi_DistanceLessThan(_buf);
        case "Sequence": return NewAi_Sequence(_buf);
        case "Selector": return NewAi_Selector(_buf);
        case "SimpleParallel": return NewAi_SimpleParallel(_buf);
        case "UeWait": return NewAi_UeWait(_buf);
        case "UeWaitBlackboardTime": return NewAi_UeWaitBlackboardTime(_buf);
        case "MoveToTarget": return NewAi_MoveToTarget(_buf);
        case "ChooseSkill": return NewAi_ChooseSkill(_buf);
        case "MoveToRandomLocation": return NewAi_MoveToRandomLocation(_buf);
        case "MoveToLocation": return NewAi_MoveToLocation(_buf);
        case "DebugPrint": return NewAi_DebugPrint(_buf);
        default: return nil, errors.New("unknown type id")
    }
    return
}

func NewAi_Node_Body(_buf map[string]interface{}) (_v *Ai_Node, err error) {
    _v = &Ai_Node{}
    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["id"].(float64); !_ok_ { err = errors.New("id error"); return }; _v.Id = int32(_tempNum_) }
    { var _ok_ bool; if _v.NodeName, _ok_ = _buf["node_name"].(string); !_ok_ { err = errors.New("node_name error"); return } }
    return
}

