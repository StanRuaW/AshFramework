
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
package cfg

import "errors"
import "bright/math"

type Ai_MoveToLocation struct {
    Ai_Task
    Location math.Vector3
    AcceptableRadius float32
}

func (Ai_MoveToLocation) GetTypeId() int {
    return -969953113
}

func NewAi_MoveToLocation(_buf map[string]interface{}) (_v *Ai_MoveToLocation, err error) {
    _v = &Ai_MoveToLocation{}
    var _p *Ai_Task
     if _p, err = NewAi_Task_Body(_buf) ; err != nil { return }
    _v.Ai_Task = *_p
    { var _ok_ bool; var _v_ map[string]interface{}; if _v_, _ok_ = _buf["location"].(map[string]interface{}); !_ok_ { err = errors.New("location error"); return }
            var _x_, _y_, _z_ float32;
            { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _v_["x"].(float64); !_ok_ { err = errors.New("x error"); return }; _x_ = float32(_tempNum_) }
            { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _v_["y"].(float64); !_ok_ { err = errors.New("y error"); return }; _y_ = float32(_tempNum_) }
            { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _v_["z"].(float64); !_ok_ { err = errors.New("z error"); return }; _z_ = float32(_tempNum_) }
            _v.Location = math.NewVector3(_x_, _y_, _z_)
            }

    { var _ok_ bool; var _tempNum_ float64; if _tempNum_, _ok_ = _buf["acceptable_radius"].(float64); !_ok_ { err = errors.New("acceptable_radius error"); return }; _v.AcceptableRadius = float32(_tempNum_) }
    return
}

