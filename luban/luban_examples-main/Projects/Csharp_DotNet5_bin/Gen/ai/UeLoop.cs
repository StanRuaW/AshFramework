
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Bright.Serialization;
using System.Collections.Generic;



namespace cfg.ai
{

public sealed partial class UeLoop :  ai.Decorator 
{
    public UeLoop(ByteBuf _buf)  : base(_buf) 
    {
        NumLoops = _buf.ReadInt();
        InfiniteLoop = _buf.ReadBool();
        InfiniteLoopTimeoutTime = _buf.ReadFloat();
    }

    public UeLoop(int id, string node_name, ai.EFlowAbortMode flow_abort_mode, int num_loops, bool infinite_loop, float infinite_loop_timeout_time )  : base(id,node_name,flow_abort_mode) 
    {
        this.NumLoops = num_loops;
        this.InfiniteLoop = infinite_loop;
        this.InfiniteLoopTimeoutTime = infinite_loop_timeout_time;
    }

    public static UeLoop DeserializeUeLoop(ByteBuf _buf)
    {
        return new ai.UeLoop(_buf);
    }

    public readonly int NumLoops;
    public readonly bool InfiniteLoop;
    public readonly float InfiniteLoopTimeoutTime;

    public const int ID = -513308166;
    public override int GetTypeId() => ID;

    public override void Resolve(Dictionary<string, object> _tables)
    {
        base.Resolve(_tables);
        OnResolveFinish(_tables);
    }

    partial void OnResolveFinish(Dictionary<string, object> _tables);

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "NodeName:" + NodeName + ","
        + "FlowAbortMode:" + FlowAbortMode + ","
        + "NumLoops:" + NumLoops + ","
        + "InfiniteLoop:" + InfiniteLoop + ","
        + "InfiniteLoopTimeoutTime:" + InfiniteLoopTimeoutTime + ","
        + "}";
    }
    }

}

