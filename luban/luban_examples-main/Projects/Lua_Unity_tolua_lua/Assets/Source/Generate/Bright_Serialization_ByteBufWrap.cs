//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Bright_Serialization_ByteBufWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Bright.Serialization.ByteBuf), typeof(System.Object));
		L.RegFunction("Wrap", Wrap);
		L.RegFunction("Replace", Replace);
		L.RegFunction("AddWriteIndex", AddWriteIndex);
		L.RegFunction("AddReadIndex", AddReadIndex);
		L.RegFunction("CopyData", CopyData);
		L.RegFunction("DiscardReadBytes", DiscardReadBytes);
		L.RegFunction("WriteBytesWithoutSize", WriteBytesWithoutSize);
		L.RegFunction("Clear", Clear);
		L.RegFunction("EnsureWrite", EnsureWrite);
		L.RegFunction("Append", Append);
		L.RegFunction("WriteBool", WriteBool);
		L.RegFunction("ReadBool", ReadBool);
		L.RegFunction("WriteByte", WriteByte);
		L.RegFunction("ReadByte", ReadByte);
		L.RegFunction("WriteShort", WriteShort);
		L.RegFunction("ReadShort", ReadShort);
		L.RegFunction("ReadFshort", ReadFshort);
		L.RegFunction("WriteFshort", WriteFshort);
		L.RegFunction("WriteInt", WriteInt);
		L.RegFunction("ReadInt", ReadInt);
		L.RegFunction("WriteUint", WriteUint);
		L.RegFunction("ReadUint", ReadUint);
		L.RegFunction("WriteUint_Unsafe", WriteUint_Unsafe);
		L.RegFunction("ReadUint_Unsafe", ReadUint_Unsafe);
		L.RegFunction("ReadFint", ReadFint);
		L.RegFunction("WriteFint", WriteFint);
		L.RegFunction("ReadFint_Safe", ReadFint_Safe);
		L.RegFunction("WriteFint_Safe", WriteFint_Safe);
		L.RegFunction("WriteLong", WriteLong);
		L.RegFunction("ReadLong", ReadLong);
		L.RegFunction("ReadUlong", ReadUlong);
		L.RegFunction("WriteFlong", WriteFlong);
		L.RegFunction("ReadFlong", ReadFlong);
		L.RegFunction("WriteFloat", WriteFloat);
		L.RegFunction("ReadFloat", ReadFloat);
		L.RegFunction("WriteDouble", WriteDouble);
		L.RegFunction("ReadDouble", ReadDouble);
		L.RegFunction("WriteSize", WriteSize);
		L.RegFunction("ReadSize", ReadSize);
		L.RegFunction("WriteSint", WriteSint);
		L.RegFunction("ReadSint", ReadSint);
		L.RegFunction("WriteSlong", WriteSlong);
		L.RegFunction("ReadSlong", ReadSlong);
		L.RegFunction("WriteString", WriteString);
		L.RegFunction("ReadString", ReadString);
		L.RegFunction("WriteBytes", WriteBytes);
		L.RegFunction("ReadBytes", ReadBytes);
		L.RegFunction("WriteComplex", WriteComplex);
		L.RegFunction("ReadComplex", ReadComplex);
		L.RegFunction("WriteVector2", WriteVector2);
		L.RegFunction("ReadVector2", ReadVector2);
		L.RegFunction("WriteVector3", WriteVector3);
		L.RegFunction("ReadVector3", ReadVector3);
		L.RegFunction("WriteVector4", WriteVector4);
		L.RegFunction("ReadVector4", ReadVector4);
		L.RegFunction("WriteQuaternion", WriteQuaternion);
		L.RegFunction("ReadQuaternion", ReadQuaternion);
		L.RegFunction("WriteMatrix4x4", WriteMatrix4x4);
		L.RegFunction("ReadMatrix4x4", ReadMatrix4x4);
		L.RegFunction("WriteByteBufWithSize", WriteByteBufWithSize);
		L.RegFunction("WriteByteBufWithoutSize", WriteByteBufWithoutSize);
		L.RegFunction("TryReadByte", TryReadByte);
		L.RegFunction("TryDeserializeInplaceByteBuf", TryDeserializeInplaceByteBuf);
		L.RegFunction("WriteRawTag", WriteRawTag);
		L.RegFunction("BeginWriteSegment", BeginWriteSegment);
		L.RegFunction("EndWriteSegment", EndWriteSegment);
		L.RegFunction("ReadSegment", ReadSegment);
		L.RegFunction("EnterSegment", EnterSegment);
		L.RegFunction("LeaveSegment", LeaveSegment);
		L.RegFunction("ToString", ToString);
		L.RegFunction("Equals", Equals);
		L.RegFunction("Clone", Clone);
		L.RegFunction("FromString", FromString);
		L.RegFunction("GetHashCode", GetHashCode);
		L.RegFunction("Release", Release);
		L.RegFunction("New", _CreateBright_Serialization_ByteBuf);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("ReaderIndex", get_ReaderIndex, set_ReaderIndex);
		L.RegVar("WriterIndex", get_WriterIndex, set_WriterIndex);
		L.RegVar("Capacity", get_Capacity, null);
		L.RegVar("Size", get_Size, null);
		L.RegVar("Empty", get_Empty, null);
		L.RegVar("NotEmpty", get_NotEmpty, null);
		L.RegVar("Bytes", get_Bytes, null);
		L.RegVar("Remaining", get_Remaining, null);
		L.RegVar("NotCompactWritable", get_NotCompactWritable, null);
		L.RegVar("StringCacheFinder", get_StringCacheFinder, set_StringCacheFinder);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateBright_Serialization_ByteBuf(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Bright.Serialization.ByteBuf obj = new Bright.Serialization.ByteBuf();
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<int>(L, 1))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				Bright.Serialization.ByteBuf obj = new Bright.Serialization.ByteBuf(arg0);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<byte[]>(L, 1))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				Bright.Serialization.ByteBuf obj = new Bright.Serialization.ByteBuf(arg0);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 2)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				System.Action<Bright.Serialization.ByteBuf> arg1 = (System.Action<Bright.Serialization.ByteBuf>)ToLua.CheckDelegate<System.Action<Bright.Serialization.ByteBuf>>(L, 2);
				Bright.Serialization.ByteBuf obj = new Bright.Serialization.ByteBuf(arg0, arg1);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 3)
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				Bright.Serialization.ByteBuf obj = new Bright.Serialization.ByteBuf(arg0, arg1, arg2);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Bright.Serialization.ByteBuf.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Wrap(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			Bright.Serialization.ByteBuf o = Bright.Serialization.ByteBuf.Wrap(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Replace(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				obj.Replace(arg0);
				return 0;
			}
			else if (count == 4)
			{
				Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				obj.Replace(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Bright.Serialization.ByteBuf.Replace");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddWriteIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.AddWriteIndex(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddReadIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.AddReadIndex(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CopyData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			byte[] o = obj.CopyData();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DiscardReadBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			obj.DiscardReadBytes();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBytesWithoutSize(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				obj.WriteBytesWithoutSize(arg0);
				return 0;
			}
			else if (count == 4)
			{
				Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				obj.WriteBytesWithoutSize(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Bright.Serialization.ByteBuf.WriteBytesWithoutSize");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnsureWrite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.EnsureWrite(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Append(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			byte arg0 = (byte)LuaDLL.luaL_checknumber(L, 2);
			obj.Append(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBool(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.WriteBool(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadBool(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			bool o = obj.ReadBool();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			byte arg0 = (byte)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteByte(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			byte o = obj.ReadByte();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteShort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			short arg0 = (short)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteShort(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadShort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			short o = obj.ReadShort();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadFshort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			short o = obj.ReadFshort();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteFshort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			short arg0 = (short)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteFshort(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteInt(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			int o = obj.ReadInt();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteUint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteUint(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadUint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			uint o = obj.ReadUint();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteUint_Unsafe(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteUint_Unsafe(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadUint_Unsafe(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			uint o = obj.ReadUint_Unsafe();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadFint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			int o = obj.ReadFint();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteFint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteFint(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadFint_Safe(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			int o = obj.ReadFint_Safe();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteFint_Safe(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteFint_Safe(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteLong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.WriteLong(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadLong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			long o = obj.ReadLong();
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadUlong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			ulong o = obj.ReadUlong();
			LuaDLL.tolua_pushuint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteFlong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.WriteFlong(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadFlong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			long o = obj.ReadFlong();
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteFloat(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			float o = obj.ReadFloat();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			double arg0 = (double)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteDouble(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			double o = obj.ReadDouble();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteSize(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			int o = obj.ReadSize();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteSint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteSint(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadSint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			int o = obj.ReadSint();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteSlong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.WriteSlong(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadSlong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			long o = obj.ReadSlong();
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			string arg0 = ToLua.CheckString(L, 2);
			obj.WriteString(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			string o = obj.ReadString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			obj.WriteBytes(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			byte[] o = obj.ReadBytes();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteComplex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			System.Numerics.Complex arg0 = StackTraits<System.Numerics.Complex>.Check(L, 2);
			obj.WriteComplex(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadComplex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			System.Numerics.Complex o = obj.ReadComplex();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteVector2(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			System.Numerics.Vector2 arg0 = StackTraits<System.Numerics.Vector2>.Check(L, 2);
			obj.WriteVector2(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadVector2(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			System.Numerics.Vector2 o = obj.ReadVector2();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteVector3(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			System.Numerics.Vector3 arg0 = StackTraits<System.Numerics.Vector3>.Check(L, 2);
			obj.WriteVector3(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadVector3(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			System.Numerics.Vector3 o = obj.ReadVector3();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteVector4(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			System.Numerics.Vector4 arg0 = StackTraits<System.Numerics.Vector4>.Check(L, 2);
			obj.WriteVector4(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadVector4(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			System.Numerics.Vector4 o = obj.ReadVector4();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteQuaternion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			System.Numerics.Quaternion arg0 = StackTraits<System.Numerics.Quaternion>.Check(L, 2);
			obj.WriteQuaternion(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadQuaternion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			System.Numerics.Quaternion o = obj.ReadQuaternion();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteMatrix4x4(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			System.Numerics.Matrix4x4 arg0 = StackTraits<System.Numerics.Matrix4x4>.Check(L, 2);
			obj.WriteMatrix4x4(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadMatrix4x4(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			System.Numerics.Matrix4x4 o = obj.ReadMatrix4x4();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteByteBufWithSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			Bright.Serialization.ByteBuf arg0 = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 2, typeof(Bright.Serialization.ByteBuf));
			obj.WriteByteBufWithSize(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteByteBufWithoutSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			Bright.Serialization.ByteBuf arg0 = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 2, typeof(Bright.Serialization.ByteBuf));
			obj.WriteByteBufWithoutSize(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TryReadByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			byte arg0;
			bool o = obj.TryReadByte(out arg0);
			LuaDLL.lua_pushboolean(L, o);
			LuaDLL.lua_pushnumber(L, arg0);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TryDeserializeInplaceByteBuf(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Bright.Serialization.ByteBuf arg1 = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 3, typeof(Bright.Serialization.ByteBuf));
			Bright.Serialization.EDeserializeError o = obj.TryDeserializeInplaceByteBuf(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteRawTag(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
				byte arg0 = (byte)LuaDLL.luaL_checknumber(L, 2);
				obj.WriteRawTag(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
				byte arg0 = (byte)LuaDLL.luaL_checknumber(L, 2);
				byte arg1 = (byte)LuaDLL.luaL_checknumber(L, 3);
				obj.WriteRawTag(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
				byte arg0 = (byte)LuaDLL.luaL_checknumber(L, 2);
				byte arg1 = (byte)LuaDLL.luaL_checknumber(L, 3);
				byte arg2 = (byte)LuaDLL.luaL_checknumber(L, 4);
				obj.WriteRawTag(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Bright.Serialization.ByteBuf.WriteRawTag");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginWriteSegment(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			int arg0;
			obj.BeginWriteSegment(out arg0);
			LuaDLL.lua_pushinteger(L, arg0);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndWriteSegment(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.EndWriteSegment(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadSegment(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
				Bright.Serialization.ByteBuf arg0 = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 2, typeof(Bright.Serialization.ByteBuf));
				obj.ReadSegment(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
				int arg0;
				int arg1;
				obj.ReadSegment(out arg0, out arg1);
				LuaDLL.lua_pushinteger(L, arg0);
				LuaDLL.lua_pushinteger(L, arg1);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Bright.Serialization.ByteBuf.ReadSegment");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnterSegment(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			Bright.Serialization.SegmentSaveState arg0;
			obj.EnterSegment(out arg0);
			ToLua.PushValue(L, arg0);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LeaveSegment(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			Bright.Serialization.SegmentSaveState arg0 = StackTraits<Bright.Serialization.SegmentSaveState>.Check(L, 2);
			obj.LeaveSegment(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Equals(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<Bright.Serialization.ByteBuf>(L, 2))
			{
				Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
				Bright.Serialization.ByteBuf arg0 = (Bright.Serialization.ByteBuf)ToLua.ToObject(L, 2);
				bool o = obj != null ? obj.Equals(arg0) : arg0 == null;
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object>(L, 2))
			{
				Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
				object arg0 = ToLua.ToVarObject(L, 2);
				bool o = obj != null ? obj.Equals(arg0) : arg0 == null;
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Bright.Serialization.ByteBuf.Equals");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			object o = obj.Clone();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FromString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			Bright.Serialization.ByteBuf o = Bright.Serialization.ByteBuf.FromString(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHashCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			int o = obj.GetHashCode();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Release(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)ToLua.CheckObject(L, 1, typeof(Bright.Serialization.ByteBuf));
			obj.Release();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReaderIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)o;
			int ret = obj.ReaderIndex;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReaderIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WriterIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)o;
			int ret = obj.WriterIndex;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index WriterIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Capacity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)o;
			int ret = obj.Capacity;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Capacity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Size(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)o;
			int ret = obj.Size;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Size on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Empty(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)o;
			bool ret = obj.Empty;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Empty on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NotEmpty(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)o;
			bool ret = obj.NotEmpty;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NotEmpty on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Bytes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)o;
			byte[] ret = obj.Bytes;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Bytes on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Remaining(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)o;
			int ret = obj.Remaining;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Remaining on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NotCompactWritable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)o;
			int ret = obj.NotCompactWritable;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NotCompactWritable on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StringCacheFinder(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Bright.Serialization.ByteBuf.StringCacheFinder);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ReaderIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ReaderIndex = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReaderIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_WriterIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Bright.Serialization.ByteBuf obj = (Bright.Serialization.ByteBuf)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.WriterIndex = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index WriterIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_StringCacheFinder(IntPtr L)
	{
		try
		{
			System.Func<byte[],int,int,string> arg0 = (System.Func<byte[],int,int,string>)ToLua.CheckDelegate<System.Func<byte[],int,int,string>>(L, 2);
			Bright.Serialization.ByteBuf.StringCacheFinder = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

