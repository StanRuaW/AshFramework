
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Bright.Serialization;
using System.Collections.Generic;
using System.Text.Json;



namespace cfg.ai
{

public sealed partial class IsAtLocation :  ai.Decorator 
{
    public IsAtLocation(JsonElement _json)  : base(_json) 
    {
        AcceptableRadius = _json.GetProperty("acceptable_radius").GetSingle();
        KeyboardKey = _json.GetProperty("keyboard_key").GetString();
        InverseCondition = _json.GetProperty("inverse_condition").GetBoolean();
    }

    public IsAtLocation(int id, string node_name, ai.EFlowAbortMode flow_abort_mode, float acceptable_radius, string keyboard_key, bool inverse_condition )  : base(id,node_name,flow_abort_mode) 
    {
        this.AcceptableRadius = acceptable_radius;
        this.KeyboardKey = keyboard_key;
        this.InverseCondition = inverse_condition;
    }

    public static IsAtLocation DeserializeIsAtLocation(JsonElement _json)
    {
        return new ai.IsAtLocation(_json);
    }

    public readonly float AcceptableRadius;
    public readonly string KeyboardKey;
    public readonly bool InverseCondition;

    public const int ID = 1255972344;
    public override int GetTypeId() => ID;

    public override void Resolve(Dictionary<string, object> _tables)
    {
        base.Resolve(_tables);
        OnResolveFinish(_tables);
    }

    partial void OnResolveFinish(Dictionary<string, object> _tables);

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "NodeName:" + NodeName + ","
        + "FlowAbortMode:" + FlowAbortMode + ","
        + "AcceptableRadius:" + AcceptableRadius + ","
        + "KeyboardKey:" + KeyboardKey + ","
        + "InverseCondition:" + InverseCondition + ","
        + "}";
    }
    }
}

