
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Bright.Serialization;
using System.Collections.Generic;
using System.Text.Json;



namespace cfg.item
{

/// <summary>
/// 道具
/// </summary>
public sealed partial class Item :  Bright.Config.BeanBase 
{
    public Item(JsonElement _json) 
    {
        Id = _json.GetProperty("id").GetInt32();
        Name = _json.GetProperty("name").GetString();
        MajorType = (item.EMajorType)_json.GetProperty("major_type").GetInt32();
        MinorType = (item.EMinorType)_json.GetProperty("minor_type").GetInt32();
        MaxPileNum = _json.GetProperty("max_pile_num").GetInt32();
        Quality = (item.EItemQuality)_json.GetProperty("quality").GetInt32();
        Icon = _json.GetProperty("icon").GetString();
        IconBackgroud = _json.GetProperty("icon_backgroud").GetString();
        IconMask = _json.GetProperty("icon_mask").GetString();
        Desc = _json.GetProperty("desc").GetString();
        ShowOrder = _json.GetProperty("show_order").GetInt32();
        Quantifier = _json.GetProperty("quantifier").GetString();
        ShowInBag = _json.GetProperty("show_in_bag").GetBoolean();
        MinShowLevel = _json.GetProperty("min_show_level").GetInt32();
        BatchUsable = _json.GetProperty("batch_usable").GetBoolean();
        ProgressTimeWhenUse = _json.GetProperty("progress_time_when_use").GetSingle();
        ShowHintWhenUse = _json.GetProperty("show_hint_when_use").GetBoolean();
        Droppable = _json.GetProperty("droppable").GetBoolean();
        { if (_json.TryGetProperty("price", out var _j) && _j.ValueKind != JsonValueKind.Null) { Price = _j.GetInt32(); } else { Price = null; } }
        UseType = (item.EUseType)_json.GetProperty("use_type").GetInt32();
        { if (_json.TryGetProperty("level_up_id", out var _j) && _j.ValueKind != JsonValueKind.Null) { LevelUpId = _j.GetInt32(); } else { LevelUpId = null; } }
    }

    public Item(int id, string name, item.EMajorType major_type, item.EMinorType minor_type, int max_pile_num, item.EItemQuality quality, string icon, string icon_backgroud, string icon_mask, string desc, int show_order, string quantifier, bool show_in_bag, int min_show_level, bool batch_usable, float progress_time_when_use, bool show_hint_when_use, bool droppable, int? price, item.EUseType use_type, int? level_up_id ) 
    {
        this.Id = id;
        this.Name = name;
        this.MajorType = major_type;
        this.MinorType = minor_type;
        this.MaxPileNum = max_pile_num;
        this.Quality = quality;
        this.Icon = icon;
        this.IconBackgroud = icon_backgroud;
        this.IconMask = icon_mask;
        this.Desc = desc;
        this.ShowOrder = show_order;
        this.Quantifier = quantifier;
        this.ShowInBag = show_in_bag;
        this.MinShowLevel = min_show_level;
        this.BatchUsable = batch_usable;
        this.ProgressTimeWhenUse = progress_time_when_use;
        this.ShowHintWhenUse = show_hint_when_use;
        this.Droppable = droppable;
        this.Price = price;
        this.UseType = use_type;
        this.LevelUpId = level_up_id;
    }

    public static Item DeserializeItem(JsonElement _json)
    {
        return new item.Item(_json);
    }

    /// <summary>
    /// 道具id
    /// </summary>
    public readonly int Id;
    public readonly string Name;
    public readonly item.EMajorType MajorType;
    public readonly item.EMinorType MinorType;
    public readonly int MaxPileNum;
    public readonly item.EItemQuality Quality;
    public readonly string Icon;
    public readonly string IconBackgroud;
    public readonly string IconMask;
    public readonly string Desc;
    public readonly int ShowOrder;
    public readonly string Quantifier;
    public readonly bool ShowInBag;
    public readonly int MinShowLevel;
    public readonly bool BatchUsable;
    public readonly float ProgressTimeWhenUse;
    public readonly bool ShowHintWhenUse;
    public readonly bool Droppable;
    public readonly int? Price;
    public readonly item.EUseType UseType;
    public readonly int? LevelUpId;

    public const int ID = 2107285806;
    public override int GetTypeId() => ID;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        OnResolveFinish(_tables);
    }

    partial void OnResolveFinish(Dictionary<string, object> _tables);

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "MajorType:" + MajorType + ","
        + "MinorType:" + MinorType + ","
        + "MaxPileNum:" + MaxPileNum + ","
        + "Quality:" + Quality + ","
        + "Icon:" + Icon + ","
        + "IconBackgroud:" + IconBackgroud + ","
        + "IconMask:" + IconMask + ","
        + "Desc:" + Desc + ","
        + "ShowOrder:" + ShowOrder + ","
        + "Quantifier:" + Quantifier + ","
        + "ShowInBag:" + ShowInBag + ","
        + "MinShowLevel:" + MinShowLevel + ","
        + "BatchUsable:" + BatchUsable + ","
        + "ProgressTimeWhenUse:" + ProgressTimeWhenUse + ","
        + "ShowHintWhenUse:" + ShowHintWhenUse + ","
        + "Droppable:" + Droppable + ","
        + "Price:" + Price + ","
        + "UseType:" + UseType + ","
        + "LevelUpId:" + LevelUpId + ","
        + "}";
    }
    }
}

