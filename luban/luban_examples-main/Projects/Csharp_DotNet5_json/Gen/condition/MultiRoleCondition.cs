
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Bright.Serialization;
using System.Collections.Generic;
using System.Text.Json;



namespace cfg.condition
{

public sealed partial class MultiRoleCondition :  condition.RoleCondition 
{
    public MultiRoleCondition(JsonElement _json)  : base(_json) 
    {
        { var _json0 = _json.GetProperty("conditions"); int _n = _json0.GetArrayLength(); Conditions = new condition.RoleCondition[_n]; int _index=0; foreach(JsonElement __e in _json0.EnumerateArray()) { condition.RoleCondition __v;  __v =  condition.RoleCondition.DeserializeRoleCondition(__e);  Conditions[_index++] = __v; }   }
    }

    public MultiRoleCondition(condition.RoleCondition[] conditions )  : base() 
    {
        this.Conditions = conditions;
    }

    public static MultiRoleCondition DeserializeMultiRoleCondition(JsonElement _json)
    {
        return new condition.MultiRoleCondition(_json);
    }

    public readonly condition.RoleCondition[] Conditions;

    public const int ID = 934079583;
    public override int GetTypeId() => ID;

    public override void Resolve(Dictionary<string, object> _tables)
    {
        base.Resolve(_tables);
        foreach(var _e in Conditions) { _e?.Resolve(_tables); }
        OnResolveFinish(_tables);
    }

    partial void OnResolveFinish(Dictionary<string, object> _tables);

    public override string ToString()
    {
        return "{ "
        + "Conditions:" + Bright.Common.StringUtil.CollectionToString(Conditions) + ","
        + "}";
    }
    }
}

